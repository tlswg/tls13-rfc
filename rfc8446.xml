<?xml version="1.0" encoding="US-ASCII"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>

<rfc ipr="pre5378Trust200902" number="8446" category="std"
 obsoletes="5077, 5246, 6961" updates="4492, 5705, 6066"
 submissionType="IETF" consensus="yes">

  <front>
    <title abbrev="TLS">The Transport Layer Security (TLS) Protocol Version 1.3</title>

    <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
      <organization>RTFM, Inc.</organization>
      <address>
        <email>ekr@rtfm.com</email>
      </address>
    </author>

    <date year="2018" month="August"/>

    <abstract>

<t>This document specifies version 1.3 of the Transport Layer Security
(TLS) protocol.  TLS allows client/server applications to communicate
over the Internet in a way that is designed to prevent eavesdropping,
tampering, and message forgery.</t>

<t>This document updates RFCs 4492, 5705, and 6066, and obsoletes
RFCs 5077, 5246, and 6961. This document also specifies new
requirements for TLS 1.2 implementations.</t>

    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The primary goal of TLS is to provide a secure channel between two
communicating peers; the only requirement from the underlying
transport is a reliable, in-order data stream. Specifically, the
secure channel should provide the following properties:</t>

<t><list style="symbols">
  <t>Authentication: The server side of the channel is always
authenticated; the client side is optionally
authenticated. Authentication can happen via asymmetric cryptography
(e.g., RSA <xref target="RSA"/>, the Elliptic Curve Digital Signature
Algorithm (ECDSA) <xref target="ECDSA"/>, the Edwards-Curve Digital
Signature Algorithm (EdDSA) <xref target="RFC8032"/>)
or a pre-shared key (PSK).</t>
  <t>Confidentiality: Data sent over the channel after establishment
is only visible to the
endpoints. TLS does not hide the length of the data it transmits,
though endpoints are able to pad TLS records in order to obscure lengths
and improve protection against traffic analysis techniques.</t>
  <t>Integrity: Data sent over the channel after establishment cannot be
modified by attackers.</t>
</list></t>

<t>These properties should be true even in the face of an attacker who has complete
control of the network, as described in <xref target="RFC3552"/>.
See <xref target="security-analysis"/> for a more complete statement of the relevant security
properties.</t>

<t>TLS consists of two primary components:</t>

<t><list style="symbols">
  <t>A handshake protocol (<xref target="handshake-protocol"/>) that authenticates the communicating parties,
negotiates cryptographic modes and parameters, and establishes
shared keying material. The handshake protocol is designed to
resist tampering; an active attacker should not be able to force
the peers to negotiate different parameters than they would
if the connection were not under attack.</t>
  <t>A record protocol (<xref target="record-protocol"/>) that uses the parameters established by the
handshake protocol to protect traffic between the communicating
peers. The record protocol divides traffic up into a series of
records, each of which is independently protected using the
traffic keys.</t>
</list></t>

<t>TLS is application protocol independent; higher-level protocols can
layer on top of TLS transparently. The TLS standard, however, does not
specify how protocols add security with TLS; how to
initiate TLS handshaking and how to interpret the authentication
certificates exchanged are left to the judgment of the designers and
implementors of protocols that run on top of TLS.</t>

<t>This document defines TLS version 1.3. While TLS 1.3 is not directly
compatible with previous versions, all versions of TLS incorporate a
versioning mechanism which allows clients and servers to interoperably
negotiate a common version if one is supported by both peers.</t>

<t>This document supersedes and obsoletes previous versions of TLS,
including version 1.2 <xref target="RFC5246"/>.  It also obsoletes the TLS
ticket mechanism defined in <xref target="RFC5077"/> and replaces it with the
mechanism defined in <xref target="resumption-and-psk"/>. <xref
target="negotiated-groups"/> updates <xref target="RFC4492"/> by modifying the
protocol attributes used to negotiate elliptic curves.  Because TLS 1.3
changes the way keys are derived, it updates <xref target="RFC5705"/> as
described in <xref target="exporters"/>. It also changes how Online
Certificate Status Protocol (OCSP) messages are carried and therefore updates
<xref target="RFC6066"/> and obsoletes <xref target="RFC6961"/> as described
in <xref target="ocsp-and-sct"/>.</t>

<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
"SHALL&nbsp;NOT", "SHOULD", "SHOULD&nbsp;NOT", "RECOMMENDED",
"NOT&nbsp;RECOMMENDED", "MAY", and "OPTIONAL" in this document
are to be interpreted as described in BCP&nbsp;14
<xref format="default" pageno="false" target="RFC2119"/>
<xref format="default" pageno="false" target="RFC8174"/> when,
and only when, they appear in all capitals, as shown here.</t>

<t>The following terms are used:</t>

<t><list style="hanging">
<t hangText="client:">The endpoint initiating the TLS connection.</t>

<t hangText="connection:">A transport-layer connection between two endpoints.</t>

<t hangText="endpoint:">Either the client or server of the connection.</t>

<t hangText="handshake:">An initial negotiation between client and server that establishes the parameters of their subsequent interactions within&nbsp;TLS.</t>

<t hangText="peer:">An endpoint. When discussing a particular endpoint, "peer" refers to the endpoint that is not the primary subject of discussion.</t>

<t hangText="receiver:">An endpoint that is receiving records.</t>

<t hangText="sender:">An endpoint that is transmitting records.</t>

<t hangText="server:">The endpoint that did not initiate the TLS connection.</t>
</list></t>
</section>

<section anchor="major-differences-from-tls-12" title="Major Differences from TLS 1.2">

<t>The following is a list of the major functional differences between
TLS 1.2 and TLS 1.3. It is not intended to be exhaustive, and there
are many minor differences.</t>

<t><list style="symbols">
  <t>The list of supported symmetric algorithms has been pruned of all algorithms that
are considered legacy. Those that remain all use Authenticated Encryption
with Associated Data (AEAD) algorithms. The cipher suite concept has been
changed to separate the authentication and key exchange mechanisms from
the record protection algorithm (including secret key length) and a hash
to be used with both the key derivation function and handshake
message authentication code.</t>
  <t>A zero round-trip time (0-RTT) mode was added, saving a round trip at connection setup for
some application data, at the cost of certain security properties.</t>
  <t>Static RSA and Diffie-Hellman cipher suites have been removed;
all public-key based key exchange mechanisms now provide forward secrecy.</t>
  <t>All handshake messages after the ServerHello are now encrypted. The
newly introduced EncryptedExtensions message allows various extensions
previously sent in the clear in the ServerHello to also enjoy
confidentiality protection.</t>
  <t>The key derivation functions have been redesigned. The new design allows
easier analysis by cryptographers due to their improved key separation
properties. The HMAC-based Extract-and-Expand Key Derivation Function (HKDF)
is used as an underlying primitive.</t>
  <t>The handshake state machine has been significantly restructured to
be more consistent and to remove superfluous messages such as
ChangeCipherSpec (except when needed for middlebox compatibility).</t>
  <t>Elliptic curve algorithms are now in the base spec, and new signature
algorithms, such as EdDSA, are included. TLS 1.3 removed point format
negotiation in favor of a single point format for each curve.</t>
  <t>Other cryptographic improvements were made, including changing the RSA
padding to use the RSA Probabilistic Signature Scheme (RSASSA-PSS),
and the removal of compression, the Digital Signature Algorithm (DSA),
and custom Ephemeral Diffie-Hellman (DHE) groups.</t>
  <t>The TLS 1.2 version negotiation mechanism has been deprecated in favor
of a version list in an extension. This increases compatibility with
existing servers that incorrectly implemented version negotiation.</t>
  <t>Session resumption with and without server-side state as well as the
PSK-based cipher suites of earlier TLS versions have been replaced by a
single new PSK exchange.</t>
  <t>References have been updated to point to the updated versions of RFCs, as
appropriate (e.g., RFC 5280 rather than RFC 3280).</t>
</list></t>

</section>
<section anchor="updates-affecting-tls-12" title="Updates Affecting TLS 1.2">

<t>This document defines several changes that optionally affect
implementations of TLS 1.2, including those which do not also
support TLS 1.3:</t>

<t><list style="symbols">
  <t>A version downgrade protection mechanism is described in <xref target="server-hello"/>.</t>
  <t>RSASSA-PSS signature schemes are defined in <xref target="signature-algorithms"/>.</t>
  <t>The "supported_versions" ClientHello extension can be used to negotiate
the version of TLS to use, in preference to the legacy_version field of
the ClientHello.</t>
  <t>The "signature_algorithms_cert" extension allows a client to indicate
which signature algorithms it can validate in X.509 certificates.</t>
</list></t>

<t>Additionally, this document clarifies some compliance requirements for earlier
versions of TLS; see <xref target="protocol-invariants"/>.</t>

</section>
</section>
<section anchor="protocol-overview" title="Protocol Overview">

<t>The cryptographic parameters used by the secure channel are produced by the
TLS handshake protocol. This sub-protocol of TLS is used by the client
and server when first communicating with each other.
The handshake protocol allows peers to negotiate a protocol version,
select cryptographic algorithms, optionally authenticate each other,
and establish shared secret keying material.
Once the handshake is complete, the peers use the established keys
to protect the application-layer traffic.</t>

<t>A failure of the handshake or other protocol error triggers the
termination of the connection, optionally preceded by an alert message
(<xref target="alert-protocol"/>).</t>

<t>TLS supports three basic key exchange modes:</t>

<t><list style="symbols">
  <t>(EC)DHE (Diffie-Hellman over either finite fields or elliptic curves)</t>
  <t>PSK-only</t>
  <t>PSK with (EC)DHE</t>
</list></t>

<t><xref target="tls-full"/> below shows the basic full TLS handshake:</t>

<figure title="Message Flow for Full TLS Handshake" anchor="tls-full"><artwork><![CDATA[
       Client                                           Server

Key  ^ ClientHello
Exch | + key_share*
     | + signature_algorithms*
     | + psk_key_exchange_modes*
     v + pre_shared_key*       -------->
                                                  ServerHello  ^ Key
                                                 + key_share*  | Exch
                                            + pre_shared_key*  v
                                        {EncryptedExtensions}  ^  Server
                                        {CertificateRequest*}  v  Params
                                               {Certificate*}  ^
                                         {CertificateVerify*}  | Auth
                                                   {Finished}  v
                               <--------  [Application Data*]
     ^ {Certificate*}
Auth | {CertificateVerify*}
     v {Finished}                -------->
       [Application Data]        <------->      [Application Data]

              +  Indicates noteworthy extensions sent in the
                 previously noted message.

              *  Indicates optional or situation-dependent
                 messages/extensions that are not always sent.

              {} Indicates messages protected using keys
                 derived from a [sender]_handshake_traffic_secret.

              [] Indicates messages protected using keys
                 derived from [sender]_application_traffic_secret_N.
]]></artwork></figure>

<t>The handshake can be thought of as having three phases (indicated
in the diagram above):</t>

<t><list style="symbols">
  <t>Key Exchange: Establish shared keying material and select the
 cryptographic parameters. Everything after this phase is
 encrypted.</t>
  <t>Server Parameters: Establish other handshake parameters
 (whether&nbsp;the client is authenticated, application-layer protocol
 support, etc.).</t>

  <t>Authentication: Authenticate the server (and, optionally, the client)
 and provide key confirmation and handshake integrity.</t>
</list></t>

<t>In the Key Exchange phase, the client sends the ClientHello
(<xref target="client-hello"/>) message, which contains a random nonce
(ClientHello.random); its offered protocol versions; a list of
symmetric cipher/HKDF hash pairs; either a set of Diffie-Hellman key shares
(in the "key_share" (<xref target="key-share"/>) extension),
a set of pre&nbhy;shared key labels (in the "pre_shared_key"
(<xref target="pre-shared-key-extension"/>) extension), or both; and
potentially additional extensions.  Additional fields and/or messages
may also be present for middlebox compatibility.</t>

<t>The server processes the ClientHello and determines the appropriate
cryptographic parameters for the connection. It then responds with its
own ServerHello (<xref target="server-hello"/>), which indicates the negotiated connection
parameters. The combination of the ClientHello
and the ServerHello determines the shared keys. If (EC)DHE
key establishment is in use, then the ServerHello
contains a "key_share" extension with the server's ephemeral
Diffie-Hellman share; the server's share MUST be in the same group as one of the
client's shares. If PSK key establishment is
in use, then the ServerHello contains a "pre_shared_key"
extension indicating which of the client's offered PSKs was selected.
Note that implementations can use (EC)DHE and PSK together, in which
case both extensions will be supplied.</t>

<t>The server then sends two messages to establish the Server Parameters:</t>

<t><list style="hanging">
  <t hangText='EncryptedExtensions:'>
  responses to ClientHello extensions that are not required to
determine the cryptographic parameters, other than those
that are specific to individual certificates.
[<xref target="encrypted-extensions"/>]</t>
  <t hangText='CertificateRequest:'>
  if certificate-based client authentication is desired, the
desired parameters for that certificate. This message is
omitted if client authentication is not desired.
[<xref target="certificate-request"/>]</t>
</list></t>

<t>Finally, the client and server exchange Authentication messages. TLS
uses the same set of messages every time that certificate-based
authentication is needed.  (PSK-based authentication happens as a side
effect of key exchange.)
Specifically:</t>

<t><list style="hanging">
  <t hangText='Certificate:'>
  The certificate of the endpoint and any per-certificate extensions.
This message is omitted by the server if not authenticating with a
certificate and by the client if the server did not send
CertificateRequest (thus indicating that the client should not
authenticate with a certificate). Note that if raw
public keys <xref target="RFC7250"/> or the cached information extension
<xref target="RFC7924"/> are in use, then this message will not
contain a certificate but rather some other value corresponding to
the server's long-term key. [<xref target="certificate"/>]</t>
  <t hangText='CertificateVerify:'>
  A signature over the entire handshake using the private key
corresponding to the public key in the Certificate message. This
message is omitted if the endpoint is not authenticating via a
certificate. [<xref target="certificate-verify"/>]</t>
  <t hangText='Finished:'>
  A MAC (Message Authentication Code) over the entire handshake.
This message provides key confirmation, binds the endpoint's identity
to the exchanged keys, and in PSK mode
also authenticates the handshake. [<xref target="finished"/>]</t>
</list></t>

<t>Upon receiving the server's messages, the client responds with its
Authentication messages, namely Certificate and CertificateVerify (if
requested), and Finished.</t>

<t>At this point, the handshake is complete, and the client and server
derive the keying material required by the record layer to exchange
application-layer data protected through authenticated encryption.
Application Data MUST NOT be sent prior to sending the Finished message,
except as specified in <xref target="zero-rtt-data"/>.
Note that while the server may send Application Data prior to receiving
the client's Authentication messages, any data sent at that point is,
of course, being sent to an unauthenticated peer.</t>

<section anchor="incorrect-dhe-share" title="Incorrect DHE Share">

<t>If the client has not provided a sufficient "key_share" extension (e.g., it
includes only DHE or ECDHE groups unacceptable to or unsupported by the
server), the server corrects the mismatch with a HelloRetryRequest and
the client needs to restart the handshake with an appropriate
"key_share" extension, as shown in <xref target="tls-restart"/>.
If no common cryptographic parameters can be negotiated,
the server MUST abort the handshake with an appropriate alert.</t>

<figure title="Message Flow for a Full Handshake with Mismatched&nbsp;Parameters" anchor="tls-restart"><artwork><![CDATA[
         Client                                               Server

         ClientHello
         + key_share             -------->
                                                   HelloRetryRequest
                                 <--------               + key_share
         ClientHello
         + key_share             -------->
                                                         ServerHello
                                                         + key_share
                                               {EncryptedExtensions}
                                               {CertificateRequest*}
                                                      {Certificate*}
                                                {CertificateVerify*}
                                                          {Finished}
                                 <--------       [Application Data*]
         {Certificate*}
         {CertificateVerify*}
         {Finished}              -------->
         [Application Data]      <------->        [Application Data]
]]></artwork></figure>

<t>Note: The handshake transcript incorporates the initial
ClientHello&wj;/HelloRetryRequest exchange; it is not reset with the
new&nbsp;ClientHello.</t>

<t>TLS also allows several optimized variants of the basic handshake, as
described in the following sections.</t>

</section>
<section anchor="resumption-and-psk" title="Resumption and Pre-Shared Key (PSK)">

<t>Although TLS PSKs can be established out of band,
PSKs can also be established in a previous connection and
then used to establish a new connection ("session resumption" or "resuming"
with a PSK). Once a handshake has completed, the server can
send the client a PSK identity that corresponds to a unique key derived from
the initial handshake (see <xref target="NSTMessage"/>). The client
can then use that PSK identity in future handshakes to negotiate the use
of the associated PSK. If the server accepts the PSK, then the security context of the
new connection is cryptographically tied to the original connection and the key derived
from the initial handshake is used to bootstrap the cryptographic state
instead of a full handshake.
In TLS 1.2 and below, this functionality was provided by "session IDs" and
"session tickets" <xref target="RFC5077"/>. Both mechanisms are obsoleted in TLS 1.3.</t>

<t>PSKs can be used with (EC)DHE key exchange in order to provide forward
secrecy in combination with shared keys, or can be used alone, at the
cost of losing forward secrecy for the application data.</t>

<t><xref target="tls-resumption-psk"/> shows a pair of handshakes in which the
first handshake establishes a PSK and the second handshake uses it:</t>

<figure title="Message Flow for Resumption and PSK" anchor="tls-resumption-psk"><artwork><![CDATA[
       Client                                               Server

Initial Handshake:
       ClientHello
       + key_share               -------->
                                                       ServerHello
                                                       + key_share
                                             {EncryptedExtensions}
                                             {CertificateRequest*}
                                                    {Certificate*}
                                              {CertificateVerify*}
                                                        {Finished}
                                 <--------     [Application Data*]
       {Certificate*}
       {CertificateVerify*}
       {Finished}                -------->
                                 <--------      [NewSessionTicket]
       [Application Data]        <------->      [Application Data]


Subsequent Handshake:
       ClientHello
       + key_share*
       + pre_shared_key          -------->
                                                       ServerHello
                                                  + pre_shared_key
                                                      + key_share*
                                             {EncryptedExtensions}
                                                        {Finished}
                                 <--------     [Application Data*]
       {Finished}                -------->
       [Application Data]        <------->      [Application Data]
]]></artwork></figure>

<t>As the server is authenticating via a PSK, it does not send a
Certificate or a CertificateVerify message. When a client offers resumption
via a PSK, it SHOULD also supply a "key_share" extension to the server to
allow the server to decline resumption and fall back
to a full handshake, if needed. The server responds with a "pre_shared_key"
extension to negotiate the use of PSK key establishment and can (as shown here)
respond with a "key_share" extension to do (EC)DHE key establishment, thus
providing forward secrecy.</t>

<t>When PSKs are provisioned out of band, the PSK identity and the KDF hash
algorithm to be used with the PSK MUST also be provisioned.</t>

<t><list style="hanging">
  <t hangText='Note:'>
When using an out-of-band provisioned pre-shared secret, a critical
consideration is using sufficient entropy during the key generation, as
discussed in <xref target="RFC4086"></xref>. Deriving a shared secret from a
password or other low-entropy sources is not secure. A low-entropy secret, or
password, is subject to dictionary attacks based on the PSK binder.  The
specified PSK authentication is not a strong password-based authenticated key
exchange even when used with Diffie-Hellman key establishment.  Specifically,
it does not prevent an attacker that can observe the handshake from performing
a brute-force attack on the password/pre-shared key.</t>
</list></t>

</section>
<section anchor="zero-rtt-data" title="0-RTT Data">

<t>When clients and servers share a PSK (either obtained externally or
via a previous handshake), TLS 1.3 allows clients to send data on the
first flight ("early data"). The client uses the PSK to authenticate
the server and to encrypt the early data.</t>

<t>As shown in <xref target="tls-0-rtt"/>, the 0-RTT data is just added to the
1-RTT handshake in the first flight. The rest of the handshake uses the same
messages as for a 1-RTT handshake with PSK resumption.</t>

<figure title="Message Flow for a 0-RTT Handshake" anchor="tls-0-rtt"><artwork><![CDATA[
         Client                                               Server

         ClientHello
         + early_data
         + key_share*
         + psk_key_exchange_modes
         + pre_shared_key
         (Application Data*)     -------->
                                                         ServerHello
                                                    + pre_shared_key
                                                        + key_share*
                                               {EncryptedExtensions}
                                                       + early_data*
                                                          {Finished}
                                 <--------       [Application Data*]
         (EndOfEarlyData)
         {Finished}              -------->
         [Application Data]      <------->        [Application Data]

               +  Indicates noteworthy extensions sent in the
                  previously noted message.

               *  Indicates optional or situation-dependent
                  messages/extensions that are not always sent.

               () Indicates messages protected using keys
                  derived from a client_early_traffic_secret.

               {} Indicates messages protected using keys
                  derived from a [sender]_handshake_traffic_secret.

               [] Indicates messages protected using keys
                  derived from [sender]_application_traffic_secret_N.
]]></artwork></figure>

<t>IMPORTANT NOTE: The security properties for 0-RTT data are weaker than
those for other kinds of TLS data.  Specifically:</t>

<t><list style="numbers">
  <t>This data is not forward secret, as it is encrypted solely under
keys derived using the offered PSK.</t>
  <t>There are no guarantees of non-replay between connections.
Protection against replay for ordinary TLS 1.3 1-RTT data is
provided via the server's Random value, but 0-RTT data does not depend
on the ServerHello and therefore has weaker guarantees.  This is especially
relevant if the data is authenticated either with TLS client
authentication or inside the application protocol. The same warnings
apply to any use of the early_exporter_master_secret.</t>
</list></t>

<t>0-RTT data cannot be duplicated within a connection (i.e., the server will
not process the same data twice for the same connection), and an
attacker will not be able to make 0-RTT data appear to be 1-RTT data
(because it is protected with different keys). <xref target="replay-0rtt"/>
contains a description of potential attacks, and <xref target="anti-replay"/>
describes mechanisms which the server can use to limit the impact of
replay.</t>

</section>
</section>
<section anchor="presentation-language" title="Presentation Language">

<t>This document deals with the formatting of data in an external
representation. The following very basic and somewhat casually defined
presentation syntax will be used.</t>

<section anchor="basic-block-size" title="Basic Block Size">

<t>The representation of all data items is explicitly specified. The basic data
block size is one byte (i.e., 8 bits). Multiple-byte data items are
concatenations of bytes, from left to right, from top to bottom. From the byte
stream, a multi-byte item (a numeric in the following example) is formed
(using C notation) by:</t>

<figure><artwork><![CDATA[
   value = (byte[0] << 8*(n-1)) | (byte[1] << 8*(n-2)) |
           ... | byte[n-1];
]]></artwork></figure>

<t>This byte ordering for multi-byte values is the commonplace network byte order
or big-endian format.</t>

</section>
<section anchor="miscellaneous" title="Miscellaneous">

<t>Comments begin with "/*" and end with "*/".</t>

<t>Optional components are denoted by enclosing them in "[[ ]]"
(double brackets).</t>

<t>Single-byte entities containing uninterpreted data are of
type&nbsp;opaque.</t>

<t>A type alias T' for an existing type T is defined by:</t>

<figure><artwork><![CDATA[
   T T';
]]></artwork></figure>

</section>
<section anchor="numbers" title="Numbers">

<t>The basic numeric data type is an unsigned byte (uint8). All larger numeric
data types are constructed from a fixed-length series of bytes concatenated as
described in <xref target="basic-block-size"/> and are also unsigned. The
following numeric types are predefined.</t>

<figure><artwork><![CDATA[
   uint8 uint16[2];
   uint8 uint24[3];
   uint8 uint32[4];
   uint8 uint64[8];
]]></artwork></figure>

<t>All values, here and elsewhere in the specification, are transmitted in
network byte (big-endian) order; the uint32 represented by the hex bytes 01 02
03 04 is equivalent to the decimal value 16909060.</t>

</section>
<section anchor="vectors" title="Vectors">

<t>A vector (single-dimensioned array) is a stream of homogeneous data
elements. The size of the vector may be specified at documentation time or left
unspecified until runtime. In either case, the length declares the number of
bytes, not the number of elements, in the vector. The syntax for specifying a
new type, T', that is a fixed-length vector of type T is</t>

<figure><artwork><![CDATA[
   T T'[n];
]]></artwork></figure>

<t>Here, T' occupies n bytes in the data stream, where n is a multiple of the
size of T.  The length of the vector is not included in the encoded stream.</t>

<t>In the following example, Datum is defined to be three consecutive bytes
that the protocol does not interpret, while Data is three consecutive Datum,
consuming a total of nine bytes.</t>

<figure><artwork><![CDATA[
   opaque Datum[3];      /* three uninterpreted bytes */
   Datum Data[9];        /* three consecutive 3-byte vectors */
]]></artwork></figure>

<t>Variable-length vectors are defined by specifying a subrange of legal
lengths, inclusively, using the notation &lt;floor..ceiling&gt;. When these
are encoded, the actual length precedes the vector's contents in the byte
stream. The length will be in the form of a number consuming as many bytes as
required to hold the vector's specified maximum (ceiling) length. A
variable-length vector with an actual length field of zero is referred to as
an empty vector.</t>

<figure><artwork><![CDATA[
   T T'<floor..ceiling>;
]]></artwork></figure>

<t>In the following example, "mandatory" is a vector that must contain between
300 and 400 bytes of type opaque. It can never be empty. The actual length
field consumes two bytes, a uint16, which is sufficient to represent the value
400 (see <xref target="numbers"/>). Similarly, "longer" can represent up to
800 bytes of data, or 400 uint16 elements, and it may be empty. Its encoding
will include a two-byte actual length field prepended to the vector. The
length of an encoded vector must be an exact multiple of the length of a
single element (e.g., a 17-byte vector of uint16 would be illegal).</t>

<figure><artwork><![CDATA[
   opaque mandatory<300..400>;
         /* length field is two bytes, cannot be empty */
   uint16 longer<0..800>;
         /* zero to 400 16-bit unsigned integers */
]]></artwork></figure>

</section>
<section anchor="enumerateds" title="Enumerateds">

<t>An additional sparse data type, called "enum" or "enumerated",
is available. Each definition is a different type. Only enumerateds of
the same type may be assigned or compared.  Every element of an
enumerated must be assigned a value, as demonstrated in the following
example. Since the elements of the enumerated are not ordered, they
can be assigned any unique value, in any order.</t>

<figure><artwork><![CDATA[
   enum { e1(v1), e2(v2), ... , en(vn) [[, (n)]] } Te;
]]></artwork></figure>

<t>Future extensions or additions to the protocol may define new values.
Implementations need to be able to parse and ignore unknown values unless the
definition of the field states otherwise.</t>

<t>An enumerated occupies as much space in the byte stream as would its maximal
defined ordinal value. The following definition would cause one byte to be used
to carry fields of type Color.</t>

<figure><artwork><![CDATA[
   enum { red(3), blue(5), white(7) } Color;
]]></artwork></figure>

<t>One may optionally specify a value without its associated tag to force the
width definition without defining a superfluous element.</t>

<t>In the following example, Taste will consume two bytes in the data stream but
can only assume the values 1, 2, or 4 in the current version of the protocol.</t>

<figure><artwork><![CDATA[
   enum { sweet(1), sour(2), bitter(4), (32000) } Taste;
]]></artwork></figure>

<t>The names of the elements of an enumeration are scoped within the defined type.
In the first example, a fully qualified reference to the second element of the
enumeration would be Color.blue. Such qualification is not required if the
target of the assignment is well specified.</t>

<figure><artwork><![CDATA[
   Color color = Color.blue;     /* overspecified, legal */
   Color color = blue;           /* correct, type implicit */
]]></artwork></figure>

<t>The names assigned to enumerateds do not need to be unique.  The numerical value
can describe a range over which the same name applies.  The value includes the
minimum and maximum inclusive values in that range, separated by two period
characters. This is principally useful for reserving regions of the space.</t>

<figure><artwork><![CDATA[
   enum { sad(0), meh(1..254), happy(255) } Mood;
]]></artwork></figure>

</section>
<section anchor="constructed-types" title="Constructed Types">

<t>Structure types may be constructed from primitive types for
convenience. Each specification declares a new, unique type. The syntax used for
definitions is much like that of C.
</t>

<figure><artwork><![CDATA[
   struct {
       T1 f1;
       T2 f2;
       ...
       Tn fn;
   } T;
]]></artwork></figure>

<t>Fixed- and variable-length vector fields are allowed using the standard
vector syntax. Structures V1 and V2 in the variants example
(<xref target="variants"/>) demonstrate this.</t>

<t>The fields within a structure may be qualified using the type's name, with a
syntax much like that available for enumerateds. For example, T.f2 refers to
the second field of the previous declaration.</t>

</section>
<section anchor="constants" title="Constants">

<t>Fields and variables may be assigned a fixed value using "=", as in:</t>

<figure><artwork><![CDATA[
   struct {
       T1 f1 = 8;  /* T.f1 must always be 8 */
       T2 f2;
   } T;
]]></artwork></figure>

</section>
<section anchor="variants" title="Variants">

<t>Defined structures may have variants based on some knowledge that is
available within the environment. The selector must be an enumerated
type that defines the possible variants the structure defines. Each
arm of the select (below) specifies the type of that variant's field
and an optional field label. The mechanism by which the variant is selected
at runtime is not prescribed by the presentation language.</t>

<figure><artwork><![CDATA[
   struct {
       T1 f1;
       T2 f2;
       ....
       Tn fn;
       select (E) {
           case e1: Te1 [[fe1]];
           case e2: Te2 [[fe2]];
           ....
           case en: Ten [[fen]];
       };
   } Tv;
]]></artwork></figure>

<t>For example:</t>

<figure><artwork><![CDATA[
   enum { apple(0), orange(1) } VariantTag;

   struct {
       uint16 number;
       opaque string<0..10>; /* variable length */
   } V1;

   struct {
       uint32 number;
       opaque string[10];    /* fixed length */
   } V2;

   struct {
       VariantTag type;
       select (VariantRecord.type) {
           case apple:  V1;
           case orange: V2;
       };
   } VariantRecord;
]]></artwork></figure>

</section>
</section>
<section anchor="handshake-protocol" title="Handshake Protocol">

<t>The handshake protocol is used to negotiate the security parameters
of a connection. Handshake messages are supplied to the TLS record layer, where
they are encapsulated within one or more TLSPlaintext or TLSCiphertext structures  which are
processed and transmitted as specified by the current active connection state.</t>

<figure><artwork><![CDATA[
   enum {
       client_hello(1),
       server_hello(2),
       new_session_ticket(4),
       end_of_early_data(5),
       encrypted_extensions(8),
       certificate(11),
       certificate_request(13),
       certificate_verify(15),
       finished(20),
       key_update(24),
       message_hash(254),
       (255)
   } HandshakeType;

   struct {
       HandshakeType msg_type;    /* handshake type */
       uint24 length;             /* remaining bytes in message */
       select (Handshake.msg_type) {
           case client_hello:          ClientHello;
           case server_hello:          ServerHello;
           case end_of_early_data:     EndOfEarlyData;
           case encrypted_extensions:  EncryptedExtensions;
           case certificate_request:   CertificateRequest;
           case certificate:           Certificate;
           case certificate_verify:    CertificateVerify;
           case finished:              Finished;
           case new_session_ticket:    NewSessionTicket;
           case key_update:            KeyUpdate;
       };
   } Handshake;
]]></artwork></figure>

<t>Protocol messages MUST be sent in the order defined in
<xref target="the-transcript-hash"/> and shown in the diagrams in <xref target="protocol-overview"/>.
A peer which receives a handshake message in an unexpected order
MUST abort the handshake with an "unexpected_message" alert.</t>

<t>New handshake message types are assigned by IANA as described in
<xref target="iana-considerations"/>.</t>

<section anchor="key-exchange-messages" title="Key Exchange Messages">

<t>The key exchange messages are used to determine the security capabilities
of the client and the server and to establish shared secrets, including
the traffic keys used to protect the rest of the handshake and the data.</t>

<section anchor="cryptographic-negotiation" title="Cryptographic Negotiation">

<t>In TLS, the cryptographic negotiation proceeds by the client offering the
following four sets of options in its ClientHello:</t>

<t><list style="symbols">
  <t>A list of cipher suites which indicates the AEAD algorithm/HKDF hash
pairs which the client supports.</t>
  <t>A "supported_groups" (<xref target="negotiated-groups"/>) extension which indicates the (EC)DHE groups
which the client supports and a "key_share" (<xref target="key-share"/>) extension which contains
(EC)DHE shares for some or all of these groups.</t>
  <t>A "signature_algorithms" (<xref target="signature-algorithms"/>) extension which indicates the signature
  algorithms which the client can accept. A "signature_algorithms_cert" extension
  (<xref target="signature-algorithms"/>) may also be added to indicate
  certificate-specific signature algorithms.</t>
  <t>A "pre_shared_key" (<xref target="pre-shared-key-extension"/>) extension which
contains a list of symmetric key identities known to the client and a
"psk_key_exchange_modes" (<xref target="pre-shared-key-exchange-modes"/>)
extension which indicates the key exchange modes that may be used
with PSKs.</t>
</list></t>

<t>If the server does not select a PSK, then the first three of these
options are entirely orthogonal: the server independently selects a
cipher suite, an (EC)DHE group and key share for key establishment,
and a signature algorithm/certificate pair to authenticate itself to
the client. If there is no overlap between the received "supported_groups"
and the groups supported by the server, then the server MUST abort the
handshake with a "handshake_failure" or an "insufficient_security" alert.</t>

<t>If the server selects a PSK, then it MUST also select a key
establishment mode from the set indicated by the client's
"psk_key_exchange_modes" extension (at present, PSK alone or with
(EC)DHE). Note that if the PSK can be used without (EC)DHE, then
non&nbhy;overlap in the "supported_groups" parameters need not be fatal, as it
is in the non-PSK case discussed in the previous paragraph.</t>

<t>If the server selects an (EC)DHE group and the client did not offer a
compatible "key_share" extension in the initial ClientHello, the server MUST
respond with a HelloRetryRequest (<xref target="hello-retry-request"/>)
message.</t>

<t>If the server successfully selects parameters and does not require a
HelloRetryRequest, it indicates the selected parameters in the ServerHello as
follows:</t>

<t><list style="symbols">
  <t>If PSK is being used, then the server will send a
  "pre_shared_key" extension indicating the selected key.</t>
  <t>When (EC)DHE is in use, the server will also provide a
  "key_share" extension. If PSK is not being used, then (EC)DHE and
  certificate-based authentication are always used.</t>
  <t>When authenticating via a certificate, the server will send
the Certificate (<xref target="certificate"/>) and CertificateVerify
(<xref target="certificate-verify"/>) messages. In TLS 1.3
as defined by this document, either a PSK or a certificate
is always used, but not both. Future documents may define how
to use them together.</t>
</list></t>

<t>If the server is unable to negotiate a supported set of parameters
(i.e., there is no overlap between the client and server parameters),
it MUST abort the handshake with either a "handshake_failure" or
"insufficient_security" fatal alert (see <xref
target="alert-protocol"/>).</t>

</section>

<section anchor="client-hello" title="Client Hello">

<t>When a client first connects to a server, it is REQUIRED to send the
ClientHello as its first TLS message. The client will also send a
ClientHello when the server has responded to its ClientHello with a
HelloRetryRequest. In that case, the client MUST send the same
ClientHello without modification, except as follows:</t>

<t><list style="symbols">
  <t>If a "key_share" extension was supplied in the HelloRetryRequest,
replacing the list of shares with a list containing a single
KeyShareEntry from the indicated group.</t>
  <t>Removing the "early_data" extension (<xref
target="early-data-indication"/>) if one was present. Early data is not
permitted after a HelloRetryRequest.</t>
  <t>Including a "cookie" extension if one was provided in the
HelloRetryRequest.</t>
  <t>Updating the "pre_shared_key" extension if present by
recomputing the "obfuscated_ticket_age" and binder values
and (optionally) removing
any PSKs which are incompatible with the server's indicated
cipher suite.</t>
  <t>Optionally adding, removing, or changing the length of the "padding"
extension <xref target="RFC7685"/>.</t>
  <t>Other modifications that may be allowed by an extension defined in the
future and present in the HelloRetryRequest.</t>
</list></t>

<t>Because TLS 1.3 forbids renegotiation, if a server has negotiated
TLS&nbsp;1.3 and receives a ClientHello at any other time, it MUST terminate
the connection with an "unexpected_message" alert.</t>

<t>If a server established a TLS connection with a previous version of TLS
and receives a TLS 1.3 ClientHello in a renegotiation, it MUST retain the
previous protocol version. In particular, it MUST NOT negotiate TLS 1.3.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   uint16 ProtocolVersion;
   opaque Random[32];

   uint8 CipherSuite[2];    /* Cryptographic suite selector */

   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id<0..32>;
       CipherSuite cipher_suites<2..2^16-2>;
       opaque legacy_compression_methods<1..2^8-1>;
       Extension extensions<8..2^16-1>;
   } ClientHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='legacy_version:'>
  In previous versions of TLS, this field was used for version negotiation
and represented the highest version number supported by the client.
Experience has shown that many servers do not properly implement
version negotiation, leading to "version intolerance" in which
the server rejects an otherwise acceptable ClientHello with a version
number higher than it supports. In TLS&nbsp;1.3, the client indicates its
version preferences in the "supported_versions" extension (<xref
target="supported-versions"/>) and the legacy_version field MUST be set to
0x0303, which is the version number for TLS 1.2.
TLS 1.3 ClientHellos are identified
as having a legacy_version of 0x0303 and a supported_versions extension
present with 0x0304 as the highest version indicated therein.
(See <xref
target="backward-compatibility"/> for details about backward
compatibility.)</t>
  <t hangText='random:'>
  32 bytes generated by a secure random number generator.
See <xref target="implementation-notes"/> for additional information.</t>
  <t hangText='legacy_session_id:'>
  Versions of TLS before TLS 1.3 supported a "session resumption"
feature which has been merged with pre-shared keys in this version
(see <xref target="resumption-and-psk"/>). A client which has a cached session ID
set by a pre-TLS 1.3 server SHOULD set this field to that value. In
compatibility mode (see <xref target="middlebox"/>), this field MUST be non-empty,
so a client not offering a pre&nbhy;TLS&nbsp;1.3 session MUST generate a
new 32-byte value. This value need not be random but SHOULD be
unpredictable to avoid implementations fixating on a specific value
(also known as ossification).
Otherwise, it MUST be set as a zero-length vector (i.e., a
zero-valued single byte length field).</t>
  <t hangText='cipher_suites:'>
  A list of the symmetric cipher options supported by the
client, specifically the record protection algorithm (including
secret key length) and a hash to be used with HKDF, in descending
order of client preference.
Values are defined in <xref target="cipher-suites"/>.
If the list contains cipher suites that
the server does not recognize, support, or wish to use, the server
MUST ignore those cipher suites and process the remaining ones as
usual. If the client is
attempting a PSK key establishment, it SHOULD advertise at least one
cipher suite indicating a Hash associated with the PSK.</t>
  <t hangText='legacy_compression_methods:'>
  Versions of TLS before 1.3 supported compression with the list of
supported compression methods being sent in this field. For every TLS 1.3
ClientHello, this vector MUST contain exactly one byte, set to
zero, which corresponds to the "null" compression method in
prior versions of TLS. If a TLS&nbsp;1.3 ClientHello is
received with any other value in this field, the server MUST
abort the handshake with an "illegal_parameter" alert. Note that TLS 1.3
servers might receive TLS 1.2 or prior ClientHellos which contain
other compression methods and (if negotiating such a prior version)
MUST follow the procedures for
the appropriate prior version of TLS.</t>
  <t hangText='extensions:'>
  Clients request extended functionality from servers by sending
data in the extensions field.  The actual "Extension" format is
defined in <xref target="extensions"/>.  In TLS 1.3, the use
of certain extensions is mandatory, as functionality has moved into
extensions to preserve ClientHello compatibility with previous versions of TLS.
Servers MUST ignore unrecognized extensions.</t>
</list></t>

<t>All versions of TLS allow an extensions field to optionally follow the
compression_methods field. TLS 1.3 ClientHello
messages always contain extensions (minimally "supported_versions", otherwise,
they will be interpreted as TLS 1.2 ClientHello messages).
However, TLS&nbsp;1.3 servers might receive ClientHello messages without an
extensions field from prior versions of TLS.
The presence of extensions can be detected by determining whether there
are bytes following the compression_methods field at the end of the
ClientHello. Note that this method of detecting optional data differs
from the normal TLS method of having a variable-length field, but it
is used for compatibility with TLS before extensions were defined.
TLS 1.3 servers will need to perform this check first and only
attempt to negotiate TLS 1.3 if the "supported_versions" extension
is present.
If negotiating a version of TLS prior to 1.3, a server MUST check that
the message either contains no data after legacy_compression_methods
or that it contains a valid extensions block with no data following.
If not, then it MUST abort the handshake with a "decode_error" alert.</t>

<t>In the event that a client requests additional functionality using
extensions and this functionality is not supplied by the server, the
client MAY abort the handshake.</t>

<t>After sending the ClientHello message, the client waits for a ServerHello
or HelloRetryRequest message. If early data
is in use, the client may transmit early Application Data
(<xref target="zero-rtt-data"/>) while waiting for the next handshake message.</t>

</section>
<section anchor="server-hello" title="Server Hello">

<t>The server will send this message in response to a ClientHello message
to proceed with the handshake if it is able to negotiate an acceptable
set of handshake parameters based on the ClientHello.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id_echo<0..32>;
       CipherSuite cipher_suite;
       uint8 legacy_compression_method = 0;
       Extension extensions<6..2^16-1>;
   } ServerHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='legacy_version:'>
  In previous versions of TLS, this field was used for version negotiation
and represented the selected version number for the connection. Unfortunately,
some middleboxes fail when presented with new values.
In TLS 1.3, the TLS server indicates its version using the
"supported_versions" extension (<xref target="supported-versions"/>),
and the legacy_version field MUST
be set to 0x0303, which is the version number for TLS 1.2.
(See <xref target="backward-compatibility"/> for details about backward
compatibility.)</t>
  <t hangText='random:'>
  32 bytes generated by a secure random number generator.
See <xref target="implementation-notes"/> for additional information.
The last 8 bytes MUST be overwritten as described
below if negotiating TLS 1.2 or TLS&nbsp;1.1, but the
remaining bytes MUST be random.
This structure is generated by the server and MUST be
generated independently of the ClientHello.random.</t>
  <t hangText='legacy_session_id_echo:'>
  The contents of the client's legacy_session_id field. Note that
this field is echoed even if the client's value corresponded to
a cached pre-TLS 1.3 session which the server has chosen not
to resume. A client which receives a legacy_session_id_echo field
that does not match what it sent in the ClientHello
MUST abort the handshake with an "illegal_parameter"
alert.</t>
  <t hangText='cipher_suite:'>
  The single cipher suite selected by the server from the list in
ClientHello.cipher_suites. A client which receives a cipher suite
that was not offered MUST abort the handshake with an "illegal_parameter"
alert.</t>
  <t hangText='legacy_compression_method:'>
  A single byte which MUST have the value 0.</t>
  <t hangText='extensions:'>
  A list of extensions.  The ServerHello MUST only include
extensions which are required to establish the cryptographic context and
negotiate the protocol version. All TLS&nbsp;1.3 ServerHello messages MUST
contain the "supported_versions" extension.  Current ServerHello messages
additionally contain either the "pre_shared_key" extension or the "key_share"
extension, or both, when using a PSK with (EC)DHE key establishment. Other
extensions  (see  <xref target="extensions"/>)
are sent separately in the EncryptedExtensions message.</t>
</list></t>

<t>For reasons of backward compatibility with middleboxes
(see <xref target="middlebox"/>), the HelloRetryRequest
message uses the same structure as the ServerHello, but with
Random set to the special value of the SHA-256 of
"HelloRetryRequest":</t>

<figure><artwork><![CDATA[
  CF 21 AD 74 E5 9A 61 11 BE 1D 8C 02 1E 65 B8 91
  C2 A2 11 16 7A BB 8C 5E 07 9E 09 E2 C8 A8 33 9C
]]></artwork></figure>

<t>Upon receiving a message with type server_hello, implementations
MUST first examine the Random value and, if it matches this value,
process it as described in <xref target="hello-retry-request"/>).</t>

<t>TLS 1.3 has a downgrade protection mechanism embedded in the server's
random value. TLS 1.3 servers which negotiate TLS 1.2 or below in
response to a ClientHello MUST set the last 8 bytes of their
Random value specially in their ServerHello.</t>

<t>If negotiating TLS 1.2, TLS 1.3 servers MUST set the last 8 bytes of
their Random value to the bytes:</t>

<figure><artwork><![CDATA[
  44 4F 57 4E 47 52 44 01
]]></artwork></figure>

<t>If negotiating TLS 1.1 or below, TLS 1.3 servers MUST, and TLS 1.2
servers SHOULD, set the last 8 bytes of their ServerHello.Random value to the
bytes:</t>

<figure><artwork><![CDATA[
  44 4F 57 4E 47 52 44 00
]]></artwork></figure>

<t>TLS 1.3 clients receiving a ServerHello indicating TLS 1.2 or below
MUST check that the last 8 bytes are not equal to either of these values.
TLS 1.2 clients SHOULD also check that the last 8 bytes are not
equal to the second value if the ServerHello indicates TLS&nbsp;1.1 or
below.  If a match is found, the client MUST abort the handshake
with an "illegal_parameter" alert.  This mechanism provides limited
protection against downgrade attacks over and above what is provided
by the Finished exchange: because the ServerKeyExchange, a message
present in TLS 1.2 and below, includes a signature over both random
values, it is not possible for an active attacker to modify the
random values without detection as long as ephemeral ciphers are used.
It does not provide downgrade protection when static RSA is used.</t>

<t>Note: This is a change from <xref target="RFC5246"/>, so in practice many TLS 1.2 clients
and servers will not behave as specified above.</t>

<t>A legacy TLS client performing renegotiation with TLS 1.2 or prior
and which receives a TLS 1.3 ServerHello during renegotiation
MUST abort the handshake with a "protocol_version" alert.
Note that renegotiation is not possible when TLS 1.3 has been
negotiated.</t>

</section>
<section anchor="hello-retry-request" title="Hello Retry Request">

<t>The server will send this message in response to a ClientHello message
if it is able to find an acceptable set of parameters but the
ClientHello does not contain sufficient information to proceed with
the handshake. As discussed in <xref target="server-hello"/>, the
HelloRetryRequest has the same format as a ServerHello message, and the
legacy_version, legacy_session_id_echo, cipher_suite, and
legacy_compression_method fields have the same meaning.
However, for convenience we discuss "HelloRetryRequest" throughout this
document as if it were a distinct message.</t>

<t>The server's extensions MUST contain "supported_versions",
otherwise, the server SHOULD send only the extensions necessary for the
client to generate a correct ClientHello pair. As with the ServerHello, a
HelloRetryRequest MUST NOT contain any extensions that were not first
offered by the client in its ClientHello, with the exception of
optionally the "cookie" (see <xref target="cookie"/>) extension.</t>

<t>Upon receipt of a HelloRetryRequest, the client MUST check
the legacy_version, legacy_session_id_echo, cipher_suite,
and legacy_compression_method as specified in <xref target="server-hello"/>
and then process the extensions, starting with determining the version using
"supported_versions". Clients MUST abort the handshake with
an "illegal_parameter" alert if the HelloRetryRequest would not result in
any change in the ClientHello. If a client receives a second
HelloRetryRequest in the same connection (i.e., where
the ClientHello was itself in response to a HelloRetryRequest), it
MUST abort the handshake with an "unexpected_message" alert.</t>

<t>Otherwise, the client MUST process all extensions in the
HelloRetryRequest and send a second updated ClientHello. The
HelloRetryRequest extensions defined in this specification are:</t>

<t><list style="symbols">
  <t>supported_versions (see <xref target="supported-versions"/>)</t>
  <t>cookie (see <xref target="cookie"/>)</t>
  <t>key_share (see <xref target="key-share"/>)</t>
</list></t>

<t>A client which receives a cipher suite that was not
offered MUST abort the handshake.  Servers MUST ensure that they
negotiate the same cipher suite when receiving a conformant updated
ClientHello (if the server selects the cipher suite as the first step
in the negotiation, then this will happen automatically). Upon
receiving the ServerHello, clients MUST check that the cipher suite
supplied in the ServerHello is the same as that in the
HelloRetryRequest and otherwise abort the handshake with an
"illegal_parameter" alert.</t>

<t>In addition, in its updated ClientHello, the client SHOULD NOT offer
any pre-shared keys associated with a hash other than that of the
selected cipher suite. This allows the client to avoid having to
compute partial hash transcripts for multiple hashes in the second
ClientHello.</t>

<t>The value of selected_version in the HelloRetryRequest "supported_versions"
extension MUST be retained in the ServerHello, and a client MUST abort the
handshake with an "illegal_parameter" alert if the value changes.</t>

</section>
</section>
<section anchor="extensions" title="Extensions">

<t>A number of TLS messages contain tag-length-value encoded extensions structures.</t>

<figure><artwork><![CDATA[
   struct {
       ExtensionType extension_type;
       opaque extension_data<0..2^16-1>;
   } Extension;

   enum {
       server_name(0),                             /* RFC 6066 */
       max_fragment_length(1),                     /* RFC 6066 */
       status_request(5),                          /* RFC 6066 */
       supported_groups(10),                       /* RFC 4492, 7919 */
       signature_algorithms(13),                   /* RFC 8446 */
       use_srtp(14),                               /* RFC 5764 */
       heartbeat(15),                              /* RFC 6520 */
       application_layer_protocol_negotiation(16), /* RFC 7301 */
       signed_certificate_timestamp(18),           /* RFC 6962 */
       client_certificate_type(19),                /* RFC 7250 */
       server_certificate_type(20),                /* RFC 7250 */
       padding(21),                                /* RFC 7685 */
       pre_shared_key(41),                         /* RFC 8446 */
       early_data(42),                             /* RFC 8446 */
       supported_versions(43),                     /* RFC 8446 */
       cookie(44),                                 /* RFC 8446 */
       psk_key_exchange_modes(45),                 /* RFC 8446 */
       certificate_authorities(47),                /* RFC 8446 */
       oid_filters(48),                            /* RFC 8446 */
       post_handshake_auth(49),                    /* RFC 8446 */
       signature_algorithms_cert(50),              /* RFC 8446 */
       key_share(51),                              /* RFC 8446 */
       (65535)
   } ExtensionType;
]]></artwork></figure>

<t>Here:</t>

<t><list style="symbols">
  <t>"extension_type" identifies the particular extension type.</t>
  <t>"extension_data" contains information specific to the particular
extension type.</t>
</list></t>

<t>The list of extension types is maintained by IANA as described in
<xref target="iana-considerations"/>.</t>

<t>Extensions are generally structured in a request/response fashion, though
some extensions are just indications with no corresponding response. The client
sends its extension requests in the ClientHello message, and the server sends
its extension responses in the ServerHello, EncryptedExtensions,
HelloRetryRequest, and Certificate messages. The server sends extension
requests in the CertificateRequest message which a client MAY respond to with
a Certificate message. The server MAY also send unsolicited
extensions in the NewSessionTicket, though the client does not respond
directly to these.</t>

<t>Implementations MUST NOT send extension responses
if the remote endpoint did not send the corresponding extension requests,
with the exception of the "cookie" extension in the HelloRetryRequest.
Upon receiving such an extension, an endpoint MUST abort the handshake with an
"unsupported_extension" alert.</t>

<t>The table below indicates the messages where a given extension may
appear, using the following notation: CH (ClientHello),
SH&nbsp;(ServerHello), EE (EncryptedExtensions), CT (Certificate),
CR&nbsp;(CertificateRequest), NST (NewSessionTicket), and
HRR&nbsp;(HelloRetryRequest). If an implementation receives an extension which
it recognizes and which is not specified for the message in which it
appears, it MUST abort the handshake with an "illegal_parameter" alert.</t>

<texttable>
      <ttcol align='left'>Extension</ttcol>
      <ttcol align='right'>TLS 1.3</ttcol>
      <c>server_name <xref target="RFC6066"></xref></c>
      <c>CH, EE</c>
      <c>max_fragment_length <xref target="RFC6066"></xref></c>
      <c>CH, EE</c>
      <c>status_request <xref target="RFC6066"></xref></c>
      <c>CH, CR, CT</c>
      <c>supported_groups <xref target="RFC7919"></xref></c>
      <c>CH, EE</c>
      <c>signature_algorithms (RFC 8446)</c>
      <c>CH, CR</c>
      <c>use_srtp <xref target="RFC5764"></xref></c>
      <c>CH, EE</c>
      <c>heartbeat <xref target="RFC6520"></xref></c>
      <c>CH, EE</c>
      <c>application_layer_protocol_negotiation <xref target="RFC7301"></xref></c>
      <c>CH, EE</c>
      <c>signed_certificate_timestamp <xref target="RFC6962"></xref></c>
      <c>CH, CR, CT</c>
      <c>client_certificate_type <xref target="RFC7250"></xref></c>
      <c>CH, EE</c>
      <c>server_certificate_type <xref target="RFC7250"></xref></c>
      <c>CH, EE</c>
      <c>padding <xref target="RFC7685"></xref></c>
      <c>CH</c>
      <c>key_share (RFC 8446)</c>
      <c>CH, SH, HRR</c>
      <c>pre_shared_key (RFC 8446)</c>
      <c>CH, SH</c>
      <c>psk_key_exchange_modes (RFC 8446)</c>
      <c>CH</c>
      <c>early_data (RFC 8446)</c>
      <c>CH, EE, NST</c>
      <c>cookie (RFC 8446)</c>
      <c>CH, HRR</c>
      <c>supported_versions (RFC 8446)</c>
      <c>CH, SH, HRR</c>
      <c>certificate_authorities (RFC 8446)</c>
      <c>CH, CR</c>
      <c>oid_filters (RFC 8446)</c>
      <c>CR</c>
      <c>post_handshake_auth (RFC 8446)</c>
      <c>CH</c>
      <c>signature_algorithms_cert (RFC 8446)</c>
      <c>CH, CR</c>
</texttable>

<t>When multiple extensions of different types are present, the
extensions MAY appear in any order, with the exception of
"pre_shared_key" (<xref target="pre-shared-key-extension"/>) which MUST be
the last extension in the ClientHello.
There MUST NOT be more than one extension of the same type in a given
extension block.</t>

<t>In TLS 1.3, unlike TLS 1.2, extensions are negotiated for each
handshake even when in resumption-PSK mode. However, 0-RTT parameters are
those negotiated in the previous handshake; mismatches may require
rejecting 0-RTT (see <xref target="early-data-indication"/>).</t>

<t>There are subtle (and not so subtle) interactions that may occur in this
protocol between new features and existing features which may result in a
significant reduction in overall security. The following considerations should
be taken into account when designing new extensions:</t>

<t><list style="symbols">
  <t>Some cases where a server does not agree to an extension are error
conditions (e.g., the handshake cannot continue), and some are
simply refusals to support particular features. In general, error
alerts should be used for the former and a field in the server
extension response for the latter.</t>
  <t>Extensions should, as far as possible, be designed to prevent any attack that
forces use (or non-use) of a particular feature by manipulation of handshake
messages. This principle should be followed regardless of whether the feature
is believed to cause a security problem.
Often the fact that the extension fields are included in the inputs to the
Finished message hashes will be sufficient, but extreme care is needed when
the extension changes the meaning of messages sent in the handshake phase.
Designers and implementors should be aware of the fact that until the
handshake has been authenticated, active attackers can modify messages and
insert, remove, or replace extensions.</t>
</list></t>

<section anchor="supported-versions" title="Supported Versions">

<figure><artwork><![CDATA[
   struct {
       select (Handshake.msg_type) {
           case client_hello:
                ProtocolVersion versions<2..254>;

           case server_hello: /* and HelloRetryRequest */
                ProtocolVersion selected_version;
       };
   } SupportedVersions;
]]></artwork></figure>

<t>The "supported_versions" extension is used by the client to indicate
which versions of TLS it supports and by the server to indicate
which version it is using. The extension contains a list of
supported versions in preference order, with the most preferred
version first. Implementations of this specification MUST send this
extension in the ClientHello containing all versions of TLS which they are
prepared to negotiate (for this specification, that means minimally
0x0304, but if previous versions of TLS are allowed to be negotiated,
they MUST be present as well).</t>

<t>If this extension is not present, servers which are compliant with
this specification and which also support TLS 1.2 MUST negotiate TLS&nbsp;1.2
or prior as specified in <xref target="RFC5246"/>, even if
ClientHello.legacy_version is 0x0304 or later. Servers MAY abort the handshake
upon receiving a ClientHello with legacy_version 0x0304 or later.</t>

<t>If this extension is present in the ClientHello, servers MUST NOT use the
ClientHello.legacy_version value for version negotiation and MUST use only the
"supported_versions" extension to determine client
preferences. Servers MUST only select a version of TLS present in that
extension and MUST ignore any unknown versions that are present in that
extension. Note that this
mechanism makes it possible to negotiate a version prior to TLS 1.2 if
one side supports a sparse range. Implementations of TLS 1.3 which choose
to support prior versions of TLS SHOULD support TLS 1.2.
Servers MUST be prepared to receive ClientHellos that include this
extension but do not include 0x0304 in the list of versions.</t>

<t>A server which negotiates a version of TLS prior to TLS 1.3 MUST
set ServerHello.version and MUST NOT send the "supported_versions"
extension.
A server which negotiates TLS 1.3 MUST respond by sending a
"supported_versions" extension containing the selected version value
(0x0304). It MUST set the ServerHello.legacy_version field to 0x0303 (TLS
1.2). Clients MUST check for this extension prior to processing
the rest of the ServerHello (although they will have to parse the
ServerHello in order to read the extension).
If this extension is present, clients MUST ignore the
ServerHello.legacy_version value and MUST use only the
"supported_versions" extension to determine the selected version. If the
"supported_versions" extension in the ServerHello contains a version not offered by the
client or contains a version prior to TLS&nbsp;1.3, the client MUST abort the handshake with an
"illegal_parameter" alert.</t>

</section>
<section anchor="cookie" title="Cookie">

<figure><artwork><![CDATA[
   struct {
       opaque cookie<1..2^16-1>;
   } Cookie;
]]></artwork></figure>

<t>Cookies serve two primary purposes:</t>

<t><list style="symbols">
  <t>Allowing the server to force the client to demonstrate reachability
at their apparent network address (thus providing a measure of DoS
protection). This is primarily useful for non&nbhy;connection-oriented
transports (see <xref target="RFC6347"/> for an example of this).</t>
  <t>Allowing the server to offload state to the client, thus allowing it to send
a HelloRetryRequest without storing any state. The server can do this by
storing the hash of the ClientHello in the HelloRetryRequest cookie
(protected with some suitable integrity algorithm).</t>
</list></t>

<t>When sending a HelloRetryRequest, the server MAY provide a "cookie" extension to the
client (this is an exception to the usual rule that the only extensions that
may be sent are those that appear in the ClientHello). When sending the
new ClientHello, the client MUST copy the contents of the extension received in
the HelloRetryRequest into a "cookie" extension in the new ClientHello.
Clients MUST NOT use cookies in their initial ClientHello in subsequent connections.</t>

<t>When a server is operating statelessly, it may receive an unprotected
record of type change_cipher_spec between the first and second ClientHello (see
<xref target="record-protocol"/>). Since the server is not storing any state,
this will appear as if it were the first message to be received. Servers
operating statelessly MUST ignore these records.</t>

</section>
<section anchor="signature-algorithms" title="Signature Algorithms">

<t>TLS 1.3 provides two extensions for indicating which signature
algorithms may be used in digital signatures. The
"signature_algorithms_cert" extension applies to signatures in
certificates, and the "signature_algorithms" extension, which originally
appeared in TLS 1.2, applies to signatures in CertificateVerify
messages. The keys found in certificates MUST also be of
appropriate type for the signature algorithms they are used
with. This is a particular issue for RSA keys and PSS signatures,
as described below. If no "signature_algorithms_cert" extension is present,
then the "signature_algorithms" extension also applies to signatures
appearing in certificates. Clients which desire the server to authenticate
itself via a certificate MUST send the "signature_algorithms" extension. If a
server is authenticating via a certificate and the client has not sent a
"signature_algorithms" extension, then the server MUST abort the
handshake with a "missing_extension" alert (see <xref
target="mti-extensions"/>).</t>

<t>The "signature_algorithms_cert" extension was added to allow implementations
which supported different sets of algorithms for certificates and in TLS itself
to clearly signal their capabilities. TLS 1.2 implementations SHOULD also
process this extension. Implementations which have the same policy in both
cases MAY omit the "signature_algorithms_cert" extension.</t>

<t>The "extension_data" field of these extensions contains a
SignatureSchemeList value:</t>

<figure><artwork><![CDATA[
   enum {
       /* RSASSA-PKCS1-v1_5 algorithms */
       rsa_pkcs1_sha256(0x0401),
       rsa_pkcs1_sha384(0x0501),
       rsa_pkcs1_sha512(0x0601),

       /* ECDSA algorithms */
       ecdsa_secp256r1_sha256(0x0403),
       ecdsa_secp384r1_sha384(0x0503),
       ecdsa_secp521r1_sha512(0x0603),

       /* RSASSA-PSS algorithms with public key OID rsaEncryption */
       rsa_pss_rsae_sha256(0x0804),
       rsa_pss_rsae_sha384(0x0805),
       rsa_pss_rsae_sha512(0x0806),

       /* EdDSA algorithms */
       ed25519(0x0807),
       ed448(0x0808),

       /* RSASSA-PSS algorithms with public key OID RSASSA-PSS */
       rsa_pss_pss_sha256(0x0809),
       rsa_pss_pss_sha384(0x080a),
       rsa_pss_pss_sha512(0x080b),

       /* Legacy algorithms */
       rsa_pkcs1_sha1(0x0201),
       ecdsa_sha1(0x0203),

       /* Reserved Code Points */
       private_use(0xFE00..0xFFFF),
       (0xFFFF)
   } SignatureScheme;

   struct {
       SignatureScheme supported_signature_algorithms<2..2^16-2>;
   } SignatureSchemeList;
]]></artwork></figure>

<t>Note: This enum is named "SignatureScheme" because there is already
a "SignatureAlgorithm" type in TLS 1.2, which this replaces.
We use the term "signature algorithm" throughout the text.</t>

<t>Each SignatureScheme value lists a single signature algorithm that the
client is willing to verify. The values are indicated in descending order
of preference. Note that a signature algorithm takes as input an
arbitrary-length message, rather than a digest. Algorithms which
traditionally act on a digest should be defined in TLS to first
hash the input with a specified hash algorithm and then proceed as usual.
The code point groups listed above have the following meanings:</t>

<t><list style="hanging">
  <t hangText='RSASSA-PKCS1-v1_5 algorithms:'>
  Indicates a signature algorithm using RSASSA-PKCS1-v1_5 <xref
target="RFC8017"/> with the corresponding hash algorithm as defined in <xref
target="SHS"/>. These values refer solely to signatures which appear in
certificates (see <xref target="server-certificate-selection"/>) and are not
defined for use in signed TLS handshake messages, although they MAY appear in
"signature_algorithms" and "signature_algorithms_cert" for backward
compatibility with TLS&nbsp;1.2.</t>
  <t hangText='ECDSA algorithms:'>
  Indicates a signature algorithm using ECDSA <xref target="ECDSA"/>, the corresponding
curve as defined in ANSI X9.62 <xref target="ECDSA"/> and FIPS 186-4 <xref target="DSS"/>, and the
corresponding hash algorithm as defined in <xref target="SHS"/>. The signature is
represented as a DER-encoded <xref target="X690"/> ECDSA-Sig-Value structure.</t>
  <t hangText='RSASSA-PSS RSAE algorithms:'>
  Indicates a signature algorithm using RSASSA-PSS <xref target="RFC8017"/>
with mask generation function 1. The digest used in the mask generation
function and the digest being signed are both the corresponding hash algorithm
as defined in <xref target="SHS"/>. The length of the Salt MUST be equal to
the length of the output of the digest algorithm. If the public key is carried
in an X.509 certificate, it MUST use the rsaEncryption OID <xref
target="RFC5280"/>.</t>
  <t hangText='EdDSA algorithms:'>
  Indicates a signature algorithm using EdDSA as defined in
<xref target="RFC8032"/> or its successors. Note that these correspond to the
"PureEdDSA" algorithms and not the "prehash" variants.</t>
  <t hangText='RSASSA-PSS PSS algorithms:'>
  Indicates a signature algorithm using RSASSA-PSS <xref target="RFC8017"/> with mask
generation function 1. The
digest used in the mask generation function and the digest being signed are
both the corresponding hash algorithm as defined in <xref target="SHS"/>.
The length of the Salt MUST be equal to the length of the digest
algorithm. If the public key is carried in an X.509 certificate,
it MUST use the RSASSA-PSS OID  <xref target="RFC5756"/>. When used in certificate signatures,
the algorithm parameters MUST be DER encoded. If the corresponding
public key's parameters are present, then the parameters in the signature
MUST be identical to those in the public key.</t>
  <t hangText='Legacy algorithms:'>
  Indicates algorithms which are being deprecated because they use
algorithms with known weaknesses, specifically SHA-1 which is used
in this context with either (1)&nbsp;RSA using RSASSA&nbhy;PKCS1-v1_5 or
(2)&nbsp;ECDSA.
These values refer solely to signatures which appear in certificates (see
<xref target="server-certificate-selection"/>) and are not defined for use in
signed TLS handshake messages, although they MAY appear in "signature_algorithms"
and "signature_algorithms_cert" for backward compatibility with TLS&nbsp;1.2.
Endpoints SHOULD NOT negotiate these algorithms
but are permitted to do so solely for backward compatibility. Clients
offering these values MUST list
them as the lowest priority (listed after all other algorithms in
SignatureSchemeList). TLS&nbsp;1.3 servers MUST NOT offer a SHA-1 signed
certificate unless no valid certificate chain can be produced
without it (see <xref target="server-certificate-selection"/>).</t>
</list></t>

<t>The signatures on certificates that are self-signed or certificates that are
trust anchors are not validated, since they begin a certification path (see
<xref target="RFC5280"/>, Section 3.2).  A certificate that begins a
certification path MAY use a signature algorithm that is not advertised as
being supported in the "signature_algorithms" extension.</t>

<t>Note that TLS 1.2 defines this extension differently. TLS 1.3
implementations willing to negotiate TLS 1.2 MUST behave in accordance with
the requirements of <xref target="RFC5246"/> when negotiating that version. In
particular:</t>

<t><list style="symbols">
  <t>TLS 1.2 ClientHellos MAY omit this extension.</t>
  <t>In TLS 1.2, the extension contained hash/signature pairs. The pairs are
encoded in two octets, so SignatureScheme values have been allocated to
align with TLS 1.2's encoding. Some legacy pairs are left unallocated. These
algorithms are deprecated as of TLS 1.3. They MUST NOT be offered or
negotiated by any implementation. In particular, MD5 <xref target="SLOTH"/>,
SHA-224, and DSA MUST&nbsp;NOT be used.</t>
  <t>ECDSA signature schemes align with TLS 1.2's ECDSA hash/signature pairs.
However, the old semantics did not constrain the signing curve.  If TLS 1.2 is
negotiated, implementations MUST be prepared to accept a signature that uses
any curve that they advertised in the "supported_groups" extension.</t>
  <t>Implementations that advertise support for RSASSA-PSS (which is mandatory
in TLS 1.3) MUST be prepared to accept a signature using that scheme even when
TLS 1.2 is negotiated. In TLS 1.2, RSASSA&nbhy;PSS is used with RSA cipher
suites.</t>
</list></t>

</section>
<section anchor="certificate-authorities" title="Certificate Authorities">

<t>The "certificate_authorities" extension is used to indicate the
certificate authorities (CAs) which an endpoint supports and which SHOULD
be used by the receiving endpoint to guide certificate selection.</t>

<t>The body of the "certificate_authorities" extension consists of a
CertificateAuthoritiesExtension structure.</t>

<figure><artwork><![CDATA[
   opaque DistinguishedName<1..2^16-1>;

   struct {
       DistinguishedName authorities<3..2^16-1>;
   } CertificateAuthoritiesExtension;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='authorities:'>
  A list of the distinguished names <xref target="X501"/> of acceptable
certificate authorities, represented in DER-encoded <xref target="X690"/>
format.  These distinguished names specify a desired distinguished name for
a trust anchor or subordinate CA; thus, this message can be used to
describe known trust anchors as well as a desired authorization space.</t>
</list></t>

<t>The client MAY send the "certificate_authorities" extension in the ClientHello
message. The server MAY send it in the CertificateRequest message.</t>

<t>The "trusted_ca_keys" extension <xref target="RFC6066"/>, which serves a
similar purpose but is more complicated, is not used in TLS 1.3
(although it may appear in ClientHello messages from clients which are
offering prior versions of TLS).</t>

</section>
<section anchor="oid-filters" title="OID Filters">

<t>The "oid_filters" extension allows servers to provide a set of OID&wj;/value
pairs which it would like the client's certificate to match. This
extension, if provided by the server, MUST only be sent in the
CertificateRequest message.</t>

<figure><artwork><![CDATA[
   struct {
       opaque certificate_extension_oid<1..2^8-1>;
       opaque certificate_extension_values<0..2^16-1>;
   } OIDFilter;

   struct {
       OIDFilter filters<0..2^16-1>;
   } OIDFilterExtension;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='filters:'>
  A list of certificate extension OIDs <xref target="RFC5280"/> with their
allowed value(s) and represented in DER-encoded <xref target="X690"/>
format. Some certificate extension OIDs allow multiple values (e.g.,
Extended Key Usage).  If the server has included a non-empty filters list,
the client certificate included in the response MUST contain all of the
specified extension OIDs that the client recognizes. For each extension OID
recognized by the client, all of the specified values MUST be present in the
client certificate (but the certificate MAY have other values as
well). However, the client MUST ignore and skip any unrecognized certificate
extension OIDs. If the client ignored some of the required certificate
extension OIDs and supplied a certificate that does not satisfy the request,
the server MAY at its discretion either continue the connection without client
authentication or abort the handshake with an "unsupported_certificate"
alert. Any given OID MUST NOT appear more than once in the filters list.</t>
</list></t>

<t>PKIX RFCs define a variety of certificate extension OIDs and their corresponding
value types. Depending on the type, matching certificate extension values are
not necessarily bitwise-equal. It is expected that TLS implementations will rely
on their PKI libraries to perform certificate selection using certificate
extension OIDs.</t>

<t>This document defines matching rules for two standard certificate extensions
defined in <xref target="RFC5280"/>:</t>

<t><list style="symbols">
  <t>The Key Usage extension in a certificate matches the request when all key
usage bits asserted in the request are also asserted in the Key Usage
certificate extension.</t>
  <t>The Extended Key Usage extension in a certificate matches the request when all
key purpose OIDs present in the request are also found in the Extended Key
Usage certificate extension. The special anyExtendedKeyUsage OID MUST NOT be
used in the request.</t>
</list></t>

<t>Separate specifications may define matching rules for other certificate
extensions.</t>

</section>
<section anchor="post_handshake_auth" title="Post-Handshake Client Authentication">

<t>The "post_handshake_auth" extension is used to indicate that a client is willing
to perform post-handshake authentication (<xref target="post-handshake-authentication"/>). Servers
MUST NOT send a post-handshake CertificateRequest to clients which do not
offer this extension. Servers MUST NOT send this extension.</t>

<figure><artwork><![CDATA[
   struct {} PostHandshakeAuth;
]]></artwork></figure>

<t>The "extension_data" field of the "post_handshake_auth" extension is zero
length.</t>

</section>
<section anchor="negotiated-groups" title="Supported Groups">

<t>When sent by the client, the "supported_groups" extension indicates
the named groups which the client supports for key exchange, ordered
from most preferred to least preferred.</t>

<t>Note: In versions of TLS prior to TLS 1.3, this extension was named
"elliptic_curves" and only contained elliptic curve groups. See <xref target="RFC4492"/> and
<xref target="RFC7919"/>. This extension was also used to negotiate
ECDSA curves. Signature algorithms are now negotiated independently (see
<xref target="signature-algorithms"/>).</t>

<t>The "extension_data" field of this extension contains a
"NamedGroupList" value:</t>

<figure><artwork><![CDATA[
   enum {

       /* Elliptic Curve Groups (ECDHE) */
       secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019),
       x25519(0x001D), x448(0x001E),

       /* Finite Field Groups (DHE) */
       ffdhe2048(0x0100), ffdhe3072(0x0101), ffdhe4096(0x0102),
       ffdhe6144(0x0103), ffdhe8192(0x0104),

       /* Reserved Code Points */
       ffdhe_private_use(0x01FC..0x01FF),
       ecdhe_private_use(0xFE00..0xFEFF),
       (0xFFFF)
   } NamedGroup;

   struct {
       NamedGroup named_group_list<2..2^16-1>;
   } NamedGroupList;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='Elliptic Curve Groups (ECDHE):'>
  Indicates support for the corresponding named curve, defined in
either FIPS 186-4 <xref target="DSS"/> or <xref target="RFC7748"/>.
Values 0xFE00 through 0xFEFF are reserved for Private&nbsp;Use
<xref target="RFC8126"/>.</t>
  <t hangText='Finite Field Groups (DHE):'>
  Indicates support of the corresponding finite field
group, defined in <xref target="RFC7919"/>.
Values 0x01FC through 0x01FF are reserved for Private Use.</t>
</list></t>

<t>Items in named_group_list are ordered according to the client's
preferences (most preferred choice first).</t>

<t>As of TLS 1.3, servers are permitted to send the "supported_groups"
extension to the client. Clients MUST NOT act upon any information
found in "supported_groups" prior to successful completion of the
handshake but MAY use the information learned from a successfully
completed handshake to change what groups they use in their
"key_share" extension in subsequent connections.
If the server has a group it prefers to the
ones in the "key_share" extension but is still willing to accept the
ClientHello, it SHOULD send "supported_groups" to update the
client's view of its preferences; this extension SHOULD contain all groups
the server supports, regardless of whether they are currently
supported by the client.</t>

</section>
<section anchor="key-share" title="Key Share">

<t>The "key_share" extension contains the endpoint's cryptographic parameters.</t>

<t>Clients MAY send an empty client_shares vector in order to request
group selection from the server, at the cost of an additional round trip
(see <xref target="hello-retry-request"/>).</t>

<figure><artwork><![CDATA[
   struct {
       NamedGroup group;
       opaque key_exchange<1..2^16-1>;
   } KeyShareEntry;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='group:'>
  The named group for the key being exchanged.</t>
  <t hangText='key_exchange:'>
  Key exchange information.  The contents of this field are
determined by the specified group and its corresponding
definition.
Finite Field Diffie-Hellman <xref target="DH76"/> parameters are described in
<xref target="ffdhe-param"/>; Elliptic Curve Diffie-Hellman parameters are
described in <xref target="ecdhe-param"/>.</t>
</list></t>

<t>In the ClientHello message, the "extension_data" field of this extension
contains a "KeyShareClientHello" value:</t>

<figure><artwork><![CDATA[
   struct {
       KeyShareEntry client_shares<0..2^16-1>;
   } KeyShareClientHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='client_shares:'>
  A list of offered KeyShareEntry values in descending order of client preference.</t>
</list></t>

<t>This vector MAY be empty if the client is requesting a HelloRetryRequest.
Each KeyShareEntry value MUST correspond to a group offered in the
"supported_groups" extension and MUST appear in the same order.  However, the
values MAY be a non-contiguous subset of the "supported_groups" extension and
MAY omit the most preferred groups. Such a situation could arise if
the most preferred groups are new and unlikely to be supported in enough
places to make pregenerating key shares for them efficient.</t>

<t>Clients can offer as many KeyShareEntry values as the number of supported
groups it is offering, each
representing a single set of key exchange parameters. For instance, a
client might offer shares for several elliptic curves or multiple
FFDHE groups.  The key_exchange values for each KeyShareEntry MUST be
generated independently.  Clients MUST NOT offer multiple
KeyShareEntry values for the same group.  Clients MUST NOT offer any
KeyShareEntry values for groups not listed in the client's
"supported_groups" extension.  Servers MAY check for violations of
these rules and abort the handshake with an "illegal_parameter" alert
if one is violated.</t>

<t>In a HelloRetryRequest message, the "extension_data" field of this
extension contains a KeyShareHelloRetryRequest value:</t>

<figure><artwork><![CDATA[
   struct {
       NamedGroup selected_group;
   } KeyShareHelloRetryRequest;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='selected_group:'>
  The mutually supported group the server intends to negotiate and
is requesting a retried ClientHello/KeyShare for.</t>
</list></t>

<t>Upon receipt of this extension in a HelloRetryRequest, the client MUST
verify that (1) the selected_group field corresponds to a group which was
provided in the "supported_groups" extension in the original ClientHello
and (2) the selected_group field does not correspond to a group which was
provided in the "key_share" extension in the original ClientHello. If either of
these checks fails, then the client MUST abort the handshake with an
"illegal_parameter" alert.  Otherwise, when sending the new ClientHello, the
client MUST replace the original "key_share" extension with one
containing only a new KeyShareEntry for the group indicated in the
selected_group field of the triggering HelloRetryRequest.</t>

<t>In a ServerHello message, the "extension_data" field of this
extension contains a KeyShareServerHello value:</t>

<figure><artwork><![CDATA[
   struct {
       KeyShareEntry server_share;
   } KeyShareServerHello;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='server_share:'>
  A single KeyShareEntry value that is in the same group as one of the
client's shares.</t>
</list></t>

<t>If using (EC)DHE key establishment, servers offer exactly one
KeyShareEntry in the ServerHello. This value MUST be in the same group
as the KeyShareEntry value offered
by the client that the server has selected for the negotiated key exchange.
Servers MUST&nbsp;NOT send a KeyShareEntry for any group not
indicated in the "supported_groups" extension and
MUST NOT send a KeyShareEntry when using the "psk_ke" PskKeyExchangeMode.
If using (EC)DHE key establishment and a HelloRetryRequest containing a
"key_share" extension was received by the client, the client MUST verify that the
selected NamedGroup in the ServerHello is the same as that in the HelloRetryRequest.
If this check fails, the client MUST abort the handshake with an "illegal_parameter"
alert.</t>

<section anchor="ffdhe-param" title="Diffie-Hellman Parameters">

<t>Diffie-Hellman <xref target="DH76"/> parameters for both clients and servers
are encoded in the opaque key_exchange field of a KeyShareEntry in a KeyShare
structure. The opaque value contains the
Diffie-Hellman public value (Y = g^X mod p) for the specified group
(see <xref target="RFC7919"/> for group definitions)
encoded as a big-endian integer and padded to the left with zeros to the size of p in
bytes.</t>

<t>Note: For a given Diffie-Hellman group, the padding results in all public keys
having the same length.</t>

<t>Peers MUST validate each other's public key Y by ensuring that 1 &lt; Y
&lt; p-1. This check ensures that the remote peer is properly behaved and
isn't forcing the local system into a small subgroup.</t>

</section>
<section anchor="ecdhe-param" title="ECDHE Parameters">

<t>ECDHE parameters for both clients and servers are encoded in the
opaque key_exchange field of a KeyShareEntry in a KeyShare structure.</t>

<t>For secp256r1, secp384r1, and secp521r1, the contents are the serialized
value of the following struct:</t>

<figure><artwork><![CDATA[
   struct {
       uint8 legacy_form = 4;
       opaque X[coordinate_length];
       opaque Y[coordinate_length];
   } UncompressedPointRepresentation;
]]></artwork></figure>

<t>X and Y, respectively, are the binary representations of the x and y
values in network byte order.  There are no internal length markers,
so each number representation occupies as many octets as implied by
the curve parameters.  For P-256, this means that each of X and Y use
32 octets, padded on the left by zeros if necessary.  For P-384, they
take 48 octets each.  For P-521, they take 66 octets each.</t>

<t>For the curves secp256r1, secp384r1, and secp521r1,
peers MUST validate each other's public value Q by ensuring
that the point is a valid point on the elliptic curve.
The appropriate validation procedures are defined in Section&nbsp;4.3.7 of
<xref target="ECDSA"/> and alternatively in Section&nbsp;5.6.2.3 of <xref
target="KEYAGREEMENT"/>. This process consists of three
steps: (1) verify that Q is not the point at infinity (O), (2) verify
that for Q = (x, y) both integers x and y are in the correct interval, and
(3) ensure that (x, y) is a correct solution to the elliptic curve
equation.  For these curves, implementors do not need to verify
membership in the correct subgroup.</t>

<t>For X25519 and X448, the contents of the public value are the byte string
inputs and outputs of the corresponding functions defined in <xref
target="RFC7748"/>: 32 bytes for X25519 and 56 bytes for X448.</t>

<t>Note: Versions of TLS prior to 1.3 permitted point format negotiation;
TLS 1.3 removes this feature in favor of a single point format
for each curve.</t>

</section>
</section>
<section anchor="pre-shared-key-exchange-modes" title="Pre-Shared Key Exchange Modes">

<t>In order to use PSKs, clients MUST also send a "psk_key_exchange_modes"
extension. The semantics of this extension are that the client only
supports the use of PSKs with these modes, which restricts both the
use of PSKs offered in this ClientHello and those which the server
might supply via NewSessionTicket.</t>

<t>A client MUST provide a "psk_key_exchange_modes" extension if it offers
a "pre_shared_key" extension. If clients offer "pre_shared_key" without
a "psk_key_exchange_modes" extension, servers MUST abort the handshake.
Servers MUST NOT select a key exchange mode that is not listed by the
client. This extension also restricts the modes for use with PSK resumption.
Servers SHOULD NOT send NewSessionTicket with tickets that are not
compatible with the advertised modes; however, if a server does so, the impact
will just be that the client's attempts at resumption fail.</t>

<t>The server MUST NOT send a "psk_key_exchange_modes" extension.</t>

<figure><artwork><![CDATA[
   enum { psk_ke(0), psk_dhe_ke(1), (255) } PskKeyExchangeMode;

   struct {
       PskKeyExchangeMode ke_modes<1..255>;
   } PskKeyExchangeModes;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='psk_ke:'>
  PSK-only key establishment. In this mode, the server MUST&nbsp;NOT
supply a "key_share" value.</t>
  <t hangText='psk_dhe_ke:'>
  PSK with (EC)DHE key establishment. In this mode,
the client and server MUST supply "key_share" values as described
in <xref target="key-share"/>.</t>
</list></t>

<t>Any future values that are allocated must ensure that the transmitted
protocol messages unambiguously identify which mode was selected by
the server; at present, this is indicated by the presence of the "key_share"
in the ServerHello.</t>

</section>
<section anchor="early-data-indication" title="Early Data Indication">

<t>When a PSK is used and early data is allowed for that PSK, the client can
send Application Data in its first flight of messages. If the client opts to
do so, it MUST supply both the "pre_shared_key" and "early_data" extensions.</t>

<t>The "extension_data" field of this extension contains an
"EarlyDataIndication" value.</t>

<figure><artwork><![CDATA[
   struct {} Empty;

   struct {
       select (Handshake.msg_type) {
           case new_session_ticket:   uint32 max_early_data_size;
           case client_hello:         Empty;
           case encrypted_extensions: Empty;
       };
   } EarlyDataIndication;
]]></artwork></figure>

<t>See <xref target="NSTMessage"/> for details regarding the use of the
max_early_data_size field.</t>

<t>The parameters for the 0-RTT data (version, symmetric cipher suite,
Application-Layer Protocol Negotiation (ALPN) <xref target="RFC7301"/> protocol, etc.) are those associated with the PSK in use.
For externally provisioned PSKs, the associated values are those
provisioned along with the key.  For PSKs established via a NewSessionTicket
message, the associated values are those which were negotiated in the connection
which established the PSK. The PSK used to encrypt the early data
MUST be the first PSK listed in the client's "pre_shared_key" extension.</t>

<t>For PSKs provisioned via NewSessionTicket, a server MUST validate that
the ticket age for the selected PSK identity (computed by subtracting
ticket_age_add from PskIdentity.obfuscated_ticket_age modulo 2^32)
is within a small tolerance of the
time since the ticket was issued (see <xref target="anti-replay"/>).  If it is not,
the server SHOULD proceed with the handshake but reject 0-RTT, and
SHOULD NOT take any other action that assumes that this ClientHello is
fresh.</t>

<t>0-RTT messages sent in the first flight have the same (encrypted) content types
as messages of the same type sent in other flights (handshake and
application_data) but are protected under
different keys.  After receiving the server's Finished message, if the
server has accepted early data, an EndOfEarlyData message
will be sent to indicate the key change. This message will be encrypted
with the 0-RTT traffic keys.</t>

<t>A server which receives an "early_data" extension
MUST behave in one of three ways:</t>

<t><list style="symbols">
  <t>Ignore the extension and return a regular 1-RTT response.  The server then
skips past early data by attempting to deprotect received records using the handshake traffic
key, discarding records which fail deprotection (up to the configured max_early_data_size).
Once a record is deprotected
successfully, it is treated as the start of the client's second flight
and the server proceeds as with an ordinary 1-RTT handshake.</t>
  <t>Request that the client send another ClientHello by responding with a
HelloRetryRequest.  A client MUST NOT include the "early_data" extension in
its followup ClientHello.  The server then ignores early data by skipping
all records with an external content type of "application_data" (indicating
that they are encrypted), up to the configured max_early_data_size.</t>
  <t>Return its own "early_data" extension in EncryptedExtensions,
indicating that it intends to
process the early data. It is not possible for the server
to accept only a subset of the early data messages.
Even though the server sends a message accepting early data, the actual early
data itself may already be in flight by the time the server generates this message.</t>
</list></t>

<t>In order to accept early data, the server MUST have accepted a
PSK cipher suite and selected the first key offered in the
client's "pre_shared_key" extension. In addition, it MUST verify that
the following values are the same as those associated with the
selected&nbsp;PSK:</t>

<t><list style="symbols">
  <t>The TLS version number</t>
  <t>The selected cipher suite</t>
  <t>The selected ALPN <xref target="RFC7301"/> protocol, if any</t>
</list></t>

<t>These requirements are a superset of those needed to perform a 1-RTT
handshake using the PSK in question.  For externally established PSKs, the
associated values are those provisioned along with the key.  For PSKs
established via a NewSessionTicket message, the associated values are those
negotiated in the connection during which the ticket was established.</t>

<t>Future extensions MUST define their interaction with 0-RTT.</t>

<t>If any of these checks fail, the server MUST NOT respond
with the extension and must discard all the first-flight data using one of the
first two mechanisms listed above (thus falling back to 1-RTT or 2-RTT). If
the client attempts a 0-RTT handshake but the server rejects it, the server
will generally not have the 0-RTT record protection keys and must instead
use trial decryption (either with the 1-RTT handshake keys or
by looking for a cleartext ClientHello in the case of a HelloRetryRequest) to
find the first non-0-RTT message.</t>

<t>If the server chooses to accept the "early_data" extension,
then it MUST comply with the same error-handling requirements
specified for all records when processing early data records.
Specifically, if the server fails to decrypt a 0-RTT record following
an accepted "early_data" extension, it MUST terminate the connection
with a "bad_record_mac" alert as per <xref
target="record-payload-protection"/>.</t>

<t>If the server rejects the "early_data" extension, the client
application MAY opt to retransmit the Application Data previously
sent in early data once the handshake has
been completed.  Note that automatic retransmission of early data
could result in incorrect assumptions regarding the status of the connection. For instance, when the negotiated connection selects a
different ALPN protocol from what was used for the early data, an
application might need to construct different messages.  Similarly, if
early data assumes anything about the connection state, it might be
sent in error after the handshake completes.</t>

<t>A TLS implementation SHOULD NOT automatically resend early data;
applications are in a better position to decide when retransmission
is appropriate. A TLS implementation MUST NOT automatically resend
early data unless the negotiated connection selects the same ALPN
protocol.</t>

</section>
<section anchor="pre-shared-key-extension" title="Pre-Shared Key Extension">

<t>The "pre_shared_key" extension is used to negotiate the identity of the
pre-shared key to be used with a given handshake in association
with PSK key establishment.</t>

<t>The "extension_data" field of this extension contains a
"PreSharedKeyExtension" value:</t>

<figure><artwork><![CDATA[
   struct {
       opaque identity<1..2^16-1>;
       uint32 obfuscated_ticket_age;
   } PskIdentity;

   opaque PskBinderEntry<32..255>;

   struct {
       PskIdentity identities<7..2^16-1>;
       PskBinderEntry binders<33..2^16-1>;
   } OfferedPsks;

   struct {
       select (Handshake.msg_type) {
           case client_hello: OfferedPsks;
           case server_hello: uint16 selected_identity;
       };
   } PreSharedKeyExtension;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='identity:'>
  A label for a key. For instance, a ticket (as defined
in <xref target="ticket-establishment"/>) or a label for a pre-shared key
established externally.</t>
  <t hangText='obfuscated_ticket_age:'>
  An obfuscated version of the age of the key.
<xref target="ticket-age"/> describes how to form this value
for identities established via the NewSessionTicket message.
For identities established externally, an obfuscated_ticket_age of 0
SHOULD be used, and servers MUST ignore the value.</t>
  <t hangText='identities:'>
  A list of the identities that the client is willing
to negotiate with the server. If sent alongside the "early_data"
extension (see <xref target="early-data-indication"/>), the first identity is the
one used for 0-RTT data.</t>
  <t hangText='binders:'>
  A series of HMAC values, one for
each PSK offered in the "pre_shared_keys" extension and in the same
order, computed as described below.</t>
  <t hangText='selected_identity:'>
  The server's chosen identity expressed as a (0-based) index into
the identities in the client's list.</t>
</list></t>

<t>Each PSK is associated with a single Hash algorithm. For PSKs established
via the ticket mechanism (<xref target="NSTMessage"/>), this is the
KDF Hash algorithm on the connection where the ticket was established.
For externally established PSKs, the Hash algorithm MUST be set when the
PSK is established or default to SHA-256 if no such algorithm
is defined. The server MUST ensure that it selects a compatible
PSK (if any) and cipher suite.</t>

<t>In TLS versions prior to TLS 1.3, the Server Name Identification (SNI) value was
intended to be associated with the session (Section&nbsp;3 of <xref target="RFC6066"/>), with the
server being required to enforce that the SNI value associated with the session
matches the one specified in the resumption handshake.  However, in reality the
implementations were not consistent on which of two supplied SNI values they
would use, leading to the consistency requirement being de&nbsp;facto enforced by the
clients.  In TLS 1.3, the SNI value is always explicitly specified in the
resumption handshake, and there is no need for the server to associate an SNI value with the
ticket. Clients, however, SHOULD store the SNI with the PSK to fulfill
the requirements of <xref target="NSTMessage"/>.</t>

<t>Implementor's note: When session resumption is the primary use case of PSKs,
the most straightforward way to implement the
PSK/cipher suite matching requirements is to negotiate the cipher
suite first and then exclude any incompatible PSKs. Any unknown PSKs
(e.g., they are not in the PSK database or are encrypted with an
unknown key) SHOULD simply be ignored. If no acceptable PSKs are
found, the server SHOULD perform a non-PSK handshake if possible.
If backward compatibility is important, client-provided, externally
established PSKs SHOULD influence cipher suite selection.</t>

<t>Prior to accepting PSK key establishment, the server MUST validate the
corresponding binder value (see <xref target="psk-binder"/> below). If this
value is not present or does not validate, the server MUST abort the handshake.
Servers SHOULD NOT attempt to validate multiple binders; rather, they
SHOULD select a single PSK and validate solely the binder that
corresponds to that PSK.
See <xref target="client-hello-recording"/> and
<xref target="psk-identity-exposure"/> for the
security rationale for this requirement.
In order to accept PSK key establishment, the
server sends a "pre_shared_key" extension indicating the selected
identity.</t>

<t>Clients MUST verify that the server's selected_identity is within the
range supplied by the client, that the server selected a cipher suite
indicating a Hash associated with the PSK, and that a server
"key_share" extension is present if required by the
ClientHello "psk_key_exchange_modes" extension. If these values are not
consistent, the client MUST abort the handshake with an
"illegal_parameter" alert.</t>

<t>If the server supplies an "early_data" extension, the client MUST
verify that the server's selected_identity is 0. If any
other value is returned, the client MUST abort the handshake
with an "illegal_parameter" alert.</t>

<t>The "pre_shared_key" extension MUST be the last extension in the
ClientHello (this facilitates implementation as described
below). Servers MUST check that it is the last extension and otherwise
fail the handshake with an "illegal_parameter" alert.</t>

<section anchor="ticket-age" title="Ticket Age">

<t>The client's view of the age of a ticket is the time since the receipt
of the NewSessionTicket message. Clients MUST NOT attempt to use
tickets which have ages greater than the "ticket_lifetime" value which
was provided with the ticket. The "obfuscated_ticket_age" field of
each PskIdentity contains an obfuscated version of the ticket age
formed by taking the age in milliseconds and adding the "ticket_age_add"
value that was included with the ticket (see <xref target="NSTMessage"/>),
modulo 2^32. This addition prevents passive observers from correlating
connections unless tickets are reused. Note that the "ticket_lifetime" field
in the NewSessionTicket message is in seconds but the "obfuscated_ticket_age"
is in milliseconds. Because ticket lifetimes are restricted to a week,
32 bits is enough to represent any plausible age, even in milliseconds.</t>

</section>
<section anchor="psk-binder" title="PSK Binder">

<t>The PSK binder value forms a binding between a PSK and the current
handshake, as well as a binding between the handshake in which the PSK was
generated (if via a NewSessionTicket message) and the current handshake.
Each entry in the binders list is computed as an HMAC
over a transcript hash (see <xref target="the-transcript-hash"/>) containing a partial ClientHello
up to and including the PreSharedKeyExtension.identities field. That
is, it includes all of the ClientHello but not the binders list
itself. The length fields for the message (including the overall
length, the length of the extensions block, and the length of the
"pre_shared_key" extension) are all set as if binders of the correct
lengths were present.</t>

<t>The PskBinderEntry is computed in the same way as the Finished
message (<xref target="finished"/>) but with the BaseKey being the binder_key
derived via the key schedule from the corresponding PSK which
is being offered (see <xref target="key-schedule"/>).</t>

<t>If the handshake includes a HelloRetryRequest, the initial ClientHello
and HelloRetryRequest are included in the transcript along with the
new ClientHello.  For instance, if the client sends ClientHello1, its
binder will be computed over:</t>

<figure><artwork><![CDATA[
   Transcript-Hash(Truncate(ClientHello1))
]]></artwork></figure>

<t>Where Truncate() removes the binders list from the ClientHello.</t>

<t>If the server responds with a HelloRetryRequest and the client then sends
ClientHello2, its binder will be computed over:</t>

<figure><artwork><![CDATA[
   Transcript-Hash(ClientHello1,
                   HelloRetryRequest,
                   Truncate(ClientHello2))
]]></artwork></figure>

<t>The full ClientHello1/ClientHello2 is included in all other handshake hash
computations. Note that in the first flight, Truncate(ClientHello1) is hashed
directly, but in the second flight, ClientHello1 is hashed and then reinjected
as a "message_hash" message, as described in <xref
target="the-transcript-hash"/>.</t>

</section>
<section anchor="processing-order" title="Processing Order">

<t>Clients are permitted to "stream" 0-RTT data until they
receive the server's Finished, only then sending the EndOfEarlyData
message, followed by the rest of the handshake.
In order to avoid deadlocks, when accepting "early_data",
servers MUST process the client's ClientHello and then immediately
send their flight of messages, rather than waiting for the client's
EndOfEarlyData message before sending its ServerHello.</t>

</section>
</section>
</section>
<section anchor="server-parameters" title="Server Parameters">

<t>The next two messages from the server, EncryptedExtensions and
CertificateRequest, contain information from the server
that determines the rest of the handshake. These messages
are encrypted with keys derived from the server_handshake_traffic_secret.</t>

<section anchor="encrypted-extensions" title="Encrypted Extensions">

<t>In all handshakes, the server MUST send the
EncryptedExtensions message immediately after the
ServerHello message. This is the first message that is encrypted
under keys derived from the server_handshake_traffic_secret.</t>

<t>The EncryptedExtensions message contains extensions
that can be protected, i.e., any which are not needed to
establish the cryptographic context but which are not
associated with individual certificates. The client
MUST check EncryptedExtensions for the presence of any forbidden
extensions and if any are found MUST abort the handshake with an
"illegal_parameter" alert.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       Extension extensions<0..2^16-1>;
   } EncryptedExtensions;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='extensions:'>
  A list of extensions. For more information, see the table in <xref target="extensions"/>.</t>
</list></t>

</section>
<section anchor="certificate-request" title="Certificate Request">

<t>A server which is authenticating with a certificate MAY optionally
request a certificate from the client. This message, if sent, MUST
follow EncryptedExtensions.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       opaque certificate_request_context<0..2^8-1>;
       Extension extensions<2..2^16-1>;
   } CertificateRequest;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='certificate_request_context:'>
  An opaque string which identifies the certificate request and
which will be echoed in the client's Certificate message. The
certificate_request_context MUST be unique within the scope
of this connection (thus preventing replay of client
CertificateVerify messages). This field SHALL be zero length
unless used for the post-handshake authentication exchanges
described in <xref target="post-handshake-authentication"/>.
When requesting post-handshake authentication, the server SHOULD
make the context unpredictable to the client (e.g., by
randomly generating it) in order to prevent an attacker who
has temporary access to the client's private key from
pre-computing valid CertificateVerify messages.</t>
  <t hangText='extensions:'>
  A set of extensions describing the parameters of the
certificate being requested. The "signature_algorithms"
extension MUST be specified, and other extensions may optionally be
included if defined for this message.
Clients MUST ignore unrecognized extensions.</t>
</list></t>

<t>In prior versions of TLS, the CertificateRequest message
carried a list of signature algorithms and certificate authorities
which the server would accept. In TLS 1.3, the former is expressed
by sending the "signature_algorithms" and optionally
"signature_algorithms_cert" extensions. The latter is
expressed by sending the "certificate_authorities" extension
(see <xref target="certificate-authorities"/>).</t>

<t>Servers which are authenticating with a PSK MUST NOT send the
CertificateRequest message in the main handshake, though they
MAY send it in post-handshake authentication (see <xref target="post-handshake-authentication"/>)
provided that the client has sent the "post_handshake_auth"
extension (see <xref target="post_handshake_auth"/>).</t>

</section>
</section>
<section anchor="authentication-messages" title="Authentication Messages">

<t>As discussed in <xref target="protocol-overview"/>, TLS generally uses a common
set of messages for authentication, key confirmation, and handshake
integrity: Certificate, CertificateVerify, and Finished.
(The PSK binders also perform key confirmation, in a
similar fashion.) These three
messages are always sent as the last messages in their handshake
flight. The Certificate and CertificateVerify messages are only
sent under certain circumstances, as defined below. The Finished
message is always sent as part of the Authentication Block.
These messages are encrypted under keys derived from the
[sender]_handshake_traffic_secret.</t>

<t>The computations for the Authentication messages all uniformly
take the following inputs:</t>

<t><list style="symbols">
  <t>The certificate and signing key to be used.</t>
  <t>A Handshake Context consisting of the set of messages to be
included in the transcript hash.</t>
  <t>A Base Key to be used to compute a MAC key.</t>
</list></t>

<t>Based on these inputs, the messages then contain:</t>

<t><list style="hanging">
  <t hangText='Certificate:'>
  The certificate to be used for authentication, and any
supporting certificates in the chain. Note that certificate-based
client authentication is not available in PSK (including 0-RTT) flows.</t>
  <t hangText='CertificateVerify:'>
  A signature over the value Transcript&nbhy;Hash(Handshake Context,
Certificate).</t>
  <t hangText='Finished:'>
  A MAC over the value Transcript-Hash(Handshake Context, Certificate,
CertificateVerify) using a MAC key derived from the Base Key.</t>
</list></t>

<t>The following table defines the Handshake Context and MAC Base Key
for each scenario:</t>

<texttable>
      <ttcol align='left' width="20%">Mode</ttcol>
      <ttcol align='left' width="40%">Handshake Context</ttcol>
      <ttcol align='left' width="30%">Base Key</ttcol>
      <c>Server</c>
      <c>ClientHello ... later of EncryptedExtensions/ CertificateRequest</c>
      <c>server_handshake_traffic_secret</c>
      <c>Client</c>
      <c>ClientHello ... later of server Finished/EndOfEarlyData</c>
      <c>client_handshake_traffic_secret</c>
      <c>Post-Handshake</c>
      <c>ClientHello ... client Finished + CertificateRequest</c>
      <c>client_application_traffic_secret_N</c>
</texttable>

<section anchor="the-transcript-hash" title="The Transcript Hash">

<t>Many of the cryptographic computations in TLS make use of a transcript
hash. This value is computed by hashing the concatenation of
each included handshake message, including the handshake
message header carrying the handshake message type and length fields,
but not including record layer headers. I.e.,</t>

<figure><artwork><![CDATA[
 Transcript-Hash(M1, M2, ... Mn) = Hash(M1 || M2 || ... || Mn)
]]></artwork></figure>

<t>As an exception to this general rule, when the server responds to a
ClientHello with a HelloRetryRequest, the value of ClientHello1 is
replaced with a special synthetic handshake message of handshake
type "message_hash" containing Hash(ClientHello1). I.e.,</t>

<figure><artwork><![CDATA[
 Transcript-Hash(ClientHello1, HelloRetryRequest, ... Mn) =
     Hash(message_hash ||        /* Handshake type */
          00 00 Hash.length  ||  /* Handshake message length (bytes) */
          Hash(ClientHello1) ||  /* Hash of ClientHello1 */
          HelloRetryRequest  || ... || Mn)
]]></artwork></figure>

<t>The reason for this construction is to allow the server to do a
stateless HelloRetryRequest by storing just the hash of ClientHello1
in the cookie, rather than requiring it to export the entire intermediate
hash state (see <xref target="cookie"/>).</t>

<t>For concreteness, the transcript hash is always taken from the
following sequence of handshake messages, starting at the first
ClientHello and including only those messages that were sent:
ClientHello, HelloRetryRequest, ClientHello, ServerHello,
EncryptedExtensions, server CertificateRequest, server Certificate,
server CertificateVerify, server Finished, EndOfEarlyData, client
Certificate, client CertificateVerify, client Finished.</t>

<t>In general, implementations can implement the transcript by keeping a
running transcript hash value based on the negotiated hash. Note,
however, that subsequent post-handshake authentications do not include
each other, just the messages through the end of the main handshake.</t>

</section>
<section anchor="certificate" title="Certificate">

<t>This message conveys the endpoint's certificate chain to the peer.</t>

<t>The server MUST send a Certificate message whenever the agreed-upon
key exchange method uses certificates for authentication (this
includes all key exchange methods defined in this document
except&nbsp;PSK).</t>

<t>The client MUST send a Certificate message if and only if the server has
requested client authentication via a CertificateRequest message
(<xref target="certificate-request"/>). If the server requests client authentication
but no suitable certificate is available, the client
MUST send a Certificate message containing no certificates (i.e., with
the "certificate_list" field having length 0).  A Finished message MUST
be sent regardless of whether the Certificate message is empty.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   /* Managed by IANA */
   enum {
       X509(0),
       RawPublicKey(2),
       (255)
   } CertificateType;

   struct {
       select (certificate_type) {
           case RawPublicKey:
             /* From RFC 7250 ASN.1_subjectPublicKeyInfo */
             opaque ASN1_subjectPublicKeyInfo<1..2^24-1>;

           case X509:
             opaque cert_data<1..2^24-1>;
       };
       Extension extensions<0..2^16-1>;
   } CertificateEntry;

   struct {
       opaque certificate_request_context<0..2^8-1>;
       CertificateEntry certificate_list<0..2^24-1>;
   } Certificate;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='certificate_request_context:'>
  If this message is in response to a CertificateRequest, the
value of certificate_request_context in that message. Otherwise
(in the case of server authentication), this field SHALL be zero length.</t>
  <t hangText='certificate_list:'>
  A sequence (chain) of CertificateEntry structures, each
containing a single certificate and set of extensions.</t>
  <t hangText='extensions:'>
  A set of extension values for the CertificateEntry. The "Extension"
format is defined in <xref target="extensions"/>. Valid extensions for server
certificates at present include the OCSP Status extension <xref
target="RFC6066"/> and SignedCertificateTimestamp extension <xref target="RFC6962"/>;
future extensions may be defined for this message as well. Extensions in the
Certificate message from the server MUST correspond to ones from the
ClientHello message. Extensions in the Certificate message from the client
MUST correspond with extensions in the CertificateRequest message from the
server. If an extension applies to the entire chain, it SHOULD be included
in the first CertificateEntry.</t>
</list></t>

<t>If the corresponding certificate type extension
("server_certificate_type" or "client_certificate_type") was not negotiated
in EncryptedExtensions, or the X.509 certificate type was negotiated, then each
CertificateEntry contains a DER-encoded X.509 certificate. The sender's
certificate MUST come in the first CertificateEntry in the list.  Each
following certificate SHOULD directly certify the one immediately preceding it.
Because certificate validation requires that trust anchors be
distributed independently, a certificate that specifies a trust anchor
MAY be omitted from the chain, provided that supported peers are known
to possess any omitted certificates.</t>

<t>Note: Prior to TLS 1.3, "certificate_list" ordering required each
certificate to certify the one immediately preceding it;
however, some implementations allowed some flexibility. Servers sometimes send
both a current and deprecated intermediate for transitional purposes, and others
are simply configured incorrectly, but these cases can nonetheless be validated
properly. For maximum compatibility, all implementations SHOULD be prepared to
handle potentially extraneous certificates and arbitrary orderings from any TLS
version, with the exception of the end-entity certificate which MUST be first.</t>

<t>If the RawPublicKey certificate type was negotiated, then the
certificate_list MUST contain no more than one CertificateEntry, which
contains an ASN1_subjectPublicKeyInfo value as defined in
Section&nbsp;3 of <xref target="RFC7250"/>.</t>

<t>The OpenPGP certificate type <xref target="RFC6091"/> MUST NOT be used with TLS 1.3.</t>

<t>The server's certificate_list MUST always be non-empty. A client will
send an empty certificate_list if it does not have an appropriate
certificate to send in response to the server's authentication
request.</t>

<section anchor="ocsp-and-sct" title="OCSP Status and SCT Extensions">

<t><xref target="RFC6066"/> and <xref target="RFC6961"/> provide extensions to
negotiate the server sending OCSP responses to the client. In TLS 1.2 and
below, the server replies with an empty extension to indicate negotiation of
this extension and the OCSP information is carried in a CertificateStatus
message. In TLS 1.3, the server's OCSP information is carried in
an extension in the CertificateEntry containing the associated
certificate. Specifically, the body of the "status_request" extension
from the server MUST be a CertificateStatus structure as defined
in <xref target="RFC6066"/>, which is interpreted as defined in <xref
target="RFC6960"/>.</t>

<t>Note: The status_request_v2 extension <xref target="RFC6961"/> is
deprecated. TLS&nbsp;1.3 servers MUST NOT act upon its presence or information
in it when processing ClientHello messages; in particular, they MUST NOT send
the status_request_v2 extension in the EncryptedExtensions, CertificateRequest,
or Certificate messages. TLS 1.3 servers MUST be able to process ClientHello
messages that include it, as it MAY be sent by clients that wish to use it in
earlier protocol versions.</t>

<t>A server MAY request that a client present an OCSP response with its
certificate by sending an empty "status_request" extension in its
CertificateRequest message. If the client opts to send an OCSP response, the
body of its "status_request" extension MUST be a CertificateStatus structure as
defined in <xref target="RFC6066"/>.</t>

<t>Similarly, <xref target="RFC6962"/> provides a mechanism for a server to
send a Signed Certificate Timestamp (SCT) as an extension in the ServerHello
in TLS 1.2 and below. In TLS 1.3, the server's SCT information is carried in
an extension in the CertificateEntry.</t>

</section>
<section anchor="server-certificate-selection" title="Server Certificate Selection">

<t>The following rules apply to the certificates sent by the server:</t>

<t><list style="symbols">
  <t>The certificate type MUST be X.509v3 <xref target="RFC5280"/>, unless
explicitly negotiated otherwise (e.g., <xref target="RFC7250"/>).</t>
  <t>The server's end-entity certificate's public key (and associated
restrictions) MUST be compatible with the selected authentication
algorithm from the client's "signature_algorithms" extension
(currently RSA, ECDSA, or EdDSA).</t>
  <t>The certificate MUST allow the key to be used for signing (i.e., the
digitalSignature bit MUST be set if the Key Usage extension is present) with
a signature scheme indicated in the client's "signature_algorithms"/"signature_algorithms_cert"
extensions (see <xref target="signature-algorithms"/>).</t>
  <t>The "server_name" <xref target="RFC6066"/> and "certificate_authorities" extensions are used to
guide certificate selection. As servers MAY require the presence of the "server_name"
extension, clients SHOULD send this extension, when applicable.</t>
</list></t>

<t>All certificates provided by the server MUST be signed by a
signature algorithm advertised by the client if it is able to provide such
a chain (see <xref target="signature-algorithms"/>).
Certificates that are self-signed
or certificates that are expected to be trust anchors are not validated as
part of the chain and therefore MAY be signed with any algorithm.</t>

<t>If the server cannot produce a certificate chain that is signed only via the
indicated supported algorithms, then it SHOULD continue the handshake by sending
the client a certificate chain of its choice that may include algorithms
that are not known to be supported by the client.
This fallback chain SHOULD NOT use the deprecated SHA-1 hash algorithm in
general, but MAY do so if the client's advertisement permits it, and
MUST NOT do so otherwise.</t>

<t>If the client cannot construct an acceptable chain using the provided
certificates and decides to abort the handshake, then it MUST abort the
handshake with an appropriate certificate-related alert (by default,
"unsupported_certificate"; see <xref target="error-alerts"/> for more
information).</t>

<t>If the server has multiple certificates, it chooses one of them based on the
above-mentioned criteria (in addition to other criteria, such as
transport-layer endpoint, local configuration, and preferences).</t>

</section>
<section anchor="client-certificate-selection" title="Client Certificate Selection">

<t>The following rules apply to certificates sent by the client:</t>

<t><list style="symbols">
  <t>The certificate type MUST be X.509v3 <xref target="RFC5280"/>, unless explicitly negotiated
otherwise (e.g., <xref target="RFC7250"/>).</t>
  <t>If the "certificate_authorities" extension in the CertificateRequest
message was present, at least one of the certificates in the certificate
chain SHOULD be issued by one of the listed CAs.</t>
  <t>The certificates MUST be signed using an acceptable signature
algorithm, as described in <xref target="certificate-request"/>.  Note that this
relaxes the constraints on certificate-signing algorithms found in
prior versions of TLS.</t>
  <t>If the CertificateRequest message contained a non-empty "oid_filters"
extension, the end-entity certificate MUST match the extension OIDs
that are recognized by the client, as described in <xref target="oid-filters"/>.</t>
</list></t>

<t>Note that, as with the server certificate, there are certificates that use
algorithm combinations that cannot be currently used with&nbsp;TLS.</t>

</section>
<section anchor="receiving-a-certificate-message" title="Receiving a Certificate Message">

<t>In general, detailed certificate validation procedures are out of scope for
TLS (see <xref target="RFC5280"/>). This section provides TLS-specific requirements.</t>

<t>If the server supplies an empty Certificate message, the client MUST abort
the handshake with a "decode_error" alert.</t>

<t>If the client does not send any certificates (i.e., it sends an empty
Certificate message),
the server MAY at its discretion either continue the handshake without client
authentication or abort the handshake with a "certificate_required"
alert. Also, if some aspect of the certificate chain was unacceptable (e.g.,
it was not signed by a known, trusted CA), the server MAY at its discretion
either continue the handshake (considering the client unauthenticated) or
abort the handshake.</t>

<t>Any endpoint receiving any certificate which it would need to validate
using any signature algorithm using an MD5 hash MUST abort the
handshake with a "bad_certificate" alert.  SHA-1 is deprecated, and it
is RECOMMENDED that any endpoint receiving any certificate which it
would need to validate using any signature algorithm using a SHA-1
hash abort the handshake with a "bad_certificate" alert. For clarity,
this means that endpoints MAY accept these algorithms for
certificates that are self-signed or are trust anchors.</t>

<t>All endpoints are RECOMMENDED to transition to SHA-256 or better as soon
as possible to maintain interoperability with implementations
currently in the process of phasing out SHA-1 support.</t>

<t>Note that a certificate containing a key for one signature algorithm
MAY be signed using a different signature algorithm (for instance,
an RSA key signed with an ECDSA key).</t>

</section>
</section>
<section anchor="certificate-verify" title="Certificate Verify">

<t>This message is used to provide explicit proof that an endpoint
possesses the private key corresponding to its certificate.
The CertificateVerify message also provides integrity for the handshake up
to this point. Servers MUST send this message when authenticating via a certificate.
Clients MUST send this message whenever authenticating via a certificate (i.e., when
the Certificate message is non-empty). When sent, this message MUST appear immediately
after the Certificate message and immediately prior to the Finished message.</t>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       SignatureScheme algorithm;
       opaque signature<0..2^16-1>;
   } CertificateVerify;
]]></artwork></figure>

<t>The algorithm field specifies the signature algorithm used (see
<xref target="signature-algorithms"/> for the definition of this type). The
signature is a digital signature using that algorithm. The
content that is covered under the signature is the hash output as described in
<xref target="the-transcript-hash"/>, namely:</t>

<figure><artwork><![CDATA[
   Transcript-Hash(Handshake Context, Certificate)
]]></artwork></figure>

<t>The digital signature is then computed over the concatenation of:</t>

<t><list style="symbols">
  <t>A string that consists of octet 32 (0x20) repeated 64 times</t>
  <t>The context string</t>
  <t>A single 0 byte which serves as the separator</t>
  <t>The content to be signed</t>
</list></t>

<t>This structure is intended to prevent an attack on previous versions
of TLS in which the ServerKeyExchange format meant that
attackers could obtain a signature of a message with a chosen 32-byte
prefix (ClientHello.random). The initial 64-byte pad clears that prefix
along with the server-controlled ServerHello.random.</t>

<t>The context string for a server signature is
"TLS 1.3, server CertificateVerify".
The context string for a client signature is
"TLS&nbsp;1.3, client CertificateVerify".
It is used to provide separation between signatures made in different
contexts, helping against potential cross-protocol attacks.</t>

<t>For example, if the transcript hash was 32 bytes of
01 (this length would make sense for SHA-256), the content covered by
the digital signature for a server CertificateVerify would be:</t>

<figure><artwork><![CDATA[
   2020202020202020202020202020202020202020202020202020202020202020
   2020202020202020202020202020202020202020202020202020202020202020
   544c5320312e332c207365727665722043657274696669636174655665726966
   79
   00
   0101010101010101010101010101010101010101010101010101010101010101
]]></artwork></figure>

<t>On the sender side, the process for computing the signature field of the
CertificateVerify message takes as input:</t>

<t><list style="symbols">
  <t>The content covered by the digital signature</t>
  <t>The private signing key corresponding to the certificate sent in the
previous message</t>
</list></t>

<t>If the CertificateVerify message is sent by a server, the signature
algorithm MUST be one offered in the client's "signature_algorithms" extension
unless no valid certificate chain can be produced without unsupported
algorithms (see <xref target="signature-algorithms"/>).</t>

<t>If sent by a client, the signature algorithm used in the signature
MUST be one of those present in the supported_signature_algorithms
field of the "signature_algorithms" extension in the CertificateRequest message.</t>

<t>In addition, the signature algorithm MUST be compatible with the key
in the sender's end-entity certificate. RSA signatures MUST use an
RSASSA-PSS algorithm, regardless of whether RSASSA-PKCS1-v1_5 algorithms
appear in "signature_algorithms". The SHA-1 algorithm MUST NOT be used
in any signatures of CertificateVerify messages.
All SHA-1 signature algorithms in this specification are defined solely
for use in legacy certificates and are not valid for CertificateVerify
signatures.</t>

<t>The receiver of a CertificateVerify message MUST verify the signature field.
The verification process takes as input:</t>

<t><list style="symbols">
  <t>The content covered by the digital signature</t>
  <t>The public key contained in the end-entity certificate found in the
associated Certificate message</t>
  <t>The digital signature received in the signature field of the
CertificateVerify message</t>
</list></t>

<t>If the verification fails, the receiver MUST terminate the handshake
with a "decrypt_error" alert.</t>

</section>
<section anchor="finished" title="Finished">

<t>The Finished message is the final message in the Authentication
Block. It is essential for providing authentication of the handshake
and of the computed keys.</t>

<t>Recipients of Finished messages MUST verify that the contents are
correct and if incorrect MUST terminate the connection
with a "decrypt_error" alert.</t>

<t>Once a side has sent its Finished message and has received and
validated the Finished message from its peer, it may begin to send and
receive Application Data over the connection. There are two
settings in which it is permitted to send data prior to
receiving the peer's Finished:</t>

<t><list style="numbers">
  <t>Clients sending 0-RTT data as described in <xref target="early-data-indication"/>.</t>
  <t>Servers MAY send data after sending their first flight, but
because the handshake is not yet complete, they have no assurance
of either the peer's identity or its liveness (i.e.,
the ClientHello might have been replayed).</t>
</list></t>

<t>The key used to compute the Finished message is computed from the
Base Key defined in <xref target="authentication-messages"/> using HKDF (see
<xref target="key-schedule"/>). Specifically:</t>

<figure><artwork><![CDATA[
finished_key =
    HKDF-Expand-Label(BaseKey, "finished", "", Hash.length)
]]></artwork></figure>

<t>Structure of this message:</t>

<figure><artwork><![CDATA[
   struct {
       opaque verify_data[Hash.length];
   } Finished;
]]></artwork></figure>

<t>The verify_data value is computed as follows:</t>

<figure><artwork><![CDATA[
   verify_data =
       HMAC(finished_key,
            Transcript-Hash(Handshake Context,
                            Certificate*, CertificateVerify*))

   * Only included if present.
]]></artwork></figure>

<t>HMAC <xref target="RFC2104"/> uses the Hash algorithm for the handshake.
As noted above, the HMAC input can generally be implemented by a running
hash, i.e., just the handshake hash at this point.</t>

<t>In previous versions of TLS, the verify_data was always 12 octets long. In
TLS 1.3, it is the size of the HMAC output for the Hash used for the handshake.</t>

<t>Note: Alerts and any other record types are not handshake messages
and are not included in the hash computations.</t>

<t>Any records following a Finished message MUST be encrypted under the
appropriate application traffic key as described in <xref target="updating-traffic-keys"/>.
In particular, this includes any alerts sent by the
server in response to client Certificate and CertificateVerify messages.</t>

</section>
</section>
<section anchor="end-of-early-data" title="End of Early Data">

<figure><artwork><![CDATA[
   struct {} EndOfEarlyData;
]]></artwork></figure>

<t>If the server sent an "early_data" extension, the client MUST send an
EndOfEarlyData message after receiving the server Finished.  If the server does
not send an "early_data" extension, then the client MUST&nbsp;NOT send an
EndOfEarlyData message. This message indicates that all
0-RTT application_data messages, if any, have been transmitted and
that the following records are protected under handshake traffic keys.
Servers MUST NOT send this message, and clients receiving it MUST terminate
the connection with an "unexpected_message" alert.  This message is
encrypted under keys derived from the client_early_traffic_secret.</t>

</section>
<section anchor="post-handshake-messages" title="Post-Handshake Messages">

<t>TLS also allows other messages to be sent after the main handshake.
These messages use a handshake content type and are encrypted under the
appropriate application traffic key.</t>

<section anchor="NSTMessage" title="New Session Ticket Message">

<t>At any time after the server has received the client Finished message,
it MAY send a NewSessionTicket message. This message creates a unique
association between the ticket value and a secret PSK
derived from the resumption master secret (see <xref
target="cryptographic-computations"/>).</t>

<t>The client MAY use this PSK for future handshakes by including the
ticket value in the "pre_shared_key" extension in its ClientHello
(<xref target="pre-shared-key-extension"/>). Servers MAY send multiple tickets
on a single connection, either immediately after each other or
after specific events (see <xref target="client-tracking"/>).
For instance, the server might send a new ticket after post-handshake
authentication in order to encapsulate the additional client
authentication state. Multiple tickets are useful for clients
for a variety of purposes, including:</t>

<t><list style="symbols">
  <t>Opening multiple parallel HTTP connections.</t>
  <t>Performing connection racing across interfaces and address families
via (for example) Happy Eyeballs <xref target="RFC8305"/> or related
techniques.</t>

</list></t>

<t>Any ticket MUST only be resumed with a cipher suite that has the
same KDF hash algorithm as that used to establish the original connection.</t>

<t>Clients MUST only resume if the new SNI value is valid for the server
certificate presented in the original session and SHOULD only resume if
the SNI value matches the one used in the original session.  The latter
is a performance optimization: normally, there is no reason to expect
that different servers covered by a single certificate would be able to
accept each other's tickets; hence, attempting resumption in that case
would waste a single-use ticket.  If such an indication is provided
(externally or by any other means), clients MAY resume with a different
SNI value.</t>

<t>On resumption, if reporting an SNI value to the calling application,
implementations MUST use the value sent in the resumption ClientHello rather
than the value sent in the previous session. Note that if a server
implementation declines all PSK identities with different SNI values, these two
values are always the same.</t>

<t>Note: Although the resumption master secret depends on the client's second
flight, a server which does not request client authentication MAY compute
the remainder of the transcript independently and then send a
NewSessionTicket immediately upon sending its Finished rather than
waiting for the client Finished.  This might be appropriate in cases
where the client is expected to open multiple TLS connections in
parallel and would benefit from the reduced overhead of a resumption
handshake, for example.</t>

<figure><artwork><![CDATA[
   struct {
       uint32 ticket_lifetime;
       uint32 ticket_age_add;
       opaque ticket_nonce<0..255>;
       opaque ticket<1..2^16-1>;
       Extension extensions<0..2^16-2>;
   } NewSessionTicket;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='ticket_lifetime:'>
  Indicates the lifetime in seconds as a 32-bit unsigned integer in
network byte order from the time of ticket issuance.
Servers MUST NOT use any value greater than 604800&nbsp;seconds (7 days).
The value of zero indicates that the ticket should be discarded
immediately. Clients MUST NOT cache tickets for longer than
7 days, regardless of the ticket_lifetime, and MAY delete tickets
earlier based on local policy. A server MAY treat a ticket as valid
for a shorter period of time than what is stated in the
ticket_lifetime.</t>
  <t hangText='ticket_age_add:'>
  A securely generated, random 32-bit value that is used to obscure the age of
the ticket that the client includes in the "pre_shared_key" extension.
The client-side ticket age is added to this value modulo 2^32 to
obtain the value that is transmitted by the client.
The server MUST generate a fresh value for each ticket it sends.</t>
  <t hangText='ticket_nonce:'>
  A per-ticket value that is unique across all tickets issued on this
  connection.</t>
  <t hangText='ticket:'>
  The value of the ticket to be used as the PSK identity.
The ticket itself is an opaque label. It MAY be either a database lookup key
or a self-encrypted and self-authenticated value.
Section&nbsp;4 of <xref target="RFC5077"/> describes a recommended ticket construction mechanism.</t>
  <t hangText='extensions:'>
  A set of extension values for the ticket. The "Extension"
format is defined in <xref target="extensions"/>. Clients MUST ignore
unrecognized extensions.</t>
</list></t>

<t>The sole extension currently defined for NewSessionTicket is
"early_data", indicating that the ticket may be used to send 0-RTT data
(<xref target="early-data-indication"/>). It contains the following value:</t>

<t><list style="hanging">
  <t hangText='max_early_data_size:'>
  The maximum amount of 0-RTT data that the client is allowed to send when using
this ticket, in bytes. Only Application Data payload (i.e., plaintext but
not padding or the inner content type byte) is counted. A server
receiving more than max_early_data_size bytes of 0-RTT data
SHOULD terminate the connection with an "unexpected_message" alert.
Note that servers that reject early data due to lack of cryptographic material
will be unable to differentiate padding from content, so clients
SHOULD&nbsp;NOT depend on being able to send large quantities of padding in
early data records.</t>
</list></t>

<t>The PSK associated with the ticket is computed as:</t>

<figure><artwork><![CDATA[
    HKDF-Expand-Label(resumption_master_secret,
                     "resumption", ticket_nonce, Hash.length)
]]></artwork></figure>

<t>Because the ticket_nonce value is distinct for each NewSessionTicket
message, a different PSK will be derived for each ticket.</t>

<t>Note that in principle it is possible to continue issuing new tickets
which indefinitely extend the lifetime of the keying
material originally derived from an initial non-PSK handshake (which
was most likely tied to the peer's certificate). It is RECOMMENDED
that implementations place limits on the total lifetime of such keying
material; these limits should take into account the lifetime of the
peer's certificate, the likelihood of intervening revocation,
and the time since the peer's online CertificateVerify signature.</t>

</section>
<section anchor="post-handshake-authentication" title="Post-Handshake Authentication">

<t>When the client has sent the "post_handshake_auth" extension (see
<xref target="post_handshake_auth"/>), a server MAY request client authentication at any time
after the handshake has completed by sending a CertificateRequest message. The
client MUST respond with the appropriate Authentication messages (see
<xref target="authentication-messages"/>). If the client chooses to authenticate, it MUST
send Certificate, CertificateVerify, and Finished. If it declines, it MUST send
a Certificate message containing no certificates followed by Finished.
All of the client's messages for a given response
MUST appear consecutively on the wire with no intervening messages of other types.</t>

<t>A client that receives a CertificateRequest message without having sent
the "post_handshake_auth" extension MUST send an "unexpected_message" fatal
alert.</t>

<t>Note: Because client authentication could involve prompting the user, servers
MUST be prepared for some delay, including receiving an arbitrary number of
other messages between sending the CertificateRequest and receiving a
response. In addition, clients which receive multiple CertificateRequests in
close succession MAY respond to them in a different order than they were
received (the certificate_request_context value allows the server to
disambiguate the responses).</t>

</section>
<section anchor="key-update" title="Key and Initialization Vector Update">

<t>The KeyUpdate handshake message is used to indicate that the sender is
updating its sending cryptographic keys. This message can be sent by
either peer after it has sent a Finished message.
Implementations that receive a KeyUpdate message prior to receiving a Finished message
MUST terminate the connection with an "unexpected_message" alert.
After sending a KeyUpdate message, the sender SHALL send all its traffic using the
next generation of keys, computed as described in <xref target="updating-traffic-keys"/>.
Upon receiving a KeyUpdate, the receiver MUST update its receiving keys.</t>

<figure><artwork><![CDATA[
   enum {
       update_not_requested(0), update_requested(1), (255)
   } KeyUpdateRequest;

   struct {
       KeyUpdateRequest request_update;
   } KeyUpdate;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='request_update:'>
  Indicates whether the recipient of the KeyUpdate should respond with its
own KeyUpdate. If an implementation receives any other value, it MUST
terminate the connection with an "illegal_parameter" alert.</t>
</list></t>

<t>If the request_update field is set to "update_requested", then the receiver
MUST send a KeyUpdate of its own with request_update set to
"update_not_requested" prior to sending its next Application Data record. This
mechanism allows either side to force an update to the entire connection, but
causes an implementation which receives multiple KeyUpdates while it is silent
to respond with a single update. Note that implementations may receive an
arbitrary number of messages between sending a KeyUpdate with request_update
set to "update_requested" and receiving the
peer's KeyUpdate, because those messages may already be in flight.
However, because send and receive keys are derived from independent
traffic secrets, retaining the receive traffic secret does not threaten
the forward secrecy of data sent before the sender changed keys.</t>

<t>If implementations independently send their own KeyUpdates with
request_update set to "update_requested" and they cross in flight, then each
side will also send a response, with the result that each side increments
by two generations.</t>

<t>Both sender and receiver MUST encrypt their KeyUpdate
messages with the old keys. Additionally, both sides MUST enforce that
a KeyUpdate with the old key is received before accepting any messages
encrypted with the new key. Failure to do so may allow message truncation
attacks.</t>

</section>
</section>
</section>
<section anchor="record-protocol" title="Record Protocol">

<t>The TLS record protocol takes messages to be transmitted, fragments
the data into manageable blocks, protects the records, and transmits
the result. Received data is verified, decrypted, reassembled, and
then delivered to higher-level clients.</t>

<t>TLS records are typed, which allows multiple higher-level protocols to
be multiplexed over the same record layer. This document specifies
four content types: handshake, Application Data, alert, and
change_cipher_spec.
The change_cipher_spec record is used only for compatibility purposes
(see <xref target="middlebox"/>).</t>

<t>An implementation may receive an unencrypted record of type
change_cipher_spec consisting of the single byte value 0x01 at any
time after the first ClientHello message has been sent or received and before
the peer's Finished message has been received and MUST simply drop it
without further processing.  Note that this record may appear at a point at the
handshake where the implementation is expecting protected records,
and so it is necessary to detect this
condition prior to attempting to deprotect the record. An
implementation which receives any other change_cipher_spec value or
which receives a protected change_cipher_spec record MUST abort the
handshake with an "unexpected_message" alert. If an implementation
detects a change_cipher_spec record
received before the first ClientHello message or after the peer's Finished
message, it MUST be treated as an unexpected record type (though stateless
servers may not be able to distinguish these cases from allowed cases).</t>

<t>Implementations MUST NOT send record types not defined in this
document unless negotiated by some extension.  If a TLS implementation
receives an unexpected record type, it MUST terminate the connection
with an "unexpected_message" alert.  New record content type values
are assigned by IANA in the TLS ContentType Registry as described in
<xref target="iana-considerations"/>.</t>

<section anchor="record-layer" title="Record Layer">

<t>The record layer fragments information blocks into TLSPlaintext
records carrying data in chunks of 2^14 bytes or less. Message
boundaries are handled differently, depending on the underlying
ContentType. Any future content types MUST specify appropriate
rules.
Note that these rules are stricter than what was enforced in TLS 1.2.</t>

<t>Handshake messages MAY be coalesced into a single TLSPlaintext
record or fragmented across several records, provided that:</t>

<t><list style="symbols">
  <t>Handshake messages MUST NOT be interleaved with other record
types. That is, if a handshake message is split over two or more
records, there MUST NOT be any other records between them.</t>
  <t>Handshake messages MUST NOT span key changes. Implementations MUST verify that
all messages immediately preceding a key change align with a record boundary;
if not, then they MUST terminate the connection with an "unexpected_message"
alert. Because the ClientHello, EndOfEarlyData, ServerHello, Finished, and
KeyUpdate messages can immediately precede a key change, implementations MUST
send these messages in alignment with a record boundary.</t>
</list></t>

<t>Implementations MUST NOT send zero-length fragments of Handshake
types, even if those fragments contain padding.</t>

<t>Alert messages (<xref target="alert-protocol"/>) MUST NOT be fragmented
across records, and multiple alert messages MUST NOT be coalesced into a
single TLSPlaintext record. In other words, a record with an Alert
type MUST contain exactly one message.</t>

<t>Application Data messages contain data that is opaque to
TLS. Application Data messages are always protected. Zero-length
fragments of Application Data MAY be sent, as they are potentially
useful as a traffic analysis countermeasure.  Application Data fragments
MAY be split across multiple records or coalesced into a single record.</t>

<figure><artwork><![CDATA[
   enum {
       invalid(0),
       change_cipher_spec(20),
       alert(21),
       handshake(22),
       application_data(23),
       (255)
   } ContentType;

   struct {
       ContentType type;
       ProtocolVersion legacy_record_version;
       uint16 length;
       opaque fragment[TLSPlaintext.length];
   } TLSPlaintext;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='type:'>
  The higher-level protocol used to process the enclosed fragment.</t>
  <t hangText='legacy_record_version:'>
  MUST be set to 0x0303 for all records generated by a
TLS 1.3 implementation other than an initial ClientHello (i.e., one
not generated after a HelloRetryRequest), where it
MAY also be 0x0301 for compatibility purposes.
This field is deprecated and MUST be ignored for all purposes.
Previous versions of TLS would use other values in this field
under some circumstances.</t>
  <t hangText='length:'>
  The length (in bytes) of the following TLSPlaintext.fragment. The
length MUST NOT exceed 2^14 bytes. An endpoint that receives a record
that exceeds this length MUST terminate the connection with a
"record_overflow" alert.</t>
  <t hangText='fragment:'>
  The data being transmitted. This value is transparent and is treated as an
independent block to be dealt with by the higher-level protocol
specified by the type field.</t>
</list></t>

<t>This document describes TLS 1.3, which uses the version 0x0304.
This version value is historical, deriving from the use of 0x0301
for TLS&nbsp;1.0 and 0x0300 for SSL 3.0. In order to maximize backward
compatibility, a record containing an initial ClientHello SHOULD have version
0x0301 (reflecting TLS 1.0) and a record containing a second ClientHello or
a ServerHello MUST have version 0x0303 (reflecting TLS&nbsp;1.2). When
negotiating prior versions of TLS, endpoints follow the procedure and
requirements provided in <xref target="backward-compatibility"/>.</t>

<t>When record protection has not yet been engaged, TLSPlaintext
structures are written directly onto the wire. Once record protection
has started, TLSPlaintext records are protected and sent as
described in the following section. Note that Application Data
records MUST NOT be written to the wire unprotected (see
<xref target="protocol-overview"/> for details).</t>

</section>
<section anchor="record-payload-protection" title="Record Payload Protection">

<t>The record protection functions translate a TLSPlaintext structure into a
TLSCiphertext structure. The deprotection functions reverse the process. In
TLS 1.3, as opposed to previous versions of TLS, all ciphers are modeled as
"Authenticated Encryption with Associated Data" (AEAD) <xref
target="RFC5116"/>.

AEAD functions provide a unified encryption and authentication
operation which turns plaintext into authenticated ciphertext and
back again. Each encrypted record consists of a plaintext header followed
by an encrypted body, which itself contains a type and optional padding.</t>

<figure><artwork><![CDATA[
   struct {
       opaque content[TLSPlaintext.length];
       ContentType type;
       uint8 zeros[length_of_padding];
   } TLSInnerPlaintext;

   struct {
       ContentType opaque_type = application_data; /* 23 */
       ProtocolVersion legacy_record_version = 0x0303; /* TLS v1.2 */
       uint16 length;
       opaque encrypted_record[TLSCiphertext.length];
   } TLSCiphertext;
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='content:'>
  The TLSPlaintext.fragment value, containing the byte encoding of a
handshake or an alert message, or the raw bytes of the application's
data to send.</t>
  <t hangText='type:'>
  The TLSPlaintext.type value containing the content type of the record.</t>
  <t hangText='zeros:'>
  An arbitrary-length run of zero-valued bytes may
appear in the cleartext after the type field.  This provides an
opportunity for senders to pad any TLS record by a chosen amount as
long as the total stays within record size limits.  See
<xref target="record-padding"/> for more details.</t>
  <t hangText='opaque_type:'>
  The outer opaque_type field of a TLSCiphertext record is always set to the
value 23 (application_data) for outward compatibility with
middleboxes accustomed to parsing previous versions of TLS.  The
actual content type of the record is found in TLSInnerPlaintext.type after
decryption.</t>
  <t hangText='legacy_record_version:'>
  The legacy_record_version field is always 0x0303.  TLS 1.3 TLSCiphertexts
are not generated until after TLS&nbsp;1.3 has been negotiated, so there are
no historical compatibility concerns where other values might be received.
Note that the handshake protocol, including the ClientHello and ServerHello
messages, authenticates the protocol version, so this value is redundant.</t>
  <t hangText='length:'>
  The length (in bytes) of the following TLSCiphertext.encrypted_record, which
is the sum of the lengths of the content and the padding, plus one
for the inner content type, plus any expansion added by the AEAD algorithm.
The length MUST&nbsp;NOT exceed 2^14 + 256 bytes.
An endpoint that receives a record that exceeds this length MUST
terminate the connection with a "record_overflow" alert.</t>
  <t hangText='encrypted_record:'>
  The AEAD-encrypted form of the serialized TLSInnerPlaintext structure.</t>
</list></t>

<t>AEAD algorithms take as input a single key, a nonce, a plaintext, and
"additional data" to be included in the authentication check, as described in
Section&nbsp;2.1 of <xref target="RFC5116"/>. The key is either the
client_write_key or the server_write_key, the nonce is derived from the
sequence number and the client_write_iv or server_write_iv (see <xref
target="nonce"/>), and the additional data input is the record header.
I.e.,</t>

<figure><artwork><![CDATA[
   additional_data = TLSCiphertext.opaque_type ||
                     TLSCiphertext.legacy_record_version ||
                     TLSCiphertext.length
]]></artwork></figure>

<t>The plaintext input to the AEAD algorithm is the encoded TLSInnerPlaintext structure.
Derivation of traffic keys is defined in <xref target="traffic-key-calculation"/>.</t>

<t>The AEAD output consists of the ciphertext output from the AEAD
encryption operation. The length of the plaintext is greater than the
corresponding TLSPlaintext.length due to the inclusion of TLSInnerPlaintext.type and
any padding supplied by the sender. The length of the
AEAD output will generally be larger than the plaintext, but by an
amount that varies with the AEAD algorithm. Since the ciphers might
incorporate padding, the amount of overhead could vary with different
lengths of plaintext. Symbolically,</t>

<figure><artwork><![CDATA[
   AEADEncrypted =
       AEAD-Encrypt(write_key, nonce, additional_data, plaintext)
]]></artwork></figure>

<t>The encrypted_record field of TLSCiphertext is set to AEADEncrypted.</t>

<t>In order to decrypt and verify, the cipher takes as input the key, nonce,
additional data, and the AEADEncrypted value. The output is either the plaintext
or an error indicating that the decryption failed. There is no separate
integrity check. Symbolically,</t>

<figure><artwork><![CDATA[
   plaintext of encrypted_record =
       AEAD-Decrypt(peer_write_key, nonce,
                    additional_data, AEADEncrypted)
]]></artwork></figure>

<t>If the decryption fails, the receiver MUST terminate the connection
with a "bad_record_mac" alert.</t>

<t>An AEAD algorithm used in TLS 1.3 MUST NOT produce an expansion greater than
255 octets. An endpoint that receives a record from its peer with
TLSCiphertext.length larger than 2^14 + 256 octets MUST terminate
the connection with a "record_overflow" alert.
This limit is derived from the maximum TLSInnerPlaintext length of
2^14 octets + 1 octet for ContentType + the maximum AEAD expansion of 255 octets.</t>

</section>
<section anchor="nonce" title="Per-Record Nonce">

<t>A 64-bit sequence number is maintained separately for reading and writing
records. The appropriate sequence number is incremented by one after
reading or writing each record.  Each sequence number is set to zero
at the beginning of a connection and whenever the key is changed; the
first record transmitted under a particular traffic key MUST use
sequence number 0.</t>

<t>Because the size of sequence numbers is 64-bit, they should not
wrap. If a TLS implementation would need to
wrap a sequence number, it MUST either rekey (<xref target="key-update"/>) or
terminate the connection.</t>

<t>Each AEAD algorithm will specify a range of possible lengths for the
per-record nonce, from N_MIN bytes to N_MAX bytes of input
<xref target="RFC5116"/>. The length of the TLS per-record nonce (iv_length)
is set to the larger of 8 bytes and N_MIN for the AEAD algorithm
(see <xref target="RFC5116"/>, Section&nbsp;4).
An AEAD algorithm where N_MAX is less than 8 bytes MUST&nbsp;NOT be used
with TLS. The per-record nonce for the AEAD construction is formed as
follows:</t>

<t><list style="numbers">
  <t>The 64-bit record sequence number is encoded in network byte order
and padded to the left with zeros to iv_length.</t>
  <t>The padded sequence number is XORed with either the static client_write_iv
or server_write_iv (depending on the role).</t>
</list></t>

<t>The resulting quantity (of length iv_length) is used as the
per&nbhy;record nonce.</t>

<t>Note: This is a different construction from that in TLS 1.2, which
specified a partially explicit nonce.</t>

</section>
<section anchor="record-padding" title="Record Padding">

<t>All encrypted TLS records can be padded to inflate the size of the
TLSCiphertext.  This allows the sender to hide the size of the
traffic from an observer.</t>

<t>When generating a TLSCiphertext record, implementations MAY choose to pad.
An unpadded record is just a record with a padding length of zero.
Padding is a string of zero-valued bytes appended to the ContentType
field before encryption.  Implementations MUST set the padding octets
to all zeros before encrypting.</t>

<t>Application Data records may contain a zero-length TLSInnerPlaintext.content if
the sender desires.  This permits generation of plausibly sized cover
traffic in contexts where the presence or absence of activity may be
sensitive.  Implementations MUST NOT send Handshake and Alert records
that have a zero-length TLSInnerPlaintext.content; if such a message
is received, the receiving implementation MUST terminate the connection
with an "unexpected_message" alert.</t>

<t>The padding sent is automatically verified by the record protection
mechanism; upon successful decryption of a TLSCiphertext.encrypted_record,
the receiving implementation scans the field from the end toward the
beginning until it finds a non-zero octet. This non-zero octet is the
content type of the message.
This padding scheme was selected because it allows padding of any encrypted
TLS record by an arbitrary size (from zero up to TLS record size
limits) without introducing new content types.  The design also
enforces all-zero padding octets, which allows for quick detection of
padding errors.</t>

<t>Implementations MUST limit their scanning to the cleartext returned
from the AEAD decryption.  If a receiving implementation does not find
a non-zero octet in the cleartext, it MUST terminate the
connection with an "unexpected_message" alert.</t>

<t>The presence of padding does not change the overall record size
limitations: the full encoded TLSInnerPlaintext MUST NOT exceed 2^14 + 1
octets. If the maximum fragment length is reduced -- as, for example, by the
record_size_limit extension from <xref target="TLS-Record-Limit"></xref> --
then the reduced limit applies to the full plaintext, including the
content type and padding.</t>

<t>Selecting a padding policy that suggests when and how much to pad is a
complex topic and is beyond the scope of this specification. If the
application-layer protocol on top of TLS has its own padding, it may be
preferable to pad Application Data TLS records within the application
layer.  Padding for encrypted Handshake or Alert records must
still be handled at the TLS layer, though.  Later documents may define
padding selection algorithms or define a padding policy request
mechanism through TLS extensions or some other means.</t>

</section>
<section anchor="limits-on-key-usage" title="Limits on Key Usage">

<t>There are cryptographic limits on the amount of plaintext which can be
safely encrypted under a given set of keys.  <xref target="AEAD-LIMITS"/> provides
an analysis of these limits under the assumption that the underlying
primitive (AES or ChaCha20) has no weaknesses. Implementations SHOULD
do a key update as described in <xref target="key-update"/> prior to reaching these limits.</t>

<t>For AES-GCM, up to 2^24.5 full-size records (about 24 million)
may be encrypted on a given connection while keeping a safety
margin of approximately 2^-57 for Authenticated Encryption (AE) security.
For ChaCha20/Poly1305, the record sequence number would wrap before the
safety limit is reached.</t>

</section>
</section>
<section anchor="alert-protocol" title="Alert Protocol">

<t>TLS provides an Alert content type to indicate closure information
and errors. Like other messages, alert messages are encrypted as
specified by the current connection state.</t>

<t>Alert messages convey a description of the alert and a legacy field
that conveyed the severity level of the message in previous versions of
TLS. Alerts are divided into
two classes: closure alerts and error alerts.  In TLS 1.3, the
severity is implicit in the type of alert
being sent, and the "level" field can safely be ignored. The "close_notify"
alert is used to indicate orderly closure of one direction of the connection.
Upon receiving such an alert, the TLS implementation SHOULD
indicate end-of-data to the application.</t>

<t>Error alerts indicate abortive closure of the
connection (see <xref target="error-alerts"/>). Upon receiving an error alert,
the TLS implementation SHOULD indicate an error to the application and
MUST NOT allow any further data to be sent or received on the
connection.  Servers and clients MUST forget the secret values and
keys established in failed connections, with the exception of
the PSKs associated with session tickets, which SHOULD be discarded if
possible.</t>

<t>All the alerts listed in <xref target="error-alerts"/> MUST be sent with
AlertLevel=fatal and MUST be treated as error alerts
regardless of the AlertLevel in the
message. Unknown Alert types MUST be treated as error alerts.</t>

<t>Note: TLS defines two generic alerts (see <xref target="alert-protocol"/>) to use
upon failure to parse a message. Peers which receive a message which
cannot be parsed according to the syntax (e.g., have a length
extending beyond the message boundary or contain an out-of-range
length) MUST terminate the connection with a "decode_error"
alert. Peers which receive a message which is syntactically correct
but semantically invalid (e.g., a DHE share of p - 1, or an invalid
enum) MUST terminate the connection with an "illegal_parameter" alert.</t>

<figure><artwork><![CDATA[
   enum { warning(1), fatal(2), (255) } AlertLevel;

   enum {
       close_notify(0),
       unexpected_message(10),
       bad_record_mac(20),
       record_overflow(22),
       handshake_failure(40),
       bad_certificate(42),
       unsupported_certificate(43),
       certificate_revoked(44),
       certificate_expired(45),
       certificate_unknown(46),
       illegal_parameter(47),
       unknown_ca(48),
       access_denied(49),
       decode_error(50),
       decrypt_error(51),
       protocol_version(70),
       insufficient_security(71),
       internal_error(80),
       inappropriate_fallback(86),
       user_canceled(90),
       missing_extension(109),
       unsupported_extension(110),
       unrecognized_name(112),
       bad_certificate_status_response(113),
       unknown_psk_identity(115),
       certificate_required(116),
       no_application_protocol(120),
       (255)
   } AlertDescription;

   struct {
       AlertLevel level;
       AlertDescription description;
   } Alert;
]]></artwork></figure>

<section anchor="closure-alerts" title="Closure Alerts">

<t>The client and the server must share knowledge that the connection is
ending in order to avoid a truncation attack.</t>

<t><list style="hanging">
  <t hangText='close_notify:'>
  This alert notifies the recipient that the sender will not send
any more messages on this connection. Any data received after a
closure alert has been received MUST be ignored.</t>
  <t hangText='user_canceled:'>
  This alert notifies the recipient that the sender is canceling the
handshake for some reason unrelated to a protocol failure. If a user
cancels an operation after the handshake is complete, just closing the
connection by sending a "close_notify" is more appropriate. This alert
SHOULD be followed by a "close_notify". This alert generally
has AlertLevel=warning.</t>
</list></t>

<t>Either party MAY initiate a close of its write side of the connection by
sending a "close_notify" alert. Any data received after a closure alert has
been received MUST be ignored. If a transport-level close is received prior
to a "close_notify", the receiver cannot know that all the data that was sent
has been received.</t>

<t>Each party MUST send a "close_notify" alert before closing its write side
of the connection, unless it has already sent some error alert. This
does not have any effect on its read side of the connection. Note that this is
a change from versions of TLS prior to TLS 1.3 in which implementations were
required to react to a "close_notify" by discarding pending writes and
sending an immediate "close_notify" alert of their own. That previous
requirement could cause truncation in the read side. Both parties need not
wait to receive a "close_notify" alert before closing their read side of the
connection, though doing so would introduce the possibility of truncation.</t>

<t>If the application protocol using TLS provides that any data may be carried
over the underlying transport after the TLS connection is closed, the TLS
implementation MUST receive a "close_notify" alert before indicating
end-of-data to the application layer. No part of this
standard should be taken to dictate the manner in which a usage profile for TLS
manages its data transport, including when connections are opened or closed.</t>

<t>Note: It is assumed that closing the write side of a connection reliably
delivers pending data before destroying the transport.</t>

</section>
<section anchor="error-alerts" title="Error Alerts">

<t>Error handling in TLS is very simple. When an
error is detected, the detecting party sends a message to its
peer. Upon transmission or receipt of a fatal alert message, both
parties MUST immediately close the connection.</t>

<t>Whenever an implementation encounters a fatal error condition, it
SHOULD send an appropriate fatal alert and MUST close the connection
without sending or receiving any additional data. In the rest of this
specification, when the phrases "terminate the connection" and "abort the
handshake" are used without a specific alert it means that the
implementation SHOULD send the alert indicated by the descriptions
below. The phrases "terminate the connection with an X alert" and
"abort the handshake with an X alert" mean that the implementation
MUST send alert X if it sends any alert. All alerts defined below in this
section, as well as all unknown alerts, are universally considered fatal as of
TLS 1.3 (see <xref target="alert-protocol"/>). The implementation SHOULD
provide a way to facilitate logging the sending and receiving of alerts.</t>

<t>The following error alerts are defined:</t>

<t><list style="hanging">
  <t hangText='unexpected_message:'>
  An inappropriate message (e.g., the wrong handshake message, premature
Application Data, etc.) was received. This alert should never be
observed in communication between proper implementations.</t>
  <t hangText='bad_record_mac:'>
  This alert is returned if a record is received which cannot be
deprotected. Because AEAD algorithms combine decryption and
verification, and also to avoid side-channel attacks,
this alert is used for all deprotection failures.
This alert should never be observed in communication between
proper implementations, except when messages were corrupted
in the network.</t>
  <t hangText='record_overflow:'>
  A TLSCiphertext record was received that had a length more than
2^14 + 256 bytes, or a record decrypted to a TLSPlaintext record
with more than 2^14 bytes (or some other negotiated limit).
This alert should never be observed in communication between
proper implementations, except when messages were corrupted
in the network.</t>
  <t hangText='handshake_failure:'>
  Receipt of a "handshake_failure" alert message indicates that the
sender was unable to negotiate an acceptable set of security
parameters given the options available.</t>
  <t hangText='bad_certificate:'>
  A certificate was corrupt, contained signatures that did not
verify correctly, etc.</t>
  <t hangText='unsupported_certificate:'>
  A certificate was of an unsupported type.</t>
  <t hangText='certificate_revoked:'>
  A certificate was revoked by its signer.</t>
  <t hangText='certificate_expired:'>
  A certificate has expired or is not currently valid.</t>
  <t hangText='certificate_unknown:'>
  Some other (unspecified) issue arose in processing the
certificate, rendering it unacceptable.</t>
  <t hangText='illegal_parameter:'>
  A field in the handshake was incorrect or inconsistent with
other fields. This alert is used for errors which conform to
the formal protocol syntax but are otherwise incorrect.</t>
  <t hangText='unknown_ca:'>
  A valid certificate chain or partial chain was received, but the
certificate was not accepted because the CA certificate could not
be located or could not be matched with a known trust anchor.</t>
  <t hangText='access_denied:'>
  A valid certificate or PSK was received, but when access control was
applied, the sender decided not to proceed with negotiation.</t>
  <t hangText='decode_error:'>
  A message could not be decoded because some field was out of the
specified range or the length of the message was incorrect.
This alert is used for errors where the message does not conform
to the formal protocol syntax.
This alert should never be observed in communication between
proper implementations, except when messages were corrupted
in the network.</t>
  <t hangText='decrypt_error:'>
  A handshake (not record layer) cryptographic operation failed, including being unable
to correctly verify a signature or validate a Finished message
or a PSK binder.</t>
  <t hangText='protocol_version:'>
  The protocol version the peer has attempted to negotiate is
recognized but not supported (see <xref target="backward-compatibility"/>).</t>
  <t hangText='insufficient_security:'>
  Returned instead of "handshake_failure" when a negotiation has
failed specifically because the server requires parameters more
secure than those supported by the client.</t>
  <t hangText='internal_error:'>
  An internal error unrelated to the peer or the correctness of the
protocol (such as a memory allocation failure) makes it impossible
to continue.</t>
  <t hangText='inappropriate_fallback:'>
  Sent by a server in response to an invalid connection retry
attempt from a client (see <xref target="RFC7507"/>).</t>
  <t hangText='missing_extension:'>
  Sent by endpoints that receive a handshake message not
containing an extension that is mandatory to send for the offered TLS version
or other negotiated parameters.</t>
  <t hangText='unsupported_extension:'>
  Sent by endpoints receiving any handshake message containing
an extension known to be prohibited for inclusion in the given handshake
message, or including any extensions in a ServerHello or Certificate not first
offered in the corresponding ClientHello.</t>
  <t hangText='unrecognized_name:'>
  Sent by servers when no server exists identified by the name
provided by the client via the "server_name" extension
(see <xref target="RFC6066"/>).</t>
  <t hangText='bad_certificate_status_response:'>
  Sent by clients when an invalid or unacceptable OCSP response
is provided by the server via the "status_request" extension
(see <xref target="RFC6066"/>).</t>
  <t hangText='unknown_psk_identity:'>
  Sent by servers when PSK key establishment is desired but no
acceptable PSK identity is provided by the client. Sending this alert
is OPTIONAL; servers MAY instead choose to send a "decrypt_error"
alert to merely indicate an invalid PSK identity.</t>
  <t hangText='certificate_required:'>
  Sent by servers when a client certificate is desired but none
was provided by the client.</t>
  <t hangText='no_application_protocol:'>
  Sent by servers when a client
"application_layer_protocol_negotiation" extension advertises only protocols
that the server does not support (see <xref target="RFC7301"/>).</t>
</list></t>

<t>New Alert values are assigned by IANA as described in <xref target="iana-considerations"/>.</t>

</section>
</section>
<section anchor="cryptographic-computations" title="Cryptographic Computations">

<t>The TLS handshake establishes one or more input secrets which
are combined to create the actual working keying material, as detailed
below. The key derivation process incorporates both the input secrets
and the handshake transcript. Note that because the handshake
transcript includes the random values from the Hello messages,
any given handshake will have different traffic secrets, even
if the same input secrets are used, as is the case when
the same PSK is used for multiple connections.</t>

<section anchor="key-schedule" title="Key Schedule">

<t>The key derivation process makes use of the HKDF-Extract and
HKDF&nbhy;Expand functions as defined for HKDF <xref target="RFC5869"/>, as
well as the functions defined below:</t>

<figure><artwork><![CDATA[
    HKDF-Expand-Label(Secret, Label, Context, Length) =
         HKDF-Expand(Secret, HkdfLabel, Length)

    Where HkdfLabel is specified as:

    struct {
        uint16 length = Length;
        opaque label<7..255> = "tls13 " + Label;
        opaque context<0..255> = Context;
    } HkdfLabel;

    Derive-Secret(Secret, Label, Messages) =
         HKDF-Expand-Label(Secret, Label,
                           Transcript-Hash(Messages), Hash.length)
]]></artwork></figure>

<t>The Hash function used by Transcript-Hash and HKDF is the cipher suite hash
algorithm. Hash.length is its output length in bytes. Messages is the
concatenation of the indicated handshake messages, including the handshake
message type and length fields, but not including record layer headers. Note
that in some cases a zero-length Context (indicated by "") is passed to
HKDF-Expand-Label.  The labels specified in this document are all
ASCII strings and do not include a trailing NUL byte.</t>

<t>Note: With common hash functions, any label longer than 12 characters
requires an additional iteration of the hash function to compute.
The labels in this specification have all been chosen to fit within
this limit.</t>

<t>Keys are derived from two input secrets using
the HKDF-Extract and Derive-Secret functions. The general pattern
for adding a new secret is to use HKDF-Extract with the Salt
being the current secret state and the Input Keying Material (IKM) being
the new secret to be added. In this version of TLS 1.3, the two
input secrets are:</t>

<t><list style="symbols">
  <t>PSK (a pre-shared key established externally or derived from
the resumption_master_secret value from a previous connection)</t>
  <t>(EC)DHE shared secret (<xref target="ecdhe-shared-secret-calculation"/>)</t>
</list></t>

<t>This produces a full key derivation schedule shown in the diagram below.
In this diagram, the following formatting conventions apply:</t>

<t><list style="symbols">
  <t>HKDF-Extract is drawn as taking the Salt argument from the top and
the IKM argument from the left, with its output to the bottom and
the name of the output on the right.</t>
  <t>Derive-Secret's Secret argument is indicated by the incoming
arrow. For instance, the Early Secret is the Secret for
generating the client_early_traffic_secret.</t>
  <t>"0" indicates a string of Hash.length bytes set to zero.</t>
</list></t>

<figure><artwork><![CDATA[
             0
             |
             v
   PSK ->  HKDF-Extract = Early Secret
             |
             +-----> Derive-Secret(.,
             |                     "ext binder" |
             |                     "res binder",
             |                     "")
             |                     = binder_key
             |
             +-----> Derive-Secret(., "c e traffic",
             |                     ClientHello)
             |                     = client_early_traffic_secret
             |
             +-----> Derive-Secret(., "e exp master",
             |                     ClientHello)
             |                     = early_exporter_master_secret
             v
       Derive-Secret(., "derived", "")
             |
             v
(EC)DHE -> HKDF-Extract = Handshake Secret
             |
             +-----> Derive-Secret(., "c hs traffic",
             |                     ClientHello...ServerHello)
             |                     = client_handshake_traffic_secret
             |
             +-----> Derive-Secret(., "s hs traffic",
             |                     ClientHello...ServerHello)
             |                     = server_handshake_traffic_secret
             v
       Derive-Secret(., "derived", "")
             |
             v
  0 -> HKDF-Extract = Master Secret
             |
             +-----> Derive-Secret(., "c ap traffic",
             |                     ClientHello...server Finished)
             |                     = client_application_traffic_secret_0
             |
             +-----> Derive-Secret(., "s ap traffic",
             |                     ClientHello...server Finished)
             |                     = server_application_traffic_secret_0
             |
             +-----> Derive-Secret(., "exp master",
             |                     ClientHello...server Finished)
             |                     = exporter_master_secret
             |
             +-----> Derive-Secret(., "res master",
                                   ClientHello...client Finished)
                                   = resumption_master_secret
]]></artwork></figure>

<t>The general pattern here is that the secrets shown down the left side
of the diagram are just raw entropy without context, whereas the
secrets down the right side include Handshake Context and therefore
can be used to derive working keys without additional context.
Note that the different
calls to Derive-Secret may take different Messages arguments,
even with the same secret. In a 0-RTT exchange, Derive&nbhy;Secret is
called with four distinct transcripts; in a 1&nbhy;RTT&nbhy;only exchange,
it is called with three distinct transcripts.</t>

<t>If a given secret is not available, then the 0-value consisting of
a string of Hash.length bytes set to zeros is used.  Note that this does not
mean skipping rounds, so if PSK is not in use, Early Secret will still be
HKDF-Extract(0, 0). For the computation of the binder_secret, the label is
"ext binder" for external PSKs (those provisioned outside of TLS)
and "res binder" for resumption PSKs (those provisioned as the resumption
master secret of a previous handshake). The different labels prevent
the substitution of one type of PSK for the other.</t>

<t>There are multiple potential Early Secret values, depending on
which PSK the server ultimately selects. The client will need to compute
one for each potential PSK; if no PSK is selected, it will then need to
compute the Early Secret corresponding to the zero PSK.</t>

<t>Once all the values which are to be derived from a given secret have
been computed, that secret SHOULD be erased.</t>

</section>
<section anchor="updating-traffic-keys" title="Updating Traffic Secrets">

<t>Once the handshake is complete, it is possible for either side to
update its sending traffic keys using the KeyUpdate handshake message
defined in <xref target="key-update"/>.  The next generation of traffic keys
is computed by generating client_/server_application_traffic_secret_N+1 from
client_/server_application_traffic_secret_N as described in
this section and then re-deriving the traffic keys as described in
<xref target="traffic-key-calculation"/>.</t>

<t>The next-generation application_traffic_secret is computed as:</t>

<figure><artwork><![CDATA[
    application_traffic_secret_N+1 =
        HKDF-Expand-Label(application_traffic_secret_N,
                          "traffic upd", "", Hash.length)
]]></artwork></figure>

<t>Once client_/server_application_traffic_secret_N+1 and its associated
traffic keys have been computed, implementations SHOULD delete
client_/server_application_traffic_secret_N and its associated traffic keys.</t>

</section>
<section anchor="traffic-key-calculation" title="Traffic Key Calculation">

<t>The traffic keying material is generated from the following input values:</t>

<t><list style="symbols">
  <t>A secret value</t>
  <t>A purpose value indicating the specific value being generated</t>
  <t>The length of the key being generated</t>
</list></t>

<t>The traffic keying material is generated from an input traffic secret value using:</t>

<figure><artwork><![CDATA[
   [sender]_write_key = HKDF-Expand-Label(Secret, "key", "", key_length)
   [sender]_write_iv  = HKDF-Expand-Label(Secret, "iv", "", iv_length)
]]></artwork></figure>

<t>[sender] denotes the sending side. The value of Secret for each record type
is shown in the table below.</t>

<texttable>
      <ttcol align='left'>Record Type</ttcol>
      <ttcol align='left'>Secret</ttcol>
      <c>0-RTT Application</c>
      <c>client_early_traffic_secret</c>
      <c>Handshake</c>
      <c>[sender]_handshake_traffic_secret</c>
      <c>Application Data</c>
      <c>[sender]_application_traffic_secret_N</c>
</texttable>

<t>All the traffic keying material is recomputed whenever the
underlying Secret changes (e.g., when changing from the handshake to
Application Data keys or upon a key update).</t>

</section>
<section anchor="ecdhe-shared-secret-calculation" title="(EC)DHE Shared Secret Calculation">

<section anchor="finite-field-diffie-hellman" title="Finite Field Diffie-Hellman">

<t>For finite field groups, a conventional Diffie-Hellman
<xref target="DH76"/> computation is performed.
The negotiated key (Z) is converted to a byte string by encoding in big-endian and
left-padded with zeros up to the size of the prime. This byte string is used as the
shared secret in the key schedule as specified above.</t>

<t>Note that this construction differs from previous versions of TLS which remove
leading zeros.</t>

</section>
<section anchor="elliptic-curve-diffie-hellman" title="Elliptic Curve Diffie-Hellman">

<t>For secp256r1, secp384r1, and secp521r1, ECDH calculations (including
parameter and key generation as well as the shared secret calculation) are
performed according to <xref target="IEEE1363"/> using the ECKAS-DH1
scheme with the identity map as the key derivation function (KDF), so that
the shared secret is the x-coordinate of the ECDH shared secret elliptic curve
point represented as an octet string.  Note that this octet string ("Z" in
IEEE 1363 terminology) as output by FE2OSP (the Field Element to Octet String
Conversion Primitive) has constant length for any given field; leading zeros
found in this octet string MUST NOT be truncated.</t>

<t>(Note that this use of the identity KDF is a technicality.  The
complete picture is that ECDH is employed with a non-trivial KDF
because TLS does not directly use this secret for anything
other than for computing other secrets.)</t>

<t>For X25519 and X448, the ECDH calculations are as follows:</t>

<t><list style="symbols">
  <t>The public key to put into the KeyShareEntry.key_exchange structure is the
result of applying the ECDH scalar multiplication function to the secret key
of appropriate length (into scalar input) and the standard public basepoint
(into u-coordinate point input).</t>
  <t>The ECDH shared secret is the result of applying the ECDH scalar multiplication
function to the secret key (into scalar input) and the peer's public key
(into u-coordinate point input). The output is used raw, with no processing.</t>
</list></t>

<t>For these curves, implementations SHOULD use the approach specified
in <xref target="RFC7748"/> to calculate the Diffie-Hellman shared secret.
Implementations MUST check whether the computed Diffie-Hellman
shared secret is the all-zero value and abort if so, as described in
Section&nbsp;6 of <xref target="RFC7748"/>. If implementors use an alternative
implementation of these elliptic curves, they SHOULD perform the
additional checks specified in Section&nbsp;7 of <xref target="RFC7748"/>.</t>

</section>
</section>
<section anchor="exporters" title="Exporters">

<t><xref target="RFC5705"/> defines keying material exporters for TLS in terms of the TLS
pseudorandom function (PRF). This document replaces the PRF with HKDF, thus
requiring a new construction. The exporter interface remains the same.</t>

<t>The exporter value is computed as:</t>

<figure><artwork><![CDATA[
TLS-Exporter(label, context_value, key_length) =
    HKDF-Expand-Label(Derive-Secret(Secret, label, ""),
                      "exporter", Hash(context_value), key_length)
]]></artwork></figure>

<t>Where Secret is either the early_exporter_master_secret or the
exporter_master_secret.  Implementations MUST use the exporter_master_secret unless
explicitly specified by the application. The early_exporter_master_secret is
defined for use in settings where an exporter is needed for 0-RTT data.
A separate interface for the early exporter is RECOMMENDED; this avoids
the exporter user accidentally using an early exporter when a regular
one is desired or vice versa.</t>

<t>If no context is provided, the context_value is zero length. Consequently,
providing no context computes the same value as providing an empty context.
This is a change from previous versions of TLS where an empty context produced
a different output than an absent context. As of this document's publication, no
allocated exporter label is used both with and without a context. Future
specifications MUST NOT define a use of exporters that permit both an empty
context and no context with the same label. New uses of exporters SHOULD provide
a context in all exporter computations, though the value could be empty.</t>

<t>Requirements for the format of exporter labels are defined in
Section&nbsp;4 of <xref target="RFC5705"/>.</t>

</section>
</section>
<section anchor="anti-replay" title="0-RTT and Anti-Replay">

<t>As noted in <xref target="zero-rtt-data"/> and <xref target="replay-0rtt"/>, TLS does not provide inherent replay
protections for 0-RTT data. There are two potential threats to be
concerned with:</t>

<t><list style="symbols">
  <t>Network attackers who mount a replay attack by simply duplicating a
flight of 0-RTT data.</t>
  <t>Network attackers who take advantage of client retry behavior
to arrange for the server to receive multiple copies of an application
message. This threat already exists
to some extent because clients that value robustness respond to network errors by
attempting to retry requests. However, 0-RTT adds an additional
dimension for any server system which does not maintain globally
consistent server state. Specifically, if a server system has
multiple zones where tickets from zone A will not be accepted in
zone B, then an attacker can duplicate a ClientHello and early
data intended for A to both A and B. At A, the data will
be accepted in 0-RTT, but at B the server will reject 0-RTT
data and instead force a full handshake. If the attacker blocks
the ServerHello from A, then the client will complete the
handshake with B and probably retry the request, leading to duplication on
the server system as a whole.</t>
</list></t>

<t>The first class of attack can be prevented by sharing state to guarantee that
the 0-RTT data is accepted at most once.  Servers SHOULD provide that level of
replay safety by implementing one of the methods described in this section or
by equivalent means.  It is understood, however, that due to operational
concerns not all deployments will maintain state at that level.  Therefore, in
normal operation, clients will not know which, if any, of these mechanisms
servers actually implement and hence MUST only send early data which they deem
safe to be replayed.</t>

<t>In addition to the direct effects of replays, there is a class of attacks where
even operations normally considered idempotent could be exploited by a large
number of replays (timing attacks, resource limit exhaustion and others,
as described in <xref target="replay-0rtt"/>).  Those can be mitigated by ensuring that every
0-RTT payload can be replayed only a limited number of times.  The server MUST
ensure that any instance of it (be it a machine, a thread, or any other entity
within the relevant serving infrastructure) would accept 0-RTT for the same
0-RTT handshake at most once; this limits the number of replays to the number of
server instances in the deployment.  Such a guarantee can be accomplished by
locally recording data from recently received ClientHellos and rejecting
repeats, or by any other method that provides the same or a stronger guarantee.
The "at most once per server instance" guarantee is a minimum requirement;
servers SHOULD limit 0-RTT replays further when feasible.</t>

<t>The second class of attack cannot be prevented at the TLS layer and
MUST be dealt with by any application. Note that any application whose
clients implement any kind of retry behavior already needs to
implement some sort of anti-replay defense.</t>

<section anchor="single-use-tickets" title="Single-Use Tickets">

<t>The simplest form of anti-replay defense is for the server to only
allow each session ticket to be used once. For instance, the server
can maintain a database of all outstanding valid tickets, deleting each
ticket from the database as it is used. If an unknown ticket is
provided, the server would then fall back to a full handshake.</t>

<t>If the tickets are not self-contained but rather are database keys,
and the corresponding PSKs are deleted upon use, then connections established
using PSKs enjoy forward secrecy. This improves security for
all 0-RTT data and PSK usage when PSK is used without (EC)DHE.</t>

<t>Because this mechanism requires sharing the session database between
server nodes in environments with multiple distributed servers,
it may be hard to achieve high rates of successful PSK 0-RTT
connections when compared to self-encrypted tickets. Unlike
session databases, session tickets can successfully do PSK-based
session establishment even without consistent storage, though when
0-RTT is allowed they still require consistent storage for anti-replay
of 0-RTT data, as detailed in the following
section.</t>

</section>
<section anchor="client-hello-recording" title="Client Hello Recording">

<t>An alternative form of anti-replay is to record a unique value derived
from the ClientHello (generally either the random value or the PSK
binder) and reject duplicates. Recording all ClientHellos causes state
to grow without bound, but a server can instead record ClientHellos within
a given time window and use the "obfuscated_ticket_age" to ensure that
tickets aren't reused outside that window.</t>

<t>In order to implement this, when a ClientHello is received, the server
first verifies the PSK binder as described in
<xref target="pre-shared-key-extension"/>. It then computes the
expected_arrival_time as described in the next section and rejects
0-RTT if it is outside the recording window, falling back to the
1-RTT handshake.</t>

<t>If the expected_arrival_time is in the window, then the server
checks to see if it has recorded a matching ClientHello. If one
is found, it either aborts the handshake with an "illegal_parameter" alert
or accepts the PSK but rejects 0-RTT. If no matching ClientHello
is found, then it accepts 0-RTT and then stores the ClientHello for
as long as the expected_arrival_time is inside the window.
Servers MAY also implement data stores with false positives, such as
Bloom filters, in which case they MUST respond to apparent replay by
rejecting 0-RTT but MUST NOT abort the handshake.</t>

<t>The server MUST derive the storage key only from validated sections
of the ClientHello. If the ClientHello contains multiple
PSK identities, then an attacker can create multiple ClientHellos
with different binder values for the less-preferred identity on the
assumption that the server will not verify it (as recommended
by <xref target="pre-shared-key-extension"/>). I.e., if the
client sends PSKs A and B but the server prefers A, then the
attacker can change the binder for B without affecting the binder
for A. If the binder for B is part of the storage key,
then this ClientHello will not appear as a duplicate,
which will cause the ClientHello to be accepted, and may
cause side effects such as replay cache pollution, although any
0-RTT data will not be decryptable because it will use different
keys. If the validated binder or the ClientHello.random is used as
the storage key, then this attack is not possible.</t>

<t>Because this mechanism does not require storing all outstanding
tickets, it may be easier to implement in distributed systems with
high rates of resumption and 0-RTT, at the cost of potentially
weaker anti-replay defense because of the difficulty of reliably
storing and retrieving the received ClientHello messages.
In many such systems, it is impractical to have globally
consistent storage of all the received ClientHellos.
In this case, the best anti-replay protection is provided by
having a single storage zone be
authoritative for a given ticket and refusing 0-RTT for that
ticket in any other zone. This approach prevents simple
replay by the attacker because only one zone will accept
0-RTT data. A weaker design is to implement separate storage for
each zone but allow 0-RTT in any zone. This approach limits
the number of replays to once per zone. Application message
duplication of course remains possible with either design.</t>

<t>When implementations are freshly started, they SHOULD
reject 0-RTT as long as any portion of their recording window overlaps
the startup time. Otherwise, they run the risk of accepting
replays which were originally sent during that period.</t>

<t>Note: If the client's clock is running much faster than the server's,
then a ClientHello may be received that is outside the window in the
future, in which case it might be accepted for 1-RTT, causing a client retry,
and then acceptable later for 0-RTT. This is another variant of
the second form of attack described above.</t>

</section>
<section anchor="freshness-checks" title="Freshness Checks">

<t>Because the ClientHello indicates the time at which the client sent
it, it is possible to efficiently determine whether a ClientHello was
likely sent reasonably recently and only accept 0-RTT for such a
ClientHello, otherwise falling back to a 1-RTT handshake.
This is necessary for the ClientHello storage mechanism
described in <xref target="client-hello-recording"/> because otherwise the
server needs to store an unlimited number of ClientHellos and is a useful
optimization for self-contained single-use tickets because it allows efficient
rejection of ClientHellos which cannot be used for 0-RTT.</t>

<t>In order to implement this mechanism, a server needs to store the time
that the server generated the session ticket, offset by an estimate of
the round-trip time between client and server. I.e.,</t>

<figure><artwork><![CDATA[
    adjusted_creation_time = creation_time + estimated_RTT
]]></artwork></figure>

<t>This value can be encoded in the ticket, thus avoiding the need to
keep state for each outstanding ticket. The server can determine the
client's view of the age of the ticket by subtracting the ticket's
"ticket_age_add" value from the "obfuscated_ticket_age" parameter in
the client's "pre_shared_key" extension. The server can determine the
expected_arrival_time of the ClientHello as:</t>

<figure><artwork><![CDATA[
    expected_arrival_time = adjusted_creation_time + clients_ticket_age
]]></artwork></figure>

<t>When a new ClientHello is received, the expected_arrival_time is then
compared against the current server wall clock time and if they differ
by more than a certain amount, 0-RTT is rejected, though the 1-RTT
handshake can be allowed to complete.</t>

<t>There are several potential sources of error that might cause
mismatches between the expected_arrival_time and the measured
time. Variations in client and server clock
rates are likely to be minimal, though potentially the absolute
times may be off by large values.
Network propagation delays are the most likely causes of
a mismatch in legitimate values for elapsed time.  Both the
NewSessionTicket and ClientHello messages might be retransmitted and
therefore delayed, which might be hidden by TCP. For clients
on the Internet, this implies windows
on the order of ten seconds to account for errors in clocks and
variations in measurements; other deployment scenarios
may have different needs. Clock skew distributions are not
symmetric, so the optimal tradeoff may involve an asymmetric range
of permissible mismatch values.</t>

<t>Note that freshness checking alone is not sufficient to prevent
replays because it does not detect them during the error window,
which -- depending on bandwidth and system capacity -- could include
billions of replays in real-world settings. In addition, this
freshness checking is only done at the time the ClientHello is
received and not when subsequent early Application Data records are
received. After early data is accepted, records may continue to be
streamed to the server over a longer time period.</t>

</section>
</section>
<section anchor="compliance-requirements" title="Compliance Requirements">

<section anchor="mandatory-to-implement-cipher-suites" title="Mandatory-to-Implement Cipher Suites">

<t>In the absence of an application profile standard specifying otherwise, a
TLS-compliant application MUST implement the TLS_AES_128_GCM_SHA256 <xref
target="GCM"></xref> cipher suite and SHOULD implement the
TLS_AES_256_GCM_SHA384 <xref target="GCM"></xref> and
TLS_CHACHA20_POLY1305_SHA256 <xref target="RFC7539"></xref> cipher suites (see
<xref target="cipher-suites"/>).</t>

<t>A TLS-compliant application MUST support digital signatures with
rsa_pkcs1_sha256 (for certificates), rsa_pss_rsae_sha256 (for
CertificateVerify and certificates), and ecdsa_secp256r1_sha256. A
TLS-compliant application MUST support key exchange with secp256r1
(NIST P-256) and SHOULD support key exchange with X25519 <xref
target="RFC7748"/>.</t>


</section>
<section anchor="mti-extensions" title="Mandatory-to-Implement Extensions">

<t>In the absence of an application profile standard specifying otherwise, a
TLS-compliant application MUST implement the following TLS extensions:</t>

<t><list style="symbols">
  <t>Supported Versions     ("supported_versions"; <xref target="supported-versions"/>)</t>
  <t>Cookie                 ("cookie"; <xref target="cookie"/>)</t>
  <t>Signature Algorithms   ("signature_algorithms"; <xref target="signature-algorithms"/>)</t>
  <t>Signature Algorithms Certificate  ("signature_algorithms_cert"; <xref target="signature-algorithms"/>)</t>
  <t>Negotiated Groups      ("supported_groups"; <xref target="negotiated-groups"/>)</t>
  <t>Key Share              ("key_share"; <xref target="key-share"/>)</t>
  <t>Server Name Indication ("server_name"; Section&nbsp;3 of <xref target="RFC6066"/>)</t>
</list></t>

<t>All implementations MUST send and use these extensions when offering
applicable features:</t>

<t><list style="symbols">
  <t>"supported_versions"   is REQUIRED for all ClientHello, ServerHello, and HelloRetryRequest messages.</t>
  <t>"signature_algorithms" is REQUIRED for certificate authentication.</t>
  <t>"supported_groups"     is REQUIRED for ClientHello messages using
                        DHE or ECDHE key exchange.</t>
  <t>"key_share"            is REQUIRED for DHE or ECDHE key exchange.</t>
  <t>"pre_shared_key"       is REQUIRED for PSK key agreement.</t>
  <t>"psk_key_exchange_modes" is REQUIRED for PSK key agreement.</t>
</list></t>

<t>A client is considered to be attempting to negotiate using this
specification if the ClientHello contains a "supported_versions"
extension with 0x0304 contained in its body.
Such a ClientHello message MUST meet the following requirements:</t>

<t><list style="symbols">
  <t>If not containing a "pre_shared_key" extension, it MUST contain both
a "signature_algorithms" extension and a "supported_groups" extension.</t>
  <t>If containing a "supported_groups" extension, it MUST also contain a
"key_share" extension, and vice versa. An empty KeyShare.client_shares
vector is permitted.</t>
</list></t>

<t>Servers receiving a ClientHello which does not conform to these
requirements MUST abort the handshake with a "missing_extension"
alert.</t>

<t>Additionally, all implementations MUST support the use of the "server_name"
extension with applications capable of using it.
Servers MAY require clients to send a valid "server_name" extension.
Servers requiring this extension SHOULD respond to a ClientHello
lacking a "server_name" extension by terminating the connection with a
"missing_extension" alert.</t>

</section>
<section anchor="protocol-invariants" title="Protocol Invariants">

<t>This section describes invariants that TLS endpoints and middleboxes MUST
follow. It also applies to earlier versions of TLS.</t>

<t>TLS is designed to be securely and compatibly extensible. Newer clients or
servers, when communicating with newer peers, should negotiate the
most preferred common parameters. The TLS handshake provides downgrade
protection: Middleboxes passing traffic between a newer client and
newer server without terminating TLS should be unable to influence the
handshake (see <xref target="security-handshake"/>). At the same time, deployments
update at different rates, so a newer client or server MAY continue to
support older parameters, which would allow it to interoperate with
older endpoints.</t>

<t>For this to work, implementations MUST correctly handle extensible fields:</t>

<t><list style="symbols">
  <t>A client sending a ClientHello MUST support all parameters advertised in
it. Otherwise, the server may fail to interoperate by selecting one of those
parameters.</t>
  <t>A server receiving a ClientHello MUST correctly ignore all unrecognized
cipher suites, extensions, and other parameters. Otherwise, it may fail to
interoperate with newer clients. In TLS&nbsp;1.3, a client receiving a
CertificateRequest or NewSessionTicket MUST also ignore all unrecognized
extensions.</t>
  <t>A middlebox which terminates a TLS connection MUST behave as a compliant
TLS server (to the original client), including having a certificate
which the client is willing to accept, and also as a compliant TLS client (to
the original server), including verifying the original server's certificate.
In particular, it MUST generate its own ClientHello
containing only parameters it understands, and it MUST generate a fresh
ServerHello random value, rather than forwarding the endpoint's value.  <vspace blankLines='1'/>
Note that TLS's protocol requirements and security analysis only apply to the
two connections separately. Safely deploying a TLS terminator requires
additional security considerations which are beyond the scope of this document.</t>
  <t>A middlebox which forwards ClientHello parameters it does not understand
MUST NOT process any messages beyond that ClientHello. It MUST forward all
subsequent traffic unmodified. Otherwise, it may fail to interoperate with
newer clients and servers.  <vspace blankLines='1'/>
Forwarded ClientHellos may contain advertisements for features not supported
by the middlebox, so the response may include future TLS additions the
middlebox does not recognize. These additions MAY change any message beyond
the ClientHello arbitrarily. In particular, the values sent in the ServerHello
might change, the ServerHello format might change, and the TLSCiphertext format
might change.</t>
</list></t>

<t>The design of TLS 1.3 was constrained by widely deployed non&nbhy;compliant
TLS middleboxes (see <xref target="middlebox"/>); however, it does not relax
the invariants. Those middleboxes continue to be non&nbhy;compliant.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Security issues are discussed throughout this memo, especially in
Appendices&nbsp;<xref target="implementation-notes" format="counter"/>,
<xref target="backward-compatibility" format="counter"/>, and
<xref target="security-analysis" format="counter"/>.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document uses several registries that were originally created in
<xref target="RFC4346"/> and updated in <xref target="RFC8447"/>.
IANA has updated these to reference this document.
The registries and their allocation policies are below:</t>

<t><list style="symbols">
  <t>TLS Cipher Suite Registry: values with the first byte in the range
0-254 (decimal) are assigned via Specification Required <xref
target="RFC8126"/>. Values with the first byte 255 (decimal) are reserved for
Private Use <xref target="RFC8126"/>.  <vspace blankLines='1'/>
IANA has added the cipher suites listed in <xref target="cipher-suites"/> to
the registry. The "Value" and "Description" columns are taken from the table.
The "DTLS-OK" and "Recommended" columns are both marked as "Y" for each new
cipher suite.</t>

  <t>TLS ContentType Registry: Future values are allocated via
Standards Action <xref target="RFC8126"/>.</t>
  <t>TLS Alert Registry: Future values are allocated via Standards
Action <xref target="RFC8126"/>. IANA has updated this registry
to include values for "missing_extension" and "certificate_required".  The
"DTLS-OK" column is marked as "Y" for each new alert.</t>
  <t>TLS HandshakeType Registry: Future values are allocated via
Standards Action <xref target="RFC8126"/>. IANA has updated this registry
to rename item 4 from "NewSessionTicket" to "new_session_ticket"
and to add the "hello_retry_request_RESERVED", "encrypted_extensions",
"end_of_early_data", "key_update", and "message_hash" values.  The "DTLS-OK"
column is marked as "Y" for each of these additions.</t>
</list></t>

<t>This document also uses the TLS ExtensionType Values registry originally created
in <xref target="RFC4366"/>. IANA has updated it to reference this document.
Changes to the registry follow:</t>

<t><list style="symbols">
  <t>IANA has updated the registration policy as follows:
<vspace blankLines='1'/>
Values with the first byte in the range 0-254 (decimal) are assigned
via Specification Required <xref target="RFC8126"></xref>.  Values with the
first byte 255 (decimal) are reserved for Private Use <xref
target="RFC8126"></xref>.</t>
  <t>IANA has updated this registry to include the
"key_share", "pre_shared_key", "psk_key_exchange_modes",
"early_data", "cookie", "supported_versions",
"certificate_authorities", "oid_filters", "post_handshake_auth", and
"signature_algorithms_cert" extensions with the values defined in this
document and the "Recommended" value of "Y".</t>
  <t>IANA has updated this registry to include a
"TLS&nbsp;1.3" column which lists the messages in which the extension may
appear. This column has been initially populated from the table in <xref
target="extensions"/>, with any extension not listed there marked as "-" to
indicate that it is not used by TLS 1.3.</t>
</list></t>

<t>In addition, this document defines two new registries that are maintained
by IANA:</t>
<t><list style="symbols">
  <t>TLS SignatureScheme registry: Values with the first byte in the range
0-253 (decimal) are assigned via Specification Required <xref
target="RFC8126"/>. Values with the first byte 254 or 255 (decimal) are
reserved for Private Use <xref target="RFC8126"/>. Values with the first byte
in the range 0-6 or with the second byte in the range 0-3 that are not
currently allocated are reserved for backward compatibility.
This registry has a "Recommended" column.
The registry has been initially populated with the values described in
<xref target="signature-algorithms"/>. The following values are marked as
"Recommended": ecdsa_secp256r1_sha256, ecdsa_secp384r1_sha384,
rsa_pss_rsae_sha256, rsa_pss_rsae_sha384, rsa_pss_rsae_sha512,
rsa_pss_pss_sha256, rsa_pss_pss_sha384, rsa_pss_pss_sha512, and ed25519.
The "Recommended" column is assigned a value of "N" unless explicitly
requested, and only IETF Standards Track RFCs can request a value of "Y".
</t>

  <t>TLS PskKeyExchangeMode registry: Values in the
range 0-253 (decimal) are assigned via Specification Required
<xref target="RFC8126"></xref>.  Values with the first byte 254 or 255
(decimal) are reserved for Private Use <xref target="RFC8126"></xref>.  This
registry has a "Recommended" column.  The registry has been initially
populated with psk_ke (0) and psk_dhe_ke (1).  Both are marked as
"Recommended".
The "Recommended" column is assigned a value of "N" unless explicitly
requested, and only IETF Standards Track RFCs can request a value of "Y".</t>
</list></t>

</section>

  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="ECDSA" >
  <front>
    <title>Public Key Cryptography for the Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
    <author >
      <organization>American National Standards Institute</organization>
    </author>
    <date year="2005" month="November"/>
  </front>
  <seriesInfo name="ANSI" value="ANS X9.62-2005"/>
</reference>

<reference  anchor='RFC2104' target='https://www.rfc-editor.org/info/rfc2104'>
<front>
<title>HMAC: Keyed-Hashing for Message Authentication</title>
<author initials='H.' surname='Krawczyk' fullname='H. Krawczyk'><organization /></author>
<author initials='M.' surname='Bellare' fullname='M. Bellare'><organization /></author>
<author initials='R.' surname='Canetti' fullname='R. Canetti'><organization /></author>
<date year='1997' month='February' />
</front>
<seriesInfo name='RFC' value='2104'/>
<seriesInfo name='DOI' value='10.17487/RFC2104'/>
</reference>

<reference  anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference  anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'><organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<date year='2008' month='May' />
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>

<reference  anchor='RFC5869' target='https://www.rfc-editor.org/info/rfc5869'>
<front>
<title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
<author initials='H.' surname='Krawczyk' fullname='H. Krawczyk'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2010' month='May' />
</front>
<seriesInfo name='RFC' value='5869'/>
<seriesInfo name='DOI' value='10.17487/RFC5869'/>
</reference>

<reference  anchor='RFC6066' target='https://www.rfc-editor.org/info/rfc6066'>
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<date year='2011' month='January' />
</front>
<seriesInfo name='RFC' value='6066'/>
<seriesInfo name='DOI' value='10.17487/RFC6066'/>
</reference>

<reference  anchor='RFC6655' target='https://www.rfc-editor.org/info/rfc6655'>
<front>
<title>AES-CCM Cipher Suites for Transport Layer Security (TLS)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='D.' surname='Bailey' fullname='D. Bailey'><organization /></author>
<date year='2012' month='July' />
</front>
<seriesInfo name='RFC' value='6655'/>
<seriesInfo name='DOI' value='10.17487/RFC6655'/>
</reference>

<reference  anchor='RFC7539' target='https://www.rfc-editor.org/info/rfc7539'>
<front>
<title>ChaCha20 and Poly1305 for IETF Protocols</title>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='May' />
</front>
<seriesInfo name='RFC' value='7539'/>
<seriesInfo name='DOI' value='10.17487/RFC7539'/>
</reference>

<reference  anchor='RFC7748' target='https://www.rfc-editor.org/info/rfc7748'>
<front>
<title>Elliptic Curves for Security</title>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='M.' surname='Hamburg' fullname='M. Hamburg'><organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<date year='2016' month='January' />
</front>
<seriesInfo name='RFC' value='7748'/>
<seriesInfo name='DOI' value='10.17487/RFC7748'/>
</reference>

<reference  anchor='RFC7919' target='https://www.rfc-editor.org/info/rfc7919'>
<front>
<title>Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for Transport Layer Security (TLS)</title>
<author initials='D.' surname='Gillmor' fullname='D. Gillmor'><organization /></author>
<date year='2016' month='August' />
</front>
<seriesInfo name='RFC' value='7919'/>
<seriesInfo name='DOI' value='10.17487/RFC7919'/>
</reference>

<reference  anchor='RFC8032' target='https://www.rfc-editor.org/info/rfc8032'>
<front>
<title>Edwards-Curve Digital Signature Algorithm (EdDSA)</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<author initials='I.' surname='Liusvaara' fullname='I. Liusvaara'><organization /></author>
<date year='2017' month='January' />
</front>
<seriesInfo name='RFC' value='8032'/>
<seriesInfo name='DOI' value='10.17487/RFC8032'/>
</reference>

<reference  anchor='RFC8017' target='https://www.rfc-editor.org/info/rfc8017'>
<front>
<title>PKCS #1: RSA Cryptography Specifications Version 2.2</title>
<author initials='K.' surname='Moriarty' fullname='K. Moriarty' role='editor'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<author initials='J.' surname='Jonsson' fullname='J. Jonsson'><organization /></author>
<author initials='A.' surname='Rusch' fullname='A. Rusch'><organization /></author>
<date year='2016' month='November' />
</front>
<seriesInfo name='RFC' value='8017'/>
<seriesInfo name='DOI' value='10.17487/RFC8017'/>
</reference>

<reference  anchor='RFC8126' target='https://www.rfc-editor.org/info/rfc8126'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'><organization /></author>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<date year='2017' month='June' />
</front>
<seriesInfo name='BCP' value='26'/>
<seriesInfo name='RFC' value='8126'/>
<seriesInfo name='DOI' value='10.17487/RFC8126'/>
</reference>

<reference  anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>

<reference  anchor='RFC5116' target='https://www.rfc-editor.org/info/rfc5116'>
<front>
<title>An Interface and Algorithms for Authenticated Encryption</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<date year='2008' month='January' />
</front>
<seriesInfo name='RFC' value='5116'/>
<seriesInfo name='DOI' value='10.17487/RFC5116'/>
</reference>

<reference anchor="X690" >
  <front>
    <title>Information technology -- ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
    <author >
      <organization>ITU-T</organization>
    </author>
    <date month="November" year="2015"/>
  </front>
  <seriesInfo name="ISO/IEC" value="8825-1:2015"/>
</reference>

<reference anchor="GCM" >
  <front>
    <title>Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC</title>
    <author initials="M." surname="Dworkin">
      <organization></organization>
    </author>
    <date year="2007" month="November"/>
  </front>
  <seriesInfo name="NIST" value="Special Publication 800-38D"/>
  <seriesInfo name="DOI" value="10.6028/NIST.SP.800-38D"/>
</reference>

<reference  anchor='RFC7301' target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>

<reference anchor="SHS" >
  <front>
    <title>Secure Hash Standard (SHS)</title>
    <author initials="Q." surname="Dang" fullname="Quynh H. Dang">
      <organization></organization>
    </author>
    <date year="2015" month="August"/>
  </front>
  <seriesInfo name="National Institute of Standards and Technology" value="report"/>
  <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
</reference>

<reference  anchor='RFC5756' target='https://www.rfc-editor.org/info/rfc5756'>
<front>
<title>Updates for RSAES-OAEP and RSASSA-PSS Algorithm Parameters</title>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<author initials='D.' surname='Brown' fullname='D. Brown'><organization /></author>
<author initials='K.' surname='Yiu' fullname='K. Yiu'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='T.' surname='Polk' fullname='T. Polk'><organization /></author>
<date year='2010' month='January' />
</front>
<seriesInfo name='RFC' value='5756'/>
<seriesInfo name='DOI' value='10.17487/RFC5756'/>
</reference>

<reference  anchor='RFC6962' target='https://www.rfc-editor.org/info/rfc6962'>
<front>
<title>Certificate Transparency</title>
<author initials='B.' surname='Laurie' fullname='B. Laurie'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Kasper' fullname='E. Kasper'><organization /></author>
<date year='2013' month='June' />
</front>
<seriesInfo name='RFC' value='6962'/>
<seriesInfo name='DOI' value='10.17487/RFC6962'/>
</reference>

<reference  anchor='RFC6961' target='https://www.rfc-editor.org/info/rfc6961'>
<front>
<title>The Transport Layer Security (TLS) Multiple Certificate Status Request Extension</title>
<author initials='Y.' surname='Pettersen' fullname='Y. Pettersen'><organization /></author>
<date year='2013' month='June' />
</front>
<seriesInfo name='RFC' value='6961'/>
<seriesInfo name='DOI' value='10.17487/RFC6961'/>
</reference>

<reference  anchor='RFC6960' target='https://www.rfc-editor.org/info/rfc6960'>
<front>
<title>X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP</title>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='M.' surname='Myers' fullname='M. Myers'><organization /></author>
<author initials='R.' surname='Ankney' fullname='R. Ankney'><organization /></author>
<author initials='A.' surname='Malpani' fullname='A. Malpani'><organization /></author>
<author initials='S.' surname='Galperin' fullname='S. Galperin'><organization /></author>
<author initials='C.' surname='Adams' fullname='C. Adams'><organization /></author>
<date year='2013' month='June' />
</front>
<seriesInfo name='RFC' value='6960'/>
<seriesInfo name='DOI' value='10.17487/RFC6960'/>
</reference>

<reference  anchor='RFC7507' target='https://www.rfc-editor.org/info/rfc7507'>
<front>
<title>TLS Fallback Signaling Cipher Suite Value (SCSV) for Preventing Protocol Downgrade Attacks</title>
<author initials='B.' surname='Moeller' fullname='B. Moeller'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='April' />
</front>
<seriesInfo name='RFC' value='7507'/>
<seriesInfo name='DOI' value='10.17487/RFC7507'/>
</reference>

<reference anchor="DH76" >
  <front>
    <title>New directions in cryptography</title>
    <author initials="W." surname="Diffie" fullname="W. Diffie">
      <organization></organization>
    </author>
    <author initials="M." surname="Hellman" fullname="M. Hellman">
      <organization></organization>
    </author>
    <date year="1976" month="November"/>
  </front>
  <seriesInfo name="IEEE Transactions on Information Theory," value="Vol. 22 No. 6, pp. 644-654"/>
  <seriesInfo name="DOI" value="10.1109/TIT.1976.1055638"/>
</reference>

<reference  anchor='RFC5705' target='https://www.rfc-editor.org/info/rfc5705'>
<front>
<title>Keying Material Exporters for Transport Layer Security (TLS)</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='March' />
</front>
<seriesInfo name='RFC' value='5705'/>
<seriesInfo name='DOI' value='10.17487/RFC5705'/>
</reference>

<reference  anchor='RFC6979' target='https://www.rfc-editor.org/info/rfc6979'>
<front>
<title>Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
<author initials='T.' surname='Pornin' fullname='T. Pornin'><organization /></author>
<date year='2013' month='August' />
</front>
<seriesInfo name='RFC' value='6979'/>
<seriesInfo name='DOI' value='10.17487/RFC6979'/>
</reference>

    </references>

    <references title='Informative References'>

<reference  anchor='RFC4086' target='https://www.rfc-editor.org/info/rfc4086'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'><organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'><organization /></author>
<date year='2005' month='June' />
</front>
<seriesInfo name='BCP' value='106'/>
<seriesInfo name='RFC' value='4086'/>
<seriesInfo name='DOI' value='10.17487/RFC4086'/>
</reference>

<reference  anchor='RFC4346' target='https://www.rfc-editor.org/info/rfc4346'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.1</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2006' month='April' />
</front>
<seriesInfo name='RFC' value='4346'/>
<seriesInfo name='DOI' value='10.17487/RFC4346'/>
</reference>

<reference  anchor='RFC4366' target='https://www.rfc-editor.org/info/rfc4366'>
<front>
<title>Transport Layer Security (TLS) Extensions</title>
<author initials='S.' surname='Blake-Wilson' fullname='S. Blake-Wilson'><organization /></author>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='D.' surname='Hopwood' fullname='D. Hopwood'><organization /></author>
<author initials='J.' surname='Mikkelsen' fullname='J. Mikkelsen'><organization /></author>
<author initials='T.' surname='Wright' fullname='T. Wright'><organization /></author>
<date year='2006' month='April' />
</front>
<seriesInfo name='RFC' value='4366'/>
<seriesInfo name='DOI' value='10.17487/RFC4366'/>
</reference>

<!-- If the 4492bis doc. is published before this one, should we note
  somewhere in text that we're aware of it (possibly the last paragraph
  of the Introduction)? -->
<reference  anchor='RFC4492' target='https://www.rfc-editor.org/info/rfc4492'>
<front>
<title>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</title>
<author initials='S.' surname='Blake-Wilson' fullname='S. Blake-Wilson'><organization /></author>
<author initials='N.' surname='Bolyard' fullname='N. Bolyard'><organization /></author>
<author initials='V.' surname='Gupta' fullname='V. Gupta'><organization /></author>
<author initials='C.' surname='Hawk' fullname='C. Hawk'><organization /></author>
<author initials='B.' surname='Moeller' fullname='B. Moeller'><organization /></author>
<date year='2006' month='May' />
</front>
<seriesInfo name='RFC' value='4492'/>
<seriesInfo name='DOI' value='10.17487/RFC4492'/>
</reference>

<reference  anchor='RFC5077' target='https://www.rfc-editor.org/info/rfc5077'>
<front>
<title>Transport Layer Security (TLS) Session Resumption without Server-Side State</title>
<author initials='J.' surname='Salowey' fullname='J. Salowey'><organization /></author>
<author initials='H.' surname='Zhou' fullname='H. Zhou'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2008' month='January' />
</front>
<seriesInfo name='RFC' value='5077'/>
<seriesInfo name='DOI' value='10.17487/RFC5077'/>
</reference>

<reference  anchor='RFC5246' target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>

<reference  anchor='RFC5764' target='https://www.rfc-editor.org/info/rfc5764'>
<front>
<title>Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
</front>
<seriesInfo name='RFC' value='5764'/>
<seriesInfo name='DOI' value='10.17487/RFC5764'/>
</reference>

<reference  anchor='RFC5929' target='https://www.rfc-editor.org/info/rfc5929'>
<front>
<title>Channel Bindings for TLS</title>
<author initials='J.' surname='Altman' fullname='J. Altman'><organization /></author>
<author initials='N.' surname='Williams' fullname='N. Williams'><organization /></author>
<author initials='L.' surname='Zhu' fullname='L. Zhu'><organization /></author>
<date year='2010' month='July' />
</front>
<seriesInfo name='RFC' value='5929'/>
<seriesInfo name='DOI' value='10.17487/RFC5929'/>
</reference>

<reference  anchor='RFC6101' target='https://www.rfc-editor.org/info/rfc6101'>
<front>
<title>The Secure Sockets Layer (SSL) Protocol Version 3.0</title>
<author initials='A.' surname='Freier' fullname='A. Freier'><organization /></author>
<author initials='P.' surname='Karlton' fullname='P. Karlton'><organization /></author>
<author initials='P.' surname='Kocher' fullname='P. Kocher'><organization /></author>
<date year='2011' month='August' />
</front>
<seriesInfo name='RFC' value='6101'/>
<seriesInfo name='DOI' value='10.17487/RFC6101'/>
</reference>

<reference  anchor='RFC6176' target='https://www.rfc-editor.org/info/rfc6176'>
<front>
<title>Prohibiting Secure Sockets Layer (SSL) Version 2.0</title>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<author initials='T.' surname='Polk' fullname='T. Polk'><organization /></author>
<date year='2011' month='March' />
</front>
<seriesInfo name='RFC' value='6176'/>
<seriesInfo name='DOI' value='10.17487/RFC6176'/>
</reference>

<reference  anchor='RFC6091' target='https://www.rfc-editor.org/info/rfc6091'>
<front>
<title>Using OpenPGP Keys for Transport Layer Security (TLS) Authentication</title>
<author initials='N.' surname='Mavrogiannopoulos' fullname='N. Mavrogiannopoulos'><organization /></author>
<author initials='D.' surname='Gillmor' fullname='D. Gillmor'><organization /></author>
<date year='2011' month='February' />
</front>
<seriesInfo name='RFC' value='6091'/>
<seriesInfo name='DOI' value='10.17487/RFC6091'/>
</reference>

<reference  anchor='RFC6520' target='https://www.rfc-editor.org/info/rfc6520'>
<front>
<title>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) Heartbeat Extension</title>
<author initials='R.' surname='Seggelmann' fullname='R. Seggelmann'><organization /></author>
<author initials='M.' surname='Tuexen' fullname='M. Tuexen'><organization /></author>
<author initials='M.' surname='Williams' fullname='M. Williams'><organization /></author>
<date year='2012' month='February' />
</front>
<seriesInfo name='RFC' value='6520'/>
<seriesInfo name='DOI' value='10.17487/RFC6520'/>
</reference>

<reference  anchor='RFC8305' target='https://www.rfc-editor.org/info/rfc8305'>
<front>
<title>Happy Eyeballs Version 2: Better Connectivity Using Concurrency</title>
<author initials='D.' surname='Schinazi' fullname='D. Schinazi'><organization /></author>
<author initials='T.' surname='Pauly' fullname='T. Pauly'><organization /></author>
<date year='2017' month='December' />
</front>
<seriesInfo name='RFC' value='8305'/>
<seriesInfo name='DOI' value='10.17487/RFC8305'/>
</reference>

<reference  anchor='RFC7230' target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>

<reference  anchor='RFC7250' target='https://www.rfc-editor.org/info/rfc7250'>
<front>
<title>Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='P.' surname='Wouters' fullname='P. Wouters' role='editor'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='J.' surname='Gilmore' fullname='J. Gilmore'><organization /></author>
<author initials='S.' surname='Weiler' fullname='S. Weiler'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='June' />
</front>
<seriesInfo name='RFC' value='7250'/>
<seriesInfo name='DOI' value='10.17487/RFC7250'/>
</reference>

<reference  anchor='RFC7465' target='https://www.rfc-editor.org/info/rfc7465'>
<front>
<title>Prohibiting RC4 Cipher Suites</title>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<date year='2015' month='February' />
</front>
<seriesInfo name='RFC' value='7465'/>
<seriesInfo name='DOI' value='10.17487/RFC7465'/>
</reference>

<reference  anchor='RFC7568' target='https://www.rfc-editor.org/info/rfc7568'>
<front>
<title>Deprecating Secure Sockets Layer Version 3.0</title>
<author initials='R.' surname='Barnes' fullname='R. Barnes'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson'><organization /></author>
<author initials='A.' surname='Pironti' fullname='A. Pironti'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='June' />
</front>
<seriesInfo name='RFC' value='7568'/>
<seriesInfo name='DOI' value='10.17487/RFC7568'/>
</reference>

<reference  anchor='RFC7627' target='https://www.rfc-editor.org/info/rfc7627'>
<front>
<title>Transport Layer Security (TLS) Session Hash and Extended Master Secret Extension</title>
<author initials='K.' surname='Bhargavan' fullname='K. Bhargavan' role='editor'><organization /></author>
<author initials='A.' surname='Delignat-Lavaud' fullname='A. Delignat-Lavaud'><organization /></author>
<author initials='A.' surname='Pironti' fullname='A. Pironti'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='M.' surname='Ray' fullname='M. Ray'><organization /></author>
<date year='2015' month='September' />
</front>
<seriesInfo name='RFC' value='7627'/>
<seriesInfo name='DOI' value='10.17487/RFC7627'/>
</reference>

<reference  anchor='RFC7685' target='https://www.rfc-editor.org/info/rfc7685'>
<front>
<title>A Transport Layer Security (TLS) ClientHello Padding Extension</title>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='October' />
</front>
<seriesInfo name='RFC' value='7685'/>
<seriesInfo name='DOI' value='10.17487/RFC7685'/>
</reference>

<reference anchor="DSS" >
  <front>
    <title>Digital Signature Standard (DSS)</title>
    <author >
      <organization>National Institute of Standards and Technology, U.S. Department of Commerce</organization>
    </author>
    <date month="July" year="2013"/>
  </front>
  <seriesInfo name="NIST" value="FIPS PUB 186-4"/>
  <seriesInfo name="DOI" value="10.6028/NIST.FIPS.186-4"/>
</reference>

<reference anchor="RSA" >
  <front>
    <title>A Method for Obtaining Digital Signatures and Public-Key Cryptosystems</title>
    <author initials="R." surname="Rivest">
      <organization></organization>
    </author>
    <author initials="A." surname="Shamir">
      <organization></organization>
    </author>
    <author initials="L.M." surname="Adleman">
      <organization></organization>
    </author>
    <date year="1978" month="February"/>
  </front>
  <seriesInfo name="Communications of the ACM," value="Vol. 21 No. 2, pp. 120-126"/>
  <seriesInfo name="DOI" value="10.1145/359340.359342"/>
</reference>

<reference anchor="SSL2" >
  <front>
    <title>The SSL Protocol</title>
    <author initials="K." surname="Hickman" fullname="Kipp Hickman">
      <organization>Netscape Communications Corp.</organization>
    </author>
    <date year="1995" month="February" day="09"/>
  </front>
</reference>

<reference anchor="TIMING" >
  <front>
    <title>Remote Timing Attacks Are Practical</title>
    <author initials="D." surname="Boneh">
      <organization></organization>
    </author>
    <author initials="D." surname="Brumley">
      <organization></organization>
    </author>
    <date month="August" year="2003"/>
  </front>
  <seriesInfo name="USENIX" value="Security Symposium"/>
</reference>

<reference anchor="X501" target="https://www.itu.int/rec/T-REC-X.501/en">
  <front>
    <title>Information Technology - Open Systems Interconnection - The Directory: Models</title>
    <author >
      <organization>ITU-T</organization>
    </author>
    <date month="October" year="2016"/>
  </front>
  <seriesInfo name="ITU-T" value="X.501"/>
</reference>

<reference anchor="IEEE1363" >
  <front>
    <title>IEEE Standard Specifications for Public Key Cryptography</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date/>
<!--    <date year="2000"/> -->
  </front>
  <seriesInfo name="IEEE Std." value="1363-2000"/>
  <seriesInfo name="DOI" value="10.1109/IEEESTD.2000.92292"/>
</reference>

<reference anchor="PSK-FINISHED" target="https://www.ietf.org/mail-archive/web/tls/current/msg18215.html">
  <front>
    <title>Revision 10: possible attack if client authentication is allowed during PSK</title>
    <author initials="S." surname="Scott">
      <organization></organization>
    </author>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="M." surname="Horvat">
      <organization></organization>
    </author>
    <author initials="T." surname="van der Merwe">
      <organization></organization>
    </author>
    <date month="31 October" year="2015"/>
  </front>
  <seriesInfo name="message to the" value="TLS mailing list"/>
</reference>

<reference anchor="CHHSV17" target="https://www.ietf.org/mail-archive/web/tls/current/msg22382.html">
  <front>
    <title>Awkward Handshake: Possible mismatch of client/server view on client authentication in post-handshake mode in Revision 18</title>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="M." surname="Horvat">
      <organization></organization>
    </author>
    <author initials="J." surname="Hoyland">
      <organization></organization>
    </author>
    <author initials="S." surname="Scott">
      <organization></organization>
    </author>
    <author initials="T." surname="van der Merwe">
      <organization></organization>
    </author>
    <date month="10 February" year="2017"/>
  </front>
  <seriesInfo name="message to the" value="TLS mailing list"/>
</reference>

<reference anchor="SLOTH" >
  <front>
    <title>Transcript Collision Attacks: Breaking Authentication in TLS, IKE, and SSH</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="G." surname="Leurent">
      <organization></organization>
    </author>
    <date month="February" year="2016"/>
  </front>
  <seriesInfo name="Network and Distributed System Security Symposium"
    value="(NDSS 2016)"/>
  <seriesInfo name="DOI" value="10.14722/ndss.2016.23418"/>
</reference>

<reference anchor="AEAD-LIMITS" target="http://www.isg.rhul.ac.uk/~kp/TLS-AEbounds.pdf">
  <front>
    <title>Limits on Authenticated Encryption Use in TLS</title>
    <author initials="A." surname="Luykx">
      <organization></organization>
    </author>
    <author initials="K." surname="Paterson">
      <organization></organization>
    </author>
    <date month="August" year="2017"/>
  </front>
</reference>

<reference anchor="CK01" >
  <front>
    <title>Analysis of Key-Exchange Protocols and Their Use for Building Secure Channels</title>
    <author initials="R." surname="Canetti">
      <organization></organization>
    </author>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date month="April" year="2001"/>
  </front>
  <seriesInfo name="Proceedings of" value="Eurocrypt 2001"/>
  <seriesInfo name="DOI" value="10.1007/3-540-44987-6_28"/>
</reference>

<reference anchor="CCG16" >
  <front>
    <title>On Post-compromise Security</title>
    <author initials="K." surname="Cohn-Gordon">
      <organization></organization>
    </author>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="L." surname="Garratt">
      <organization></organization>
    </author>
    <date month="July" year="2015"/>
  </front>
  <seriesInfo name="IEEE Computer Security Foundations" value="Symposium"/>
  <seriesInfo name="DOI" value="10.1109/CSF.2016.19"/>
</reference>

<reference anchor="BBFGKZ16">
  <front>
    <title>Downgrade Resilience in Key-Exchange Protocols</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="C." surname="Brzuska">
      <organization></organization>
    </author>
    <author initials="C." surname="Fournet">
      <organization></organization>
    </author>
    <author initials="M." surname="Green">
      <organization></organization>
    </author>
    <author initials="M." surname="Kohlweiss">
      <organization></organization>
    </author>
    <author initials="S." surname="Zanella-Beguelin">
      <organization></organization>
    </author>
    <date month="May" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy"
 value="(San Jose)"/>
  <seriesInfo name="DOI" value="10.1109/SP.2016.37"/>
</reference>

<reference anchor="DOW92" >
  <front>
    <title>Authentication and authenticated key exchanges</title>
    <author initials="W." surname="Diffie">
      <organization></organization>
    </author>
    <author initials="P." surname="van Oorschot">
      <organization></organization>
    </author>
    <author initials="M." surname="Wiener">
      <organization></organization>
    </author>
    <date month="June" year="1992"/>
  </front>
  <seriesInfo name="Designs, Codes" value="and Cryptography"/>
  <seriesInfo name="DOI" value="10.1007/BF00124891"/>
</reference>

<reference anchor="HGFS15" >
  <front>
    <title>Prying Open Pandora's Box: KCI Attacks against TLS</title>
    <author initials="C." surname="Hlauschek">
      <organization></organization>
    </author>
    <author initials="M." surname="Gruber">
      <organization></organization>
    </author>
    <author initials="F." surname="Fankhauser">
      <organization></organization>
    </author>
    <author initials="C." surname="Schanes">
      <organization></organization>
    </author>
    <date month="August" year="2015"/>
  </front>
  <seriesInfo name="Proceedings of USENIX Workshop on" value="Offensive Technologies"/>
</reference>

<reference anchor="SIGMA" >
  <front>
    <title>SIGMA: The 'SIGn-and-MAc' Approach to Authenticated Diffie-Hellman and its Use in the IKE Protocols</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date month="August" year="2003"/>
  </front>
  <seriesInfo name="Proceedings of" value="CRYPTO 2003"/>
  <seriesInfo name="DOI" value="10.1007/978-3-540-45146-4_24"/>
</reference>

<reference anchor="CHSV16" target="https://ieeexplore.ieee.org/document/7546518/">
  <front>
    <title>Automated Analysis and Verification of TLS 1.3: 0-RTT, Resumption and Delayed Authentication</title>
    <author initials="C." surname="Cremers">
      <organization></organization>
    </author>
    <author initials="M." surname="Horvat">
      <organization></organization>
    </author>
    <author initials="S." surname="Scott">
      <organization></organization>
    </author>
    <author initials="T." surname="van der Merwe">
      <organization></organization>
    </author>
    <date month="May" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy"
 value="(San Jose)"/>
  <seriesInfo name="DOI" value="10.1109/SP.2016.35"/>
</reference>

<reference anchor="FGSW16" target="https://ieeexplore.ieee.org/document/7546517/">
  <front>
    <title>Key Confirmation in Key Exchange: A Formal Treatment and Implications for TLS 1.3</title>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <author initials="B." surname="Schmidt">
      <organization></organization>
    </author>
    <author initials="B." surname="Warinschi">
      <organization></organization>
    </author>
    <date month="May" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy"
 value="(San Jose)"/>
  <seriesInfo name="DOI" value="10.1109/SP.2016.34"/>
</reference>

<reference anchor="LXZFH16" target="https://ieeexplore.ieee.org/document/7546519/">
  <front>
    <title>Multiple Handshakes Security of TLS 1.3 Candidates</title>
    <author initials="X." surname="Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Xu">
      <organization></organization>
    </author>
    <author initials="Z." surname="Zhang">
      <organization></organization>
    </author>
    <author initials="D." surname="Feng">
      <organization></organization>
    </author>
    <author initials="H." surname="Hu">
      <organization></organization>
    </author>
    <date month="May" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy" value="(San Jose)"/>
  <seriesInfo name="DOI" value="10.1109/SP.2016.36"/>
</reference>

<reference anchor="FW15">
  <front>
    <title>Factoring RSA Keys With TLS Perfect Forward Secrecy</title>
    <author initials="F." surname="Weimer" fullname="Florian Weimer">
      <organization>Red Hat Product Security</organization>
    </author>
    <date year="2015" month="September"/>
  </front>
</reference>

<reference anchor="REKEY" >
  <front>
    <title>Increasing the Lifetime of a Key: A Comparative Analysis of the Security of Re-keying Techniques</title>
    <author initials="M." surname="Abdalla">
      <organization></organization>
    </author>
    <author initials="M." surname="Bellare">
      <organization></organization>
    </author>
    <date year="2000" month="October"/>
  </front>
  <seriesInfo name="ASIACRYPT" value="2000"/>
  <seriesInfo name="DOI" value="10.1007/3-540-44448-3_42"/>
</reference>

<reference anchor="BDFKPPRSZZ16" target="https://eprint.iacr.org/2016/1178">
  <front>
    <title>Implementing and Proving the TLS 1.3 Record Layer</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="A." surname="Delignat-Lavaud">
      <organization></organization>
    </author>
    <author initials="C." surname="Fournet">
      <organization></organization>
    </author>
    <author initials="M." surname="Kohlweiss">
      <organization></organization>
    </author>
    <author initials="J." surname="Pan">
      <organization></organization>
    </author>
    <author initials="J." surname="Protzenko">
      <organization></organization>
    </author>
    <author initials="A." surname="Rastogi">
      <organization></organization>
    </author>
    <author initials="N." surname="Swamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Zanella-Beguelin">
      <organization></organization>
    </author>
    <author initials="J.K." surname="Zinzindohoue">
      <organization></organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy" value="(San Jose)"/>
</reference>

<reference anchor="BMMRT15" target="https://eprint.iacr.org/2015/394">
  <front>
    <title>Augmented Secure Channels and the Goal of the TLS 1.3 Record Layer</title>
    <author initials="C." surname="Badertscher">
      <organization></organization>
    </author>
    <author initials="C." surname="Matt">
      <organization></organization>
    </author>
    <author initials="U." surname="Maurer">
      <organization></organization>
    </author>
    <author initials="P." surname="Rogaway">
      <organization></organization>
    </author>
    <author initials="B." surname="Tackmann">
      <organization></organization>
    </author>
    <date year="2015" month="September"/>
  </front>
  <seriesInfo name="ProvSec" value="2015"/>
</reference>

<reference anchor="BT16" target="https://eprint.iacr.org/2016/564">
  <front>
    <title>The Multi-User Security of Authenticated Encryption: AES-GCM in TLS 1.3</title>
    <author initials="M." surname="Bellare">
      <organization></organization>
    </author>
    <author initials="B." surname="Tackmann">
      <organization></organization>
    </author>
    <date month="July" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of" value="CRYPTO 2016"/>
</reference>

<reference anchor="Kraw16" target="https://eprint.iacr.org/2016/711">
  <front>
    <title>A Unilateral-to-Mutual Authentication Compiler for Key Exchange (with Applications to Client Authentication in TLS 1.3</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date month="October" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of" value="ACM CCS 2016"/>
</reference>

<reference anchor="KW16" target="https://eprint.iacr.org/2015/978">
  <front>
    <title>The OPTLS Protocol and TLS 1.3</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <author initials="H." surname="Wee">
      <organization></organization>
    </author>
    <date month="March" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of" value="EuroS&amp;P 2016"/>
</reference>

<reference anchor="DFGS15" target="https://eprint.iacr.org/2015/914">
  <front>
    <title>A Cryptographic Analysis of the TLS 1.3 Handshake Protocol Candidates</title>
    <author initials="B." surname="Dowling">
      <organization></organization>
    </author>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <author initials="D." surname="Stebila">
      <organization></organization>
    </author>
    <date month="October" year="2015"/>
  </front>
  <seriesInfo name="Proceedings of" value="ACM CCS 2015"/>
</reference>


<reference anchor="DFGS16" target="https://eprint.iacr.org/2016/081">
  <front>
    <title>A Cryptographic Analysis of the TLS 1.3 Full and Pre-shared Key Handshake Protocol</title>
    <author initials="B." surname="Dowling">
      <organization></organization>
    </author>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <author initials="D." surname="Stebila">
      <organization></organization>
    </author>
    <date month="February" year="2016"/>
  </front>
  <seriesInfo name="TRON" value="2016"/>
</reference>

<reference anchor="FG17" target="https://eprint.iacr.org/2017/082">
  <front>
    <title>Replay Attacks on Zero Round-Trip Time: The Case of the TLS 1.3 Handshake Candidates</title>
    <author initials="M." surname="Fischlin">
      <organization></organization>
    </author>
    <author initials="F." surname="Guenther">
      <organization></organization>
    </author>
    <date month="April" year="2017"/>
  </front>
  <seriesInfo name="Proceedings of" value="EuroS&amp;P 2017"/>
</reference>

<reference anchor="BBK17" >
  <front>
    <title>Verified Models and Reference Implementations for the TLS 1.3 Standard Candidate</title>
    <author initials="K." surname="Bhargavan">
      <organization></organization>
    </author>
    <author initials="B." surname="Blanchet">
      <organization></organization>
    </author>
    <author initials="N." surname="Kobeissi">
      <organization></organization>
    </author>
    <date month="May" year="2017"/>
  </front>
  <seriesInfo name="Proceedings of IEEE Symposium on Security and Privacy"
 value="(San Jose)"/>
  <seriesInfo name="DOI" value="10.1109/SP.2017.26"/>
</reference>

<reference anchor="Kraw10" target="https://eprint.iacr.org/2010/264">
  <front>
    <title>Cryptographic Extraction and Key Derivation: The HKDF Scheme</title>
    <author initials="H." surname="Krawczyk">
      <organization></organization>
    </author>
    <date month="August" year="2010"/>
  </front>
  <seriesInfo name="Proceedings of" value="CRYPTO 2010"/>
</reference>

<reference anchor="Mac17" target="https://github.com/tlswg/tls13-spec/issues/1001">
  <front>
    <title>Security Review of TLS1.3 0-RTT</title>
    <author initials="C." surname="MacCarthaigh">
      <organization></organization>
    </author>
    <date month="March" year="2017"/>
  </front>
</reference>

<reference anchor="Res17a" target="https://www.ietf.org/mail-archive/web/tls/current/msg25091.html">
  <front>
    <title>Preliminary data on Firefox TLS 1.3 Middlebox experiment</title>
    <author initials="E." surname="Rescorla">
      <organization></organization>
    </author>
    <date month="5 December" year="2017"/>
  </front>
 <seriesInfo name="message to the" value="TLS mailing list"/>
</reference>

<reference anchor="Res17b" target="https://www.ietf.org/mail-archive/web/tls/current/msg25179.html">
  <front>
    <title>More compatibility measurement results</title>
    <author initials="E." surname="Rescorla">
      <organization></organization>
    </author>
    <date month="22 December" year="2017"/>
  </front>
 <seriesInfo name="message to the" value="TLS mailing list"/>
</reference>

<reference anchor="Ben17a" target="https://datatracker.ietf.org/meeting/100/materials/slides-100-tls-sessa-tls13/">
  <front>
    <title>Presentation before the TLS WG at IETF 100</title>
    <author initials="D." surname="Benjamin">
      <organization></organization>
    </author>
    <date month="November" year="2017"/>
  </front>
</reference>

<reference anchor="Ben17b" target="https://www.ietf.org/mail-archive/web/tls/current/msg25168.html">
  <front>
    <title>Additional TLS 1.3 results from Chrome</title>
    <author initials="D." surname="Benjamin">
      <organization></organization>
    </author>
    <date month="18 December" year="2017"/>
  </front>
  <seriesInfo name="message to the" value="TLS mailing list"/>
</reference>

<reference anchor="JSS15" target="https://www.nds.rub.de/media/nds/veroeffentlichungen/2015/08/21/Tls13QuicAttacks.pdf">
  <front>
    <title>On the Security of TLS 1.3 and QUIC Against Weaknesses in PKCS#1 v1.5 Encryption</title>
    <author initials="T." surname="Jager">
      <organization></organization>
    </author>
    <author initials="J." surname="Schwenk">
      <organization></organization>
    </author>
    <author initials="J." surname="Somorovsky">
      <organization></organization>
    </author>
    <date month="October" year="2015"/>
  </front>
  <seriesInfo name="Proceedings of" value="ACM CCS 2015"/>
  <seriesInfo name="DOI" value="10.1145/2810103.2813657"/>
</reference>

<reference anchor="PS18" target="https://eprint.iacr.org/2018/634">
  <front>
    <title>Partially specified channels: The TLS 1.3 record layer without elision</title>
    <author initials="C." surname="Patton">
      <organization></organization>
    </author>
    <author initials="T." surname="Shrimpton">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>

<reference  anchor='RFC3552' target='https://www.rfc-editor.org/info/rfc3552'>
<front>
<title>Guidelines for Writing RFC Text on Security Considerations</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='B.' surname='Korver' fullname='B. Korver'><organization /></author>
<date year='2003' month='July' />
</front>
<seriesInfo name='BCP' value='72'/>
<seriesInfo name='RFC' value='3552'/>
<seriesInfo name='DOI' value='10.17487/RFC3552'/>
</reference>

<reference  anchor='RFC7924' target='https://www.rfc-editor.org/info/rfc7924'>
<front>
<title>Transport Layer Security (TLS) Cached Information Extension</title>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2016' month='July' />
</front>
<seriesInfo name='RFC' value='7924'/>
<seriesInfo name='DOI' value='10.17487/RFC7924'/>
</reference>

<reference  anchor='RFC6347' target='https://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>

<reference anchor="KEYAGREEMENT" >
  <front>
    <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
    <author initials="E." surname="Barker" fullname="Elaine Barker">
      <organization></organization>
    </author>
    <author initials="L." surname="Chen" fullname="Lily Chen">
      <organization></organization>
    </author>
    <author initials="A." surname="Roginsky" fullname="Allen Roginsky">
      <organization></organization>
    </author>
    <author initials="A" surname="Vassilev" fullname="Apostol Vassilev">
      <organization></organization>
    </author>
    <author initials="R." surname="Davis" fullname="Richard Davis">
      <organization></organization>
    </author>
    <date year="2018" month="April"/>
  </front>
  <seriesInfo name="National Institute of Standards" value="and Technology"/>
  <seriesInfo name="DOI" value="10.6028/NIST.SP.800-56Ar3"/>
</reference>

<!-- draft-ietf-tls-iana-registry-updates (RFC 8447; AUTH48) -->
<reference anchor="RFC8447" target="https://www.rfc-editor.org/info/rfc8447">
<front>
<title>IANA Registry Updates for TLS and DTLS</title>
<author initials='J' surname='Salowey' fullname='Joseph Salowey'>
    <organization />
</author>
<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>
<date month='August' year='2018' />
</front>
<seriesInfo name="RFC" value="8447"/>
<seriesInfo name='DOI' value='10.17487/RFC8447'/>
</reference>

<!-- draft-ietf-tls-record-limit (EDIT) -->
<reference anchor='TLS-Record-Limit'>
<front>
<title>Record Size Limit Extension for Transport Layer Security (TLS)</title>
<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>
<date month='May' day='17' year='2018' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-tls-record-limit-03' />
</reference>

<!-- draft-ietf-tls-tls13-vectors (I-D Exists) -->
<reference anchor="TLS13-TRACES">
<front>
<title>Example Handshake Traces for TLS 1.3</title>
<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>
<date month='May' year='2018' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-tls-tls13-vectors-04'/>
</reference>

<reference anchor="CHECKOWAY" >
  <front>
    <title>A Systematic Analysis of the Juniper Dual EC Incident</title>
    <author initials="S." surname="Checkoway" fullname="Stephen Checkoway">
      <organization></organization>
    </author>
    <author initials="J." surname="Maskiewicz" fullname="Jacob Maskiewicz">
      <organization></organization>
    </author>
    <author initials="C." surname="Garman" fullname="Christina Garman">
      <organization></organization>
    </author>
    <author initials="J." surname="Fried" fullname="Joshua Fried">
      <organization></organization>
    </author>
    <author initials="S." surname="Cohney" fullname="Shaanan Cohney">
      <organization></organization>
    </author>
    <author initials="M." surname="Green" fullname="Matthew Green">
      <organization></organization>
    </author>
    <author initials="N." surname="Heninger" fullname="Nadia Heninger">
      <organization></organization>
    </author>
    <author initials="R." surname="Weinmann" fullname="Ralf-Philipp Weinmann">
      <organization></organization>
    </author>
    <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
      <organization></organization>
    </author>
    <author initials="H." surname="Shacham" fullname="Hovav Shacham">
      <organization></organization>
    </author>
    <date month="October" year="2016"/>
  </front>
  <seriesInfo name="Proceedings of the 2016 ACM SIGSAC Conference on Computer
 and Communications Security -" value="CCS '16"/>
  <seriesInfo name="DOI" value="10.1145/2976749.2978395"/>
</reference>

<reference anchor="CLINIC" >
  <front>
    <title>I Know Why You Went to the Clinic: Risks and Realization of HTTPS Traffic Analysis</title>
    <author initials="B." surname="Miller" fullname="Brad Miller">
      <organization></organization>
    </author>
    <author initials="L." surname="Huang" fullname="Ling Huang">
      <organization></organization>
    </author>
    <author initials="A." surname="Joseph" fullname="A. D. Joseph">
      <organization></organization>
    </author>
    <author initials="J." surname="Tygar" fullname="J. D. Tygar">
      <organization></organization>
    </author>
    <date year="2014"/>
  </front>
  <seriesInfo name="Privacy Enhancing Technologies," value="pp. 143-163"/>
  <seriesInfo name="DOI" value="10.1007/978-3-319-08506-7_8"/>
</reference>

<reference anchor="HCJC16" >
  <front>
    <title>HTTPS traffic analysis and client identification using passive SSL/TLS fingerprinting</title>
    <author initials="M." surname="Husak" fullname="Martin Husak">
      <organization></organization>
    </author>
    <author initials="M." surname="Cermak" fullname="Milan Cermak">
      <organization></organization>
    </author>
    <author initials="T." surname="Jirsik" fullname="Tomas Jirsik">
      <organization></organization>
    </author>
    <author initials="P." surname="Celeda" fullname="Pavel Celeda">
      <organization></organization>
    </author>
    <date year="2016" month="February"/>
  </front>
  <seriesInfo name="EURASIP Journal on Information Security," value="Vol. 2016"/>
  <seriesInfo name="DOI" value="10.1186/s13635-016-0030-7"/>
</reference>

<reference anchor="Blei98">
  <front>
  <title>Chosen Ciphertext Attacks against Protocols Based on RSA Encryption Standard PKCS #1</title>
  <author initials="D." surname="Bleichenbacher" fullname="Daniel">
  <organization/>
  </author>
  <date year="1998"/>
  </front>
  <seriesInfo name="Proceedings of" value="CRYPTO '98"/>
</reference>
</references>

<section anchor="state-machine" title="State Machine">

<t>This appendix provides a summary of the legal state transitions for the
client and server handshakes.  State names (in all capitals, e.g.,
START) have no formal meaning but are provided for ease of
comprehension.  Actions which are taken only in certain circumstances are
indicated in []. The notation "K_{send,recv} = foo" means
"set the send/recv key to the given key".</t>

<section anchor="client" title="Client">

<figure><artwork><![CDATA[
                           START <----+
            Send ClientHello |        | Recv HelloRetryRequest
       [K_send = early data] |        |
                             v        |
        /                 WAIT_SH ----+
        |                    | Recv ServerHello
        |                    | K_recv = handshake
    Can |                    V
   send |                 WAIT_EE
  early |                    | Recv EncryptedExtensions
   data |           +--------+--------+
        |     Using |                 | Using certificate
        |       PSK |                 v
        |           |            WAIT_CERT_CR
        |           |        Recv |       | Recv CertificateRequest
        |           | Certificate |       v
        |           |             |    WAIT_CERT
        |           |             |       | Recv Certificate
        |           |             v       v
        |           |              WAIT_CV
        |           |                 | Recv CertificateVerify
        |           +> WAIT_FINISHED <+
        |                  | Recv Finished
        \                  | [Send EndOfEarlyData]
                           | K_send = handshake
                           | [Send Certificate [+ CertificateVerify]]
 Can send                  | Send Finished
 app data   -->            | K_send = K_recv = application
 after here                v
                       CONNECTED
]]></artwork></figure>

<t>Note that with the transitions as shown above, clients may send alerts
that derive from post-ServerHello messages in the clear or with the
early data keys. If clients need to send such alerts, they SHOULD
first rekey to the handshake keys if possible.</t>

</section>
<section anchor="server" title="Server">

<figure><artwork><![CDATA[
                             START <-----+
              Recv ClientHello |         | Send HelloRetryRequest
                               v         |
                            RECVD_CH ----+
                               | Select parameters
                               v
                            NEGOTIATED
                               | Send ServerHello
                               | K_send = handshake
                               | Send EncryptedExtensions
                               | [Send CertificateRequest]
Can send                       | [Send Certificate + CertificateVerify]
app data                       | Send Finished
after   -->                    | K_send = application
here                  +--------+--------+
             No 0-RTT |                 | 0-RTT
                      |                 |
  K_recv = handshake  |                 | K_recv = early data
[Skip decrypt errors] |    +------> WAIT_EOED -+
                      |    |       Recv |      | Recv EndOfEarlyData
                      |    | early data |      | K_recv = handshake
                      |    +------------+      |
                      |                        |
                      +> WAIT_FLIGHT2 <--------+
                               |
                      +--------+--------+
              No auth |                 | Client auth
                      |                 |
                      |                 v
                      |             WAIT_CERT
                      |        Recv |       | Recv Certificate
                      |       empty |       v
                      | Certificate |    WAIT_CV
                      |             |       | Recv
                      |             v       | CertificateVerify
                      +-> WAIT_FINISHED <---+
                               | Recv Finished
                               | K_recv = application
                               v
                           CONNECTED
]]></artwork></figure>

</section>
</section>
<section anchor="protocol-data-structures-and-constant-values" title="Protocol Data Structures and Constant Values">

<t>This appendix provides the normative protocol types and the
definitions for constants.  Values listed as "_RESERVED" were used in
previous versions of TLS and are listed here for completeness.
TLS&nbsp;1.3 implementations MUST NOT send them but might receive them
from older TLS implementations.</t>

<section anchor="record-layer-1" title="Record Layer">

<figure><artwork><![CDATA[
   enum {
       invalid(0),
       change_cipher_spec(20),
       alert(21),
       handshake(22),
       application_data(23),
       (255)
   } ContentType;

   struct {
       ContentType type;
       ProtocolVersion legacy_record_version;
       uint16 length;
       opaque fragment[TLSPlaintext.length];
   } TLSPlaintext;

   struct {
       opaque content[TLSPlaintext.length];
       ContentType type;
       uint8 zeros[length_of_padding];
   } TLSInnerPlaintext;

   struct {
       ContentType opaque_type = application_data; /* 23 */
       ProtocolVersion legacy_record_version = 0x0303; /* TLS v1.2 */
       uint16 length;
       opaque encrypted_record[TLSCiphertext.length];
   } TLSCiphertext;
]]></artwork></figure>

</section>
<section anchor="alert-messages" title="Alert Messages">

<figure><artwork><![CDATA[
   enum { warning(1), fatal(2), (255) } AlertLevel;

   enum {
       close_notify(0),
       unexpected_message(10),
       bad_record_mac(20),
       decryption_failed_RESERVED(21),
       record_overflow(22),
       decompression_failure_RESERVED(30),
       handshake_failure(40),
       no_certificate_RESERVED(41),
       bad_certificate(42),
       unsupported_certificate(43),
       certificate_revoked(44),
       certificate_expired(45),
       certificate_unknown(46),
       illegal_parameter(47),
       unknown_ca(48),
       access_denied(49),
       decode_error(50),
       decrypt_error(51),
       export_restriction_RESERVED(60),
       protocol_version(70),
       insufficient_security(71),
       internal_error(80),
       inappropriate_fallback(86),
       user_canceled(90),
       no_renegotiation_RESERVED(100),
       missing_extension(109),
       unsupported_extension(110),
       certificate_unobtainable_RESERVED(111),
       unrecognized_name(112),
       bad_certificate_status_response(113),
       bad_certificate_hash_value_RESERVED(114),
       unknown_psk_identity(115),
       certificate_required(116),
       no_application_protocol(120),
       (255)
   } AlertDescription;

   struct {
       AlertLevel level;
       AlertDescription description;
   } Alert;
]]></artwork></figure>

</section>
<section anchor="handshake-protocol-1" title="Handshake Protocol">

<figure><artwork><![CDATA[
   enum {
       hello_request_RESERVED(0),
       client_hello(1),
       server_hello(2),
       hello_verify_request_RESERVED(3),
       new_session_ticket(4),
       end_of_early_data(5),
       hello_retry_request_RESERVED(6),
       encrypted_extensions(8),
       certificate(11),
       server_key_exchange_RESERVED(12),
       certificate_request(13),
       server_hello_done_RESERVED(14),
       certificate_verify(15),
       client_key_exchange_RESERVED(16),
       finished(20),
       certificate_url_RESERVED(21),
       certificate_status_RESERVED(22),
       supplemental_data_RESERVED(23),
       key_update(24),
       message_hash(254),
       (255)
   } HandshakeType;

   struct {
       HandshakeType msg_type;    /* handshake type */
       uint24 length;             /* bytes in message */
       select (Handshake.msg_type) {
           case client_hello:          ClientHello;
           case server_hello:          ServerHello;
           case end_of_early_data:     EndOfEarlyData;
           case encrypted_extensions:  EncryptedExtensions;
           case certificate_request:   CertificateRequest;
           case certificate:           Certificate;
           case certificate_verify:    CertificateVerify;
           case finished:              Finished;
           case new_session_ticket:    NewSessionTicket;
           case key_update:            KeyUpdate;
       };
   } Handshake;
]]></artwork></figure>

<section anchor="key-exchange-messages-1" title="Key Exchange Messages">

<figure><artwork><![CDATA[
   uint16 ProtocolVersion;
   opaque Random[32];

   uint8 CipherSuite[2];    /* Cryptographic suite selector */

   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id<0..32>;
       CipherSuite cipher_suites<2..2^16-2>;
       opaque legacy_compression_methods<1..2^8-1>;
       Extension extensions<8..2^16-1>;
   } ClientHello;

   struct {
       ProtocolVersion legacy_version = 0x0303;    /* TLS v1.2 */
       Random random;
       opaque legacy_session_id_echo<0..32>;
       CipherSuite cipher_suite;
       uint8 legacy_compression_method = 0;
       Extension extensions<6..2^16-1>;
   } ServerHello;

   struct {
       ExtensionType extension_type;
       opaque extension_data<0..2^16-1>;
   } Extension;

   enum {
       server_name(0),                             /* RFC 6066 */
       max_fragment_length(1),                     /* RFC 6066 */
       status_request(5),                          /* RFC 6066 */
       supported_groups(10),                       /* RFC 4492, 7919 */
       signature_algorithms(13),                   /* RFC 8446 */
       use_srtp(14),                               /* RFC 5764 */
       heartbeat(15),                              /* RFC 6520 */
       application_layer_protocol_negotiation(16), /* RFC 7301 */
       signed_certificate_timestamp(18),           /* RFC 6962 */
       client_certificate_type(19),                /* RFC 7250 */
       server_certificate_type(20),                /* RFC 7250 */
       padding(21),                                /* RFC 7685 */
       RESERVED(40),                               /* Used but never
                                                         assigned */
       pre_shared_key(41),                         /* RFC 8446 */
       early_data(42),                             /* RFC 8446 */
       supported_versions(43),                     /* RFC 8446 */
       cookie(44),                                 /* RFC 8446 */
       psk_key_exchange_modes(45),                 /* RFC 8446 */
       RESERVED(46),                               /* Used but never
                                                         assigned */
       certificate_authorities(47),                /* RFC 8446 */
       oid_filters(48),                            /* RFC 8446 */
       post_handshake_auth(49),                    /* RFC 8446 */
       signature_algorithms_cert(50),              /* RFC 8446 */
       key_share(51),                              /* RFC 8446 */
       (65535)
   } ExtensionType;

   struct {
       NamedGroup group;
       opaque key_exchange<1..2^16-1>;
   } KeyShareEntry;

   struct {
       KeyShareEntry client_shares<0..2^16-1>;
   } KeyShareClientHello;

   struct {
       NamedGroup selected_group;
   } KeyShareHelloRetryRequest;

   struct {
       KeyShareEntry server_share;
   } KeyShareServerHello;

   struct {
       uint8 legacy_form = 4;
       opaque X[coordinate_length];
       opaque Y[coordinate_length];
   } UncompressedPointRepresentation;

   enum { psk_ke(0), psk_dhe_ke(1), (255) } PskKeyExchangeMode;

   struct {
       PskKeyExchangeMode ke_modes<1..255>;
   } PskKeyExchangeModes;

   struct {} Empty;

   struct {
       select (Handshake.msg_type) {
           case new_session_ticket:   uint32 max_early_data_size;
           case client_hello:         Empty;
           case encrypted_extensions: Empty;
       };
   } EarlyDataIndication;

   struct {
       opaque identity<1..2^16-1>;
       uint32 obfuscated_ticket_age;
   } PskIdentity;

   opaque PskBinderEntry<32..255>;

   struct {
       PskIdentity identities<7..2^16-1>;
       PskBinderEntry binders<33..2^16-1>;
   } OfferedPsks;

   struct {
       select (Handshake.msg_type) {
           case client_hello: OfferedPsks;
           case server_hello: uint16 selected_identity;
       };
   } PreSharedKeyExtension;
]]></artwork></figure>

<section anchor="version-extension" title="Version Extension">

<figure><artwork><![CDATA[
   struct {
       select (Handshake.msg_type) {
           case client_hello:
                ProtocolVersion versions<2..254>;

           case server_hello: /* and HelloRetryRequest */
                ProtocolVersion selected_version;
       };
   } SupportedVersions;
]]></artwork></figure>

</section>
<section anchor="cookie-extension" title="Cookie Extension">

<figure><artwork><![CDATA[
   struct {
       opaque cookie<1..2^16-1>;
   } Cookie;
]]></artwork></figure>

</section>
<section anchor="signature-algorithm-extension" title="Signature Algorithm Extension">

<figure><artwork><![CDATA[
   enum {
       /* RSASSA-PKCS1-v1_5 algorithms */
       rsa_pkcs1_sha256(0x0401),
       rsa_pkcs1_sha384(0x0501),
       rsa_pkcs1_sha512(0x0601),

       /* ECDSA algorithms */
       ecdsa_secp256r1_sha256(0x0403),
       ecdsa_secp384r1_sha384(0x0503),
       ecdsa_secp521r1_sha512(0x0603),

       /* RSASSA-PSS algorithms with public key OID rsaEncryption */
       rsa_pss_rsae_sha256(0x0804),
       rsa_pss_rsae_sha384(0x0805),
       rsa_pss_rsae_sha512(0x0806),

       /* EdDSA algorithms */
       ed25519(0x0807),
       ed448(0x0808),

       /* RSASSA-PSS algorithms with public key OID RSASSA-PSS */
       rsa_pss_pss_sha256(0x0809),
       rsa_pss_pss_sha384(0x080a),
       rsa_pss_pss_sha512(0x080b),

       /* Legacy algorithms */
       rsa_pkcs1_sha1(0x0201),
       ecdsa_sha1(0x0203),

       /* Reserved Code Points */
       obsolete_RESERVED(0x0000..0x0200),
       dsa_sha1_RESERVED(0x0202),
       obsolete_RESERVED(0x0204..0x0400),
       dsa_sha256_RESERVED(0x0402),
       obsolete_RESERVED(0x0404..0x0500),
       dsa_sha384_RESERVED(0x0502),
       obsolete_RESERVED(0x0504..0x0600),
       dsa_sha512_RESERVED(0x0602),
       obsolete_RESERVED(0x0604..0x06FF),
       private_use(0xFE00..0xFFFF),
       (0xFFFF)
   } SignatureScheme;

   struct {
       SignatureScheme supported_signature_algorithms<2..2^16-2>;
   } SignatureSchemeList;
]]></artwork></figure>

</section>
<section anchor="supported-groups-extension" title="Supported Groups Extension">

<figure><artwork><![CDATA[
   enum {
       unallocated_RESERVED(0x0000),

       /* Elliptic Curve Groups (ECDHE) */
       obsolete_RESERVED(0x0001..0x0016),
       secp256r1(0x0017), secp384r1(0x0018), secp521r1(0x0019),
       obsolete_RESERVED(0x001A..0x001C),
       x25519(0x001D), x448(0x001E),

       /* Finite Field Groups (DHE) */
       ffdhe2048(0x0100), ffdhe3072(0x0101), ffdhe4096(0x0102),
       ffdhe6144(0x0103), ffdhe8192(0x0104),

       /* Reserved Code Points */
       ffdhe_private_use(0x01FC..0x01FF),
       ecdhe_private_use(0xFE00..0xFEFF),
       obsolete_RESERVED(0xFF01..0xFF02),
       (0xFFFF)
   } NamedGroup;

   struct {
       NamedGroup named_group_list<2..2^16-1>;
   } NamedGroupList;
]]></artwork></figure>

<t>Values within "obsolete_RESERVED" ranges are used in previous versions
of TLS and MUST NOT be offered or negotiated by TLS 1.3 implementations.
The obsolete curves have various known/theoretical weaknesses or have
had very little usage, in some cases only due to unintentional
server configuration issues. They are no longer considered appropriate
for general use and should be assumed to be potentially unsafe. The set
of curves specified here is sufficient for interoperability with all
currently deployed and properly configured TLS implementations.</t>

</section>
</section>
<section anchor="server-parameters-messages" title="Server Parameters Messages">

<figure><artwork><![CDATA[
   opaque DistinguishedName<1..2^16-1>;

   struct {
       DistinguishedName authorities<3..2^16-1>;
   } CertificateAuthoritiesExtension;

   struct {
       opaque certificate_extension_oid<1..2^8-1>;
       opaque certificate_extension_values<0..2^16-1>;
   } OIDFilter;

   struct {
       OIDFilter filters<0..2^16-1>;
   } OIDFilterExtension;

   struct {} PostHandshakeAuth;

   struct {
       Extension extensions<0..2^16-1>;
   } EncryptedExtensions;

   struct {
       opaque certificate_request_context<0..2^8-1>;
       Extension extensions<2..2^16-1>;
   } CertificateRequest;
]]></artwork></figure>

</section>
<section anchor="authentication-messages-1" title="Authentication Messages">

<figure><artwork><![CDATA[
   /* Managed by IANA */
   enum {
       X509(0),
       OpenPGP_RESERVED(1),
       RawPublicKey(2),
       (255)
   } CertificateType;

   struct {
       select (certificate_type) {
           case RawPublicKey:
             /* From RFC 7250 ASN.1_subjectPublicKeyInfo */
             opaque ASN1_subjectPublicKeyInfo<1..2^24-1>;

           case X509:
             opaque cert_data<1..2^24-1>;
       };
       Extension extensions<0..2^16-1>;
   } CertificateEntry;

   struct {
       opaque certificate_request_context<0..2^8-1>;
       CertificateEntry certificate_list<0..2^24-1>;
   } Certificate;

   struct {
       SignatureScheme algorithm;
       opaque signature<0..2^16-1>;
   } CertificateVerify;

   struct {
       opaque verify_data[Hash.length];
   } Finished;
]]></artwork></figure>

</section>
<section anchor="ticket-establishment" title="Ticket Establishment">

<figure><artwork><![CDATA[
   struct {
       uint32 ticket_lifetime;
       uint32 ticket_age_add;
       opaque ticket_nonce<0..255>;
       opaque ticket<1..2^16-1>;
       Extension extensions<0..2^16-2>;
   } NewSessionTicket;
]]></artwork></figure>

</section>
<section anchor="updating-keys" title="Updating Keys">

<figure><artwork><![CDATA[
   struct {} EndOfEarlyData;

   enum {
       update_not_requested(0), update_requested(1), (255)
   } KeyUpdateRequest;

   struct {
       KeyUpdateRequest request_update;
   } KeyUpdate;
]]></artwork></figure>

</section>
</section>
<section anchor="cipher-suites" title="Cipher Suites">

<t>A symmetric cipher suite defines the pair of the AEAD algorithm and hash
algorithm to be used with HKDF.
Cipher suite names follow the naming convention:</t>

<figure><artwork><![CDATA[
   CipherSuite TLS_AEAD_HASH = VALUE;
]]></artwork></figure>

<texttable>
      <ttcol align='left'>Component</ttcol>
      <ttcol align='left'>Contents</ttcol>
      <c>TLS</c>
      <c>The string "TLS"</c>
      <c>AEAD</c>
      <c>The AEAD algorithm used for record protection</c>
      <c>HASH</c>
      <c>The hash algorithm used with HKDF</c>
      <c>VALUE</c>
      <c>The two-byte ID assigned for this cipher suite</c>
</texttable>

<t>This specification defines the following cipher suites for use with TLS 1.3.</t>

<texttable>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>Value</ttcol>
      <c>TLS_AES_128_GCM_SHA256</c>
      <c>{0x13,0x01}</c>
      <c>TLS_AES_256_GCM_SHA384</c>
      <c>{0x13,0x02}</c>
      <c>TLS_CHACHA20_POLY1305_SHA256</c>
      <c>{0x13,0x03}</c>
      <c>TLS_AES_128_CCM_SHA256</c>
      <c>{0x13,0x04}</c>
      <c>TLS_AES_128_CCM_8_SHA256</c>
      <c>{0x13,0x05}</c>
</texttable>

<t>The corresponding AEAD algorithms AEAD_AES_128_GCM, AEAD_AES_256_GCM, and
AEAD_AES_128_CCM are defined in
<xref target="RFC5116"/>. AEAD_CHACHA20_POLY1305 is defined in
<xref target="RFC7539"/>. AEAD_AES_128_CCM_8 is defined in
<xref target="RFC6655"/>. The corresponding hash algorithms are defined in
<xref target="SHS"/>.</t>

<t>Although TLS 1.3 uses the same cipher suite space as previous versions
of TLS, TLS 1.3 cipher suites are defined differently, only specifying
the symmetric ciphers, and cannot be used for TLS 1.2. Similarly,
cipher suites for TLS 1.2 and lower cannot be used with TLS&nbsp;1.3.</t>

<t>New cipher suite values are assigned by IANA as described in
<xref target="iana-considerations"/>.</t>

</section>
</section>
<section anchor="implementation-notes" title="Implementation Notes">

<t>The TLS protocol cannot prevent many common security mistakes. This appendix
provides several recommendations to assist implementors.
<xref target="TLS13-TRACES"/> provides test vectors for TLS 1.3 handshakes.</t>

<section anchor="random-number-generation-and-seeding" title="Random Number Generation and Seeding">

<t>TLS requires a cryptographically secure pseudorandom number generator (CSPRNG).
In most cases, the operating system provides an appropriate facility such
as /dev/urandom, which should be used absent other (performance) concerns.
It is RECOMMENDED to use an existing CSPRNG implementation in
preference to crafting a new one. Many adequate cryptographic libraries
are already available under favorable license terms.  Should those prove
unsatisfactory, <xref target="RFC4086"/> provides guidance on the generation of random values.</t>

<t>TLS uses random values (1) in public protocol fields such as the
public Random values in the ClientHello and ServerHello and (2)&nbsp;to
generate keying material. With a properly functioning CSPRNG, this
does not present a security problem, as it is not feasible to determine
the CSPRNG state from its output. However, with a broken CSPRNG, it
may be possible for an attacker to use the public output to determine
the CSPRNG internal state and thereby predict the keying material, as
documented in <xref target="CHECKOWAY"/>.
Implementations can provide extra security against
this form of attack by using separate CSPRNGs to generate public and
private values.</t>

</section>
<section anchor="certificates-and-authentication" title="Certificates and Authentication">

<t>Implementations are responsible for verifying the integrity of certificates
and should generally support certificate revocation messages. Absent a specific
indication from an application profile, certificates should always be
verified to ensure proper signing by a trusted certificate authority (CA).
The selection and addition of trust anchors should be done very carefully.
Users should be able to view information about the certificate and trust anchor.
Applications SHOULD also enforce minimum and maximum key sizes. For example,
certification paths containing keys or signatures weaker than 2048-bit RSA or
224-bit ECDSA are not appropriate for secure applications.</t>

</section>
<section anchor="implementation-pitfalls" title="Implementation Pitfalls">

<t>Implementation experience has shown that certain parts of earlier TLS
specifications are not easy to understand and have been a source of
interoperability and security problems. Many of these areas have been clarified
in this document, but this appendix contains a short list of the most important
things that require special attention from implementors.</t>

<t>TLS protocol issues:</t>

<t><list style="symbols">
  <t>Do you correctly handle handshake messages that are fragmented to
multiple TLS records (see <xref target="record-layer"/>)?
Do you correctly handle corner cases like a ClientHello that is split
into several small fragments? Do you fragment handshake messages that exceed
the maximum fragment size? In particular, the Certificate and
CertificateRequest handshake messages can be large enough to require
fragmentation.</t>
  <t>Do you ignore the TLS record layer version number in all unencrypted TLS
records (see <xref target="backward-compatibility"/>)?</t>
  <t>Have you ensured that all support for SSL, RC4,
EXPORT ciphers, and MD5 (via the "signature_algorithms" extension) is
completely removed from all possible configurations that support TLS 1.3 or
later, and that attempts to use these obsolete capabilities fail correctly
(see <xref target="backward-compatibility"/>)?</t>
  <t>Do you handle TLS extensions in ClientHellos correctly, including
unknown extensions?</t>
  <t>When the server has requested a client certificate but no
suitable certificate is available, do you correctly send an empty
Certificate message, instead of omitting the whole message (see
<xref target="certificate"/>)?</t>
  <t>When processing the plaintext fragment produced by AEAD-Decrypt and
scanning from the end for the ContentType, do you avoid scanning
past the start of the cleartext in the event that the peer has sent
a malformed plaintext of all zeros?</t>
  <t>Do you properly ignore unrecognized cipher suites
(<xref target="client-hello"/>), hello extensions (<xref target="extensions"/>), named groups
(<xref target="negotiated-groups"/>), key shares (<xref target="key-share"/>),
supported versions (<xref target="supported-versions"/>),
and signature algorithms (<xref target="signature-algorithms"/>) in the
ClientHello?</t>
  <t>As a server, do you send a HelloRetryRequest to clients which
support a compatible (EC)DHE group but do not predict it in the
"key_share" extension? As a client, do you correctly handle a HelloRetryRequest
from the server?</t>
</list></t>

<t>Cryptographic details:</t>

<t><list style="symbols">
  <t>What countermeasures do you use to prevent timing attacks <xref target="TIMING"/>?</t>
  <t>When using Diffie-Hellman key exchange, do you correctly preserve
leading zero bytes in the negotiated key (see <xref target="finite-field-diffie-hellman"/>)?</t>
  <t>Does your TLS client check that the Diffie-Hellman parameters sent
by the server are acceptable (see <xref target="ffdhe-param"/>)?</t>
  <t>Do you use a strong and, most importantly, properly seeded random number
generator (see <xref target="random-number-generation-and-seeding"/>) when
generating Diffie-Hellman private values, the ECDSA "k" parameter, and other
security-critical values? It is RECOMMENDED that implementations implement
"deterministic ECDSA" as specified in <xref target="RFC6979"/>.</t>
<t>Do you zero-pad Diffie-Hellman public key values and shared secrets
to the group size (see <xref target="ffdhe-param"/> and
<xref target="finite-field-diffie-hellman"/>)?</t>
  <t>Do you verify signatures after making them, to protect against
RSA&nbhy;CRT key leaks <xref target="FW15"/>?</t>
</list></t>

</section>
<section anchor="client-tracking" title="Client Tracking Prevention">

<t>Clients SHOULD NOT reuse a ticket for multiple connections. Reuse
of a ticket allows passive observers to correlate different connections.
Servers that issue tickets SHOULD offer at least as many tickets
as the number of connections that a client might use; for example, a web
browser using HTTP/1.1 <xref target="RFC7230"/> might open six connections
to a server. Servers SHOULD issue new tickets with every connection. This
ensures that clients are always able to use a new ticket when creating a new
connection.</t>

</section>
<section anchor="unauthenticated-operation" title="Unauthenticated Operation">

<t>Previous versions of TLS offered explicitly unauthenticated cipher suites
based on anonymous Diffie-Hellman. These modes have been deprecated in TLS 1.3.
However, it is still possible to negotiate parameters that do not provide
verifiable server authentication by several methods, including:</t>

<t><list style="symbols">
  <t>Raw public keys <xref target="RFC7250"/>.</t>
  <t>Using a public key contained in a certificate but without
validation of the certificate chain or any of its contents.</t>
</list></t>

<t>Either technique used alone is vulnerable to man-in-the-middle attacks
and therefore unsafe for general use. However, it is also possible to
bind such connections to an external authentication mechanism via
out-of-band validation of the server's public key, trust on first
use, or a mechanism such as channel bindings (though the
channel bindings described in <xref target="RFC5929"/> are not defined for
TLS&nbsp;1.3). If no such mechanism is used, then the connection has
no protection against active man-in-the-middle attack; applications
MUST&nbsp;NOT use TLS in such a way absent explicit configuration or a
specific application profile.</t>

</section>
</section>
<section anchor="backward-compatibility" title="Backward Compatibility">

<t>The TLS protocol provides a built-in mechanism for version negotiation between
endpoints potentially supporting different versions of TLS.</t>

<t>TLS 1.x and SSL 3.0 use compatible ClientHello messages. Servers can also handle
clients trying to use future versions of TLS as long as the ClientHello format
remains compatible and there is at least one protocol version supported by
both the client and the server.</t>

<t>Prior versions of TLS used the record layer version number
(TLSPlaintext.legacy_record_version and
TLSCiphertext.legacy_record_version) for various purposes.
As of TLS&nbsp;1.3, this field is deprecated. The value of
TLSPlaintext.legacy_record_version MUST be ignored by all implementations.
The value of TLSCiphertext.legacy_record_version is included in the
additional data for deprotection but MAY otherwise be ignored
or MAY be validated to match the fixed constant value.
Version negotiation is performed using only the handshake versions
(ClientHello.legacy_version and ServerHello.legacy_version, as well as the
ClientHello, HelloRetryRequest, and ServerHello "supported_versions"
extensions). In order to maximize interoperability with older endpoints,
implementations that negotiate the use of TLS 1.0-1.2 SHOULD set the
record layer version number to the negotiated version for the ServerHello and
all records thereafter.</t>

<t>For maximum compatibility with previously non-standard behavior and misconfigured
deployments, all implementations SHOULD support validation of certification paths
based on the expectations in this document, even when handling prior TLS versions'
handshakes (see <xref target="server-certificate-selection"/>).</t>

<t>TLS 1.2 and prior supported an "Extended Master Secret" <xref target="RFC7627"/> extension
which digested large parts of the handshake transcript into the master secret.
Because TLS 1.3 always hashes in the transcript up to the server Finished,
implementations which support both TLS 1.3 and earlier versions SHOULD
indicate the use of the Extended Master Secret extension in their APIs
whenever TLS 1.3 is&nbsp;used.</t>

<section anchor="negotiating-with-an-older-server" title="Negotiating with an Older Server">

<t>A TLS 1.3 client who wishes to negotiate with servers that do not
support TLS 1.3 will send a normal TLS 1.3 ClientHello containing 0x0303 (TLS
1.2) in ClientHello.legacy_version but with the correct version(s) in the
"supported_versions" extension. If the server does not support TLS 1.3, it
will respond with a ServerHello containing an older version number. If the
client agrees to use this version, the negotiation will proceed as appropriate
for the negotiated protocol. A client using a ticket for resumption SHOULD
initiate the connection using the version that was previously negotiated.</t>

<t>Note that 0-RTT data is not compatible with older servers and
SHOULD&nbsp;NOT be sent absent knowledge that the server supports TLS 1.3.
See <xref target="zero-rtt-backward-compatibility"/>.</t>

<t>If the version chosen by the server is not supported by the client
(or is not acceptable), the client MUST abort the handshake with a
"protocol_version" alert.</t>

<t>Some legacy server implementations are known to not implement the TLS
specification properly and might abort connections upon encountering
TLS extensions or versions which they are not aware of. Interoperability
with buggy servers is a complex topic beyond the scope of this document.
Multiple connection attempts may be required in order to negotiate
a backward-compatible connection; however, this practice is vulnerable
to downgrade attacks and is NOT RECOMMENDED.</t>

</section>
<section anchor="negotiating-with-an-older-client" title="Negotiating with an Older Client">

<t>A TLS server can also receive a ClientHello indicating a version number
smaller than its highest supported version. If the "supported_versions"
extension is present, the server MUST negotiate using that extension as
described in <xref target="supported-versions"/>. If the "supported_versions"
extension is not present, the server MUST negotiate the minimum of
ClientHello.legacy_version and TLS 1.2. For example, if the server supports
TLS 1.0, 1.1, and 1.2, and legacy_version is TLS 1.0, the server will proceed
with a TLS 1.0 ServerHello. If the "supported_versions" extension is absent
and the server only supports versions greater than ClientHello.legacy_version,
the server MUST abort the handshake with a "protocol_version" alert.</t>

<t>Note that earlier versions of TLS did not clearly specify the
record layer version number value in all cases
(TLSPlaintext.legacy_record_version). Servers
will receive various TLS 1.x versions in this field, but its value
MUST always be ignored.</t>

</section>
<section anchor="zero-rtt-backward-compatibility" title="0-RTT Backward Compatibility">

<t>0-RTT data is not compatible with older servers. An older server will respond
to the ClientHello with an older ServerHello, but it will not correctly skip
the 0-RTT data and will fail to complete the handshake. This can cause issues when
a client attempts to use 0-RTT, particularly against multi-server deployments. For
example, a deployment could deploy TLS 1.3 gradually with some servers
implementing TLS 1.3 and some implementing TLS 1.2, or a TLS 1.3 deployment
could be downgraded to TLS 1.2.</t>

<t>A client that attempts to send 0-RTT data MUST fail a connection if it
receives a ServerHello with TLS 1.2 or older.  It can then retry the connection
with 0-RTT disabled.  To avoid a downgrade attack, the client SHOULD NOT disable
TLS 1.3, only 0-RTT.</t>

<t>To avoid this error condition, multi-server deployments SHOULD ensure a uniform
and stable deployment of TLS 1.3 without 0-RTT prior to enabling 0-RTT.</t>

</section>
<section anchor="middlebox" title="Middlebox Compatibility Mode">

<t>Field measurements <xref target="Ben17a"/> <xref target="Ben17b"/>
<xref target="Res17a"/> <xref target="Res17b"/> have found that a significant
number of middleboxes misbehave when a TLS client&wj;/server pair negotiates
TLS 1.3. Implementations can increase the chance of making connections through
those middleboxes by making the TLS 1.3 handshake look more like a TLS 1.2
handshake:</t>

<t><list style="symbols">
  <t>The client always provides a non-empty session ID in the ClientHello,
as described in the legacy_session_id section of <xref target="client-hello"/>.</t>
  <t>If not offering early data, the client sends a dummy
change_cipher_spec record (see the third paragraph of <xref
target="record-protocol"/>) immediately before its second flight. This
may either be before its second ClientHello or before its encrypted handshake flight.
If offering early data, the record is placed immediately after the first
ClientHello.</t>

  <t>The server sends a dummy change_cipher_spec record immediately
after its first handshake message. This may either be after a ServerHello or
a HelloRetryRequest.</t>
</list></t>

<t>When put together, these changes make the TLS 1.3 handshake resemble
TLS 1.2 session resumption, which improves the chance of successfully
connecting through middleboxes. This "compatibility mode" is partially
negotiated: the client can opt to provide a session ID or not,
and the server has to echo it. Either side can send change_cipher_spec
at any time during the handshake, as they must be ignored by the peer,
but if the client sends a non-empty session ID, the server MUST send
the change_cipher_spec as described in this appendix.</t>

</section>
<section anchor="backward-compatibility-security-restrictions"
 title="Security Restrictions Related to Backward Compatibility">

<t>Implementations negotiating the use of older versions of TLS SHOULD prefer
forward secret and AEAD cipher suites, when available.</t>

<t>The security of RC4 cipher suites is considered insufficient for the reasons
cited in <xref target="RFC7465"/>. Implementations MUST NOT offer or negotiate
RC4 cipher suites for any version of TLS for any reason.</t>

<t>Old versions of TLS permitted the use of very low strength ciphers.
Ciphers with a strength less than 112 bits MUST NOT be offered or
negotiated for any version of TLS for any reason.</t>

<t>The security of SSL 3.0 <xref target="RFC6101"/> is considered insufficient for the reasons enumerated
in <xref target="RFC7568"/>, and it MUST NOT be negotiated for any reason.</t>

<t>The security of SSL 2.0 <xref target="SSL2"/> is considered insufficient for the reasons enumerated
in <xref target="RFC6176"/>, and it MUST NOT be negotiated for any reason.</t>

<t>Implementations MUST NOT send an SSL version 2.0 compatible
CLIENT&nbhy;HELLO. Implementations MUST NOT negotiate TLS 1.3 or later
using an SSL version 2.0 compatible CLIENT-HELLO. Implementations are
NOT&nbsp;RECOMMENDED to accept an SSL version 2.0 compatible CLIENT&nbhy;HELLO
in order to negotiate older versions of TLS.</t>

<t>Implementations MUST NOT send a ClientHello.legacy_version or
ServerHello.legacy_version set to 0x0300 or less. Any endpoint receiving a
Hello message with ClientHello.legacy_version or ServerHello.legacy_version
set to 0x0300 MUST abort the handshake with a "protocol_version" alert.</t>

<t>Implementations MUST NOT send any records with a version less than 0x0300.
Implementations SHOULD NOT accept any records with a version less than 0x0300
(but may inadvertently do so if the record version number is ignored completely).</t>

<t>Implementations MUST NOT use the Truncated HMAC extension, defined in
Section&nbsp;7 of <xref target="RFC6066"></xref>, as it is not applicable to AEAD algorithms and has
been shown to be insecure in some scenarios.</t>

</section>
</section>
<section anchor="security-analysis" title="Overview of Security Properties">

<t>A complete security analysis of TLS is outside the scope of this document.
In this appendix, we provide an informal description of the desired properties
as well as references to more detailed work in the research literature
which provides more formal definitions.</t>

<t>We cover properties of the handshake separately from those of the record layer.</t>

<section anchor="security-handshake" title="Handshake">

<t>The TLS handshake is an Authenticated Key Exchange (AKE) protocol which
is intended to provide both one-way authenticated (server-only) and
mutually authenticated (client and server) functionality. At the completion
of the handshake, each side outputs its view of the following values:</t>

<t><list style="symbols">
  <t>A set of "session keys" (the various secrets derived from the master
secret) from which can be derived a set of working keys.</t>
  <t>A set of cryptographic parameters (algorithms, etc.).</t>
  <t>The identities of the communicating parties.</t>
</list></t>

<t>We assume the attacker to be an active network attacker, which means it
has complete control over the network used to communicate between the parties <xref target="RFC3552"/>.
Even under these conditions, the handshake should provide the properties listed below.
Note that these properties are not necessarily independent, but reflect
the protocol consumers' needs.</t>

<t><list style="hanging">
  <t hangText='Establishing the same session keys:'>
  The handshake needs to output the same set of session keys on both sides of
the handshake, provided that it completes successfully on each endpoint
(see <xref target="CK01"/>, Definition 1, part 1).</t>
  <t hangText='Secrecy of the session keys:'>
  The shared session keys should be known only to the communicating
parties and not to the attacker (see <xref target="CK01"/>, Definition 1,
part 2). Note that in a unilaterally authenticated connection, the attacker
can establish its own session keys with the server, but those session keys are
distinct from those established by the client.</t>
  <t hangText='Peer authentication:'>
  The client's view of the peer identity should reflect the server's
identity. If the client is authenticated, the server's view of the
peer identity should match the client's identity.</t>
  <t hangText='Uniqueness of the session keys:'>
  Any two distinct handshakes should produce distinct, unrelated session
keys. Individual session keys produced by a handshake should also be distinct
and independent.</t>
  <t hangText='Downgrade protection:'>
  The cryptographic parameters should be the same on both sides and
should be the same as if the peers had been communicating in the
absence of an attack (see <xref target="BBFGKZ16"/>, Definitions 8 and 9).</t>
  <t hangText='Forward secret with respect to long-term keys:'>
  If the long-term keying material (in this case the signature keys in
certificate-based authentication modes or the external/resumption PSK in PSK
with (EC)DHE modes) is compromised after the handshake is complete, this does
not compromise the security of the session key (see <xref target="DOW92"/>),
as long as the session key itself has been erased. The forward secrecy
property is not satisfied when PSK is used in the "psk_ke"
PskKeyExchangeMode.</t>
  <t hangText='Key Compromise Impersonation (KCI) resistance:'>
  In a mutually authenticated connection with certificates, compromising the
long&nbhy;term
secret of one actor should not break that actor's authentication of their peer in
the given connection (see <xref target="HGFS15"/>). For example, if a client's signature key is
compromised, it should not be possible to impersonate arbitrary servers to that client
in subsequent handshakes.</t>
  <t hangText='Protection of endpoint identities:'>
  The server's identity (certificate) should be protected against passive
attackers. The client's identity should be protected against both passive
and active attackers.</t>
</list></t>

<t>Informally, the signature-based modes of TLS 1.3 provide for the
establishment of a unique, secret, shared key established by an
(EC)DHE key exchange and authenticated by the server's signature over
the handshake transcript, as well as tied to the server's identity by
a MAC. If the client is authenticated by a certificate, it also signs
over the handshake transcript and provides a MAC tied to both
identities. <xref target="SIGMA"/> describes the design and analysis of this type of key
exchange protocol. If fresh (EC)DHE keys are used for each connection,
then the output keys are forward secret.</t>

<t>The external PSK and resumption PSK bootstrap from a long-term shared
secret into a unique per-connection set of short-term session keys. This
secret may have been established in a previous handshake. If
PSK with (EC)DHE key establishment is used, these session keys will also be forward
secret. The resumption PSK has been designed so that the
resumption master secret computed by connection N and needed to form
connection N+1 is separate from the traffic keys used by connection N,
thus providing forward secrecy between the connections.
In addition, if multiple tickets are established on the same
connection, they are associated with different keys, so compromise of
the PSK associated with one ticket does not lead to the compromise of
connections established with PSKs associated with other tickets.
This property is most interesting if tickets are stored in a database
(and so can be deleted) rather than if they are self-encrypted.</t>

<t>The PSK binder value forms a binding between a PSK
and the current handshake, as well as between the session where the
PSK was established and the current session. This binding
transitively includes the original handshake transcript, because that
transcript is digested into the values which produce the resumption
master secret. This requires that both the KDF used to produce the
resumption master secret and the MAC used to compute the binder be collision
resistant. See <xref target="key-derivation-and-hkdf"/> for more on this.
Note: The binder does not cover the binder values from other
PSKs, though they are included in the Finished MAC.</t>

<t>TLS does not currently permit the server to send a certificate_request
message in non-certificate-based handshakes (e.g., PSK).
If this restriction were to be relaxed in future, the
client's signature would not cover the server's certificate directly.
However, if the PSK was established through a NewSessionTicket, the client's
signature would transitively cover the server's certificate through
the PSK binder. <xref target="PSK-FINISHED"/>
describes a concrete attack on constructions that do not bind to
the server's certificate (see also <xref target="Kraw16"/>). It is unsafe to use certificate-based client
authentication when the client might potentially share the same
PSK&wj;/key-id pair with two different endpoints.  Implementations
MUST&nbsp;NOT combine external PSKs with certificate-based authentication of
either the client or the server unless negotiated by some extension.</t>

<t>If an exporter is used, then it produces values which are unique
and secret (because they are generated from a unique session key).
Exporters computed with different labels and contexts are computationally
independent, so it is not feasible to compute one from another or
the session secret from the exported value. Note:&nbsp;Exporters can
produce arbitrary-length values; if exporters are to be
used as channel bindings, the exported value MUST be large
enough to provide collision resistance. The exporters provided in
TLS 1.3 are derived from the same Handshake Contexts as the
early traffic keys and the application traffic keys, respectively,
and thus have similar security properties. Note that they do
not include the client's certificate; future applications
which wish to bind to the client's certificate may need
to define a new exporter that includes the full handshake
transcript.</t>

<t>For all handshake modes, the Finished MAC (and, where present, the
signature) prevents downgrade attacks. In addition, the use of
certain bytes in the random nonces as described in <xref target="server-hello"/>
allows the detection of downgrade to previous TLS versions.
See <xref target="BBFGKZ16"/> for more details on TLS 1.3 and downgrade.</t>

<t>As soon as the client and the server have exchanged enough information
to establish shared keys, the remainder of the handshake is encrypted,
thus providing protection against passive attackers, even if the
computed shared key is not authenticated. Because the server
authenticates before the client, the client can ensure that if it
authenticates to the server, it only
reveals its identity to an authenticated server. Note that implementations
must use the provided record-padding mechanism during the handshake
to avoid leaking information about the identities due to length.
The client's proposed PSK identities are not encrypted, nor is the
one that the server selects.</t>

<section anchor="key-derivation-and-hkdf" title="Key Derivation and HKDF">

<t>Key derivation in TLS 1.3 uses HKDF as defined in
<xref target="RFC5869"/> and its two components, HKDF-Extract and
HKDF-Expand. The full rationale for the HKDF construction can be found in
<xref target="Kraw10"></xref> and the rationale for the way it is used in TLS
1.3 in <xref target="KW16"></xref>.  Throughout this document, each
application of HKDF-Extract is followed by one or more invocations of
HKDF-Expand. This ordering should always be followed (including in future
revisions of this document); in particular, one SHOULD NOT use an output of
HKDF-Extract as an input to another application of HKDF-Extract without an
HKDF-Expand in between. Multiple applications of HKDF-Expand to some of
the same inputs are allowed as
long as these are differentiated via the key and/or the labels.</t>

<t>Note that HKDF-Expand implements a pseudorandom function (PRF) with both
inputs and outputs of variable length. In some of the uses of HKDF in this
document (e.g., for generating exporters and the resumption_master_secret), it
is necessary that the application of HKDF-Expand be collision resistant;
namely, it should be infeasible to find two different inputs to HKDF-Expand
that output the same value. This requires the underlying hash function to be
collision resistant and the output length from HKDF-Expand to be of size at
least 256 bits (or as much as needed for the hash function to prevent finding
collisions).</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>A client that has sent authentication data to a server, either during
the handshake or in post-handshake authentication, cannot be sure whether
the server afterwards considers the client to be authenticated or not.
If the client needs to determine if the server considers the
connection to be unilaterally or mutually authenticated, this has to
be provisioned by the application layer. See <xref target="CHHSV17"/> for
details. In addition, the analysis of post&nbhy;handshake authentication from
<xref target="Kraw16"></xref> shows that the client identified by the
certificate sent in the post-handshake phase possesses the traffic key. This
party is therefore the client that participated in the original handshake or
one to whom the original client delegated the traffic key (assuming
that the traffic key has not been compromised).</t>

</section>
<section anchor="rtt" title="0-RTT">

<t>The 0-RTT mode of operation generally provides security properties
similar to those of 1-RTT data, with the two exceptions that the 0-RTT
encryption keys do not provide full forward secrecy and that the
server is not able to guarantee uniqueness of the handshake
(non&nbhy;replayability) without keeping potentially undue amounts of
state. See <xref target="anti-replay"/> for mechanisms to limit
the exposure to replay.</t>

</section>
<section anchor="exporter-independence" title="Exporter Independence">

<t>The exporter_master_secret and early_exporter_master_secret are
derived to be independent of the traffic keys and therefore do
not represent a threat to the security of traffic encrypted with
those keys. However, because these secrets can be used to
compute any exporter value, they SHOULD be erased as soon as
possible. If the total set of exporter labels is known, then
implementations SHOULD pre-compute the inner Derive-Secret
stage of the exporter computation for all those labels,
then erase the [early_]exporter_master_secret, followed by
each inner value as soon as it is known that it will not be
needed again.</t>

</section>
<section anchor="post-compromise-security" title="Post-Compromise Security">

<t>TLS does not provide security for handshakes which take place after the
peer's long-term secret (signature key or external PSK) is compromised. It
therefore does not provide post-compromise security <xref target="CCG16"/>,
sometimes also referred to as backward or future secrecy. This is in contrast
to KCI resistance, which describes the security guarantees that a party has
after its own long-term secret has been compromised.</t>

</section>
<section anchor="external-references" title="External References">

<t>The reader should refer to the following references for analysis of the
TLS handshake: <xref target="DFGS15"/>, <xref target="CHSV16"/>,
<xref target="DFGS16"/>, <xref target="KW16"/>, <xref target="Kraw16"/>,
<xref target="FGSW16"/>, <xref target="LXZFH16"/>, <xref target="FG17"/>,
and <xref target="BBK17"/>.</t>

</section>
</section>
<section anchor="security-record-layer" title="Record Layer">

<t>The record layer depends on the handshake producing strong traffic secrets
which can be used to derive bidirectional encryption keys and nonces.
Assuming that is true, and the keys are used for no more data than
indicated in <xref target="limits-on-key-usage"/>, then the record layer should provide the following
guarantees:</t>

<t><list style="hanging">
  <t hangText='Confidentiality:'>
  An attacker should not be able to determine the plaintext contents
of a given record.
  </t>
  <t hangText='Integrity:'>
  An attacker should not be able to craft a new record which is
different from an existing record which will be accepted by the receiver.
  </t>
  <t hangText='Order protection/non-replayability:'>
  An attacker should not be able to cause the receiver to accept a
record which it has already accepted or cause the receiver to accept
record N+1 without having first processed record N.</t>
  <t hangText='Length concealment:'>
  Given a record with a given external length, the attacker should not be able
to determine the amount of the record that is content versus padding.</t>
  <t hangText='Forward secrecy after key change:'>
  If the traffic key update mechanism described in <xref target="key-update"/> has been
used and the previous generation key is deleted, an attacker who compromises
the endpoint should not be able to decrypt traffic encrypted with the old key.</t>
</list></t>

<t>Informally, TLS 1.3 provides these properties by AEAD-protecting the
plaintext with a strong key. AEAD encryption <xref target="RFC5116"/> provides confidentiality
and integrity for the data. Non-replayability is provided by using
a separate nonce for each record, with the nonce being derived from
the record sequence number (<xref target="nonce"/>), with the sequence
number being maintained independently at both sides; thus, records which
are delivered out of order result in AEAD deprotection failures.
In order to prevent mass cryptanalysis when the same plaintext is
repeatedly encrypted by different users under the same key
(as is commonly the case for HTTP), the nonce is formed by mixing
the sequence number with a secret per-connection initialization
vector derived along with the traffic keys.
See <xref target="BT16"/> for analysis of this construction.</t>

<t>The rekeying technique in TLS 1.3 (see <xref
target="updating-traffic-keys"/>) follows the construction of the serial
generator as discussed in <xref target="REKEY"></xref>, which shows that
rekeying can allow keys to be used for a larger number of encryptions than
without rekeying. This relies on the security of the HKDF&nbhy;Expand-Label
function as a pseudorandom function (PRF).  In addition, as long as this function is truly one way, it
is not possible to compute traffic keys from prior to a key change (forward
secrecy).</t>

<t>TLS does not provide security for data which is communicated on a connection
after a traffic secret of that connection is compromised. That is, TLS does not
provide post-compromise security/future secrecy/backward secrecy with respect
to the traffic secret. Indeed, an attacker who learns a traffic secret can
compute all future traffic secrets on that connection.  Systems which want such
guarantees need to do a fresh handshake and establish a new
connection with an (EC)DHE exchange.</t>

<section anchor="external-references-1" title="External References">

<t>The reader should refer to the following references for analysis of the
TLS record layer: <xref target="BMMRT15"/>, <xref target="BT16"/>,
<xref target="BDFKPPRSZZ16"/>, <xref target="BBK17"/>,
and <xref target="PS18"/>.</t>

</section>
</section>
<section anchor="traffic-analysis" title="Traffic Analysis">

<t>TLS is susceptible to a variety of traffic analysis attacks based on
observing the length and timing of encrypted packets
<xref target="CLINIC"/> <xref target="HCJC16"/>.
This is particularly easy when there is a small
set of possible messages to be distinguished, such as for a video
server hosting a fixed corpus of content, but still provides usable
information even in more complicated scenarios.</t>

<t>TLS does not provide any specific defenses against this form of attack
but does include a padding mechanism for use by applications: The
plaintext protected by the AEAD function consists of content plus
variable-length padding, which allows the application to produce
arbitrary-length encrypted records as well as padding-only cover traffic to
conceal the difference between periods of transmission and periods
of silence. Because the
padding is encrypted alongside the actual content, an attacker cannot
directly determine the length of the padding but may be able to
measure it indirectly by the use of timing channels exposed during
record processing (i.e., seeing how long it takes to process a
record or trickling in records to see which ones elicit a response
from the server). In general, it is not known how to remove all of
these channels because even a constant&nbhy;time padding removal function
will likely feed the content into data-dependent functions.
At minimum, a fully constant-time server or client would require close
cooperation with the application-layer protocol implementation, including
making that higher-level protocol constant time.</t>

<t>Note: Robust
traffic analysis defenses will likely lead to inferior performance
due to delays in transmitting packets and increased traffic volume.</t>

</section>
<section anchor="side-channel-attacks" title="Side-Channel Attacks">

<t>In general, TLS does not have specific defenses against side-channel
attacks (i.e., those which attack the communications via secondary
channels such as timing), leaving those to the implementation of the relevant
cryptographic primitives. However, certain features of TLS are
designed to make it easier to write side-channel resistant code:</t>

<t><list style="symbols">
  <t>Unlike previous versions of TLS which used a composite
MAC-then-encrypt structure, TLS 1.3 only uses AEAD algorithms,
allowing implementations to use self-contained constant-time
implementations of those primitives.</t>
  <t>TLS uses a uniform "bad_record_mac" alert for all decryption
errors, which is intended to prevent an attacker from gaining
piecewise insight into portions of the message.

  Additional resistance
is provided by terminating the connection on such errors; a new
connection will have different cryptographic material, preventing
attacks against the cryptographic primitives that require multiple
trials.</t>
</list></t>

<t>Information leakage through side channels can occur at layers above
TLS, in application protocols and the applications that use
them. Resistance to side-channel attacks depends on applications and
application protocols separately ensuring that confidential
information is not inadvertently leaked.</t>

</section>
<section anchor="replay-0rtt" title="Replay Attacks on 0-RTT">

<t>Replayable 0-RTT data presents a number of security threats to
TLS-using applications, unless those applications are specifically
engineered to be safe under replay (minimally, this means idempotent,
but in many cases may also require other stronger conditions, such as
constant-time response). Potential attacks include:</t>

<t><list style="symbols">
  <t>Duplication of actions which cause side effects (e.g., purchasing an
item or transferring money) to be duplicated, thus harming the site or
the user.</t>
  <t>Attackers can store and replay 0-RTT messages in order to
reorder them with respect to other messages (e.g., moving
a delete to after a create).</t>
  <t>Exploiting cache timing behavior to discover the content of 0-RTT
messages by replaying a 0-RTT message to a different cache node
and then using a separate connection to measure request latency,
to see if the two requests address the same resource.</t>
</list></t>

<t>If data can be replayed a large number of times, additional attacks
become possible, such as making repeated measurements of the
speed of cryptographic operations. In addition, they may
be able to overload rate-limiting systems. For a further description of
these attacks, see <xref target="Mac17"/>.</t>

<t>Ultimately, servers have the responsibility to protect themselves
against attacks employing 0-RTT data replication. The mechanisms
described in <xref target="anti-replay"/> are intended to
prevent replay at the TLS layer but do not provide complete protection
against receiving multiple copies of client data.
TLS 1.3 falls back to the 1-RTT
handshake when the server does not have any information about the
client, e.g., because it is in a different cluster which does not
share state or because the ticket has been deleted as described in
<xref target="single-use-tickets"/>. If the application-layer protocol retransmits
data in this setting, then it is possible for an attacker to induce
message duplication by sending the ClientHello to both the original cluster
(which processes the data immediately) and another cluster which will
fall back to 1-RTT and process the data upon application-layer
replay. The scale of this attack is limited by the client's
willingness to retry transactions and therefore only allows a limited amount
of duplication, with each copy appearing as a new connection at
the server.</t>

<t>If implemented correctly, the mechanisms described in
Sections&nbsp;<xref target="single-use-tickets" format="counter"/> and
<xref target="client-hello-recording" format="counter"/> prevent a
replayed ClientHello and its associated 0-RTT data from being accepted
multiple times by any cluster with consistent state; for servers
which limit the use of 0-RTT to one cluster for a single ticket, then a given
ClientHello and its associated 0-RTT data will only be accepted once.
However, if state is not completely consistent,
then an attacker might be able to have multiple copies of the data be
accepted during the replication window.
Because clients do not know the exact details of server behavior, they
MUST NOT send messages in early data which are not safe to have
replayed and which they would not be willing to retry across multiple
1-RTT connections.</t>

<t>Application protocols MUST NOT use 0-RTT data without a profile that
defines its use. That profile needs to identify which messages or
interactions are safe to use with 0-RTT and how to handle the
situation when the server rejects 0-RTT and falls back to 1-RTT.</t>

<t>In addition, to avoid accidental misuse, TLS implementations MUST NOT
enable 0-RTT (either sending or accepting) unless specifically
requested by the application and MUST NOT automatically resend 0-RTT
data if it is rejected by the server unless instructed by the
application. Server-side applications may wish to implement special
processing for 0-RTT data for some kinds of application traffic (e.g.,
abort the connection, request that data be resent at the application
layer, or delay processing until the handshake completes). In order to
allow applications to implement this kind of processing, TLS
implementations MUST provide a way for the application to determine if
the handshake has completed.</t>

<section anchor="replay-and-exporters" title="Replay and Exporters">

<t>Replays of the ClientHello produce the same early exporter, thus
requiring additional care by applications which use these exporters.
In particular, if these exporters are used as an authentication
channel binding (e.g., by signing the output of the exporter),
an attacker who compromises the PSK can transplant authenticators
between connections without compromising the authentication key.</t>

<t>In addition, the early exporter SHOULD NOT be used to generate
server-to-client encryption keys because that would entail
the reuse of those keys. This parallels the use of the early
application traffic keys only in the client-to-server direction.</t>

</section>
</section>
<section anchor="psk-identity-exposure" title="PSK Identity Exposure">

<t>Because implementations respond to an invalid PSK binder by aborting
the handshake, it may be possible for an attacker to verify whether
a given PSK identity is valid. Specifically, if a server accepts
both external-PSK handshakes and certificate-based handshakes, a valid PSK
identity will result in a failed handshake, whereas an invalid identity will
just be skipped and result in a successful certificate handshake.
Servers which solely support PSK handshakes may be able to resist
this form of attack by treating the cases where there is no
valid PSK identity and where there is an identity but it has an
invalid binder identically.</t>

</section>

<section anchor="sharing-psks" title="Sharing PSKs">
<t>
TLS 1.3 takes a conservative approach to PSKs by binding them to a
specific KDF. By contrast, TLS 1.2 allows PSKs to be used with any
hash function and the TLS 1.2 PRF. Thus, any PSK which is used with
both TLS 1.2 and TLS 1.3 must be used with only one hash in TLS 1.3,
which is less than optimal if users want to provision a single PSK.
The constructions in TLS 1.2 and TLS 1.3 are different, although they
are both based on HMAC. While there is no known way in which the same
PSK might produce related output in both versions, only limited
analysis has been done. Implementations can ensure safety from
cross-protocol key collisions by not reusing PSKs between TLS 1.3 and
TLS 1.2.
</t>
</section>

<section anchor="attacks-on-static-rsa" title="Attacks on Static RSA">

<t>Although TLS 1.3 does not use RSA key transport and so is not
directly susceptible to Bleichenbacher-type attacks
<xref target="Blei98"/>, if TLS 1.3
servers also support static RSA in the context of previous
versions of TLS, then it may be possible to impersonate the server
for TLS 1.3 connections <xref target="JSS15"/>. TLS
1.3 implementations can prevent this attack by disabling support
for static RSA across all versions of TLS. In principle, implementations
might also be able to separate certificates with different keyUsage
bits for static RSA decryption and RSA signature, but this technique
relies on clients refusing to accept signatures using keys
in certificates that do not have the digitalSignature bit set,
and many clients do not enforce this restriction.</t>

</section>
</section>

<section anchor="contributors" title="Contributors" numbered="no">

<figure><artwork><![CDATA[
Martin Abadi
University of California, Santa Cruz
abadi@cs.ucsc.edu

Christopher Allen
(co-editor of TLS 1.0)
Alacrity Ventures
ChristopherA@AlacrityManagement.com

Richard Barnes
Cisco
rlb@ipv.sx

Steven M. Bellovin
Columbia University
smb@cs.columbia.edu

David Benjamin
Google
davidben@google.com

Benjamin Beurdouche
INRIA & Microsoft Research
benjamin.beurdouche@ens.fr

Karthikeyan Bhargavan
(editor of [RFC7627])
INRIA
karthikeyan.bhargavan@inria.fr

Simon Blake-Wilson
(co-author of [RFC4492])
BCI
sblakewilson@bcisse.com

Nelson Bolyard
(co-author of [RFC4492])
Sun Microsystems, Inc.
nelson@bolyard.com

Ran Canetti
IBM
canetti@watson.ibm.com

Matt Caswell
OpenSSL
matt@openssl.org

Stephen Checkoway
University of Illinois at Chicago
sfc@uic.edu

Pete Chown
Skygate Technology Ltd
pc@skygate.co.uk

Katriel Cohn-Gordon
University of Oxford
me@katriel.co.uk

Cas Cremers
University of Oxford
cas.cremers@cs.ox.ac.uk

Antoine Delignat-Lavaud
(co-author of [RFC7627])
INRIA
antdl@microsoft.com

Tim Dierks
(co-author of TLS 1.0,
   co-editor of TLS 1.1 and 1.2)
Independent
tim@dierks.org

Roelof DuToit
Symantec Corporation
roelof_dutoit@symantec.com

Taher Elgamal
Securify
taher@securify.com

Pasi Eronen
Nokia
pasi.eronen@nokia.com

Cedric Fournet
Microsoft
fournet@microsoft.com

Anil Gangolli
anil@busybuddha.org

David M. Garrett
dave@nulldereference.com

Illya Gerasymchuk
Independent
illya@iluxonchik.me

Alessandro Ghedini
Cloudflare Inc.
alessandro@cloudflare.com

Daniel Kahn Gillmor
ACLU
dkg@fifthhorseman.net

Matthew Green
Johns Hopkins University
mgreen@cs.jhu.edu

Jens Guballa
ETAS
jens.guballa@etas.com

Felix Guenther
TU Darmstadt
mail@felixguenther.info

Vipul Gupta
(co-author of [RFC4492])
Sun Microsystems Laboratories
vipul.gupta@sun.com

Chris Hawk
(co-author of [RFC4492])
Corriente Networks LLC
chris@corriente.net

Kipp Hickman

Alfred Hoenes

David Hopwood
Independent Consultant
david.hopwood@blueyonder.co.uk

Marko Horvat
MPI-SWS
mhorvat@mpi-sws.org

Jonathan Hoyland
Royal Holloway, University of London
jonathan.hoyland@gmail.com

Subodh Iyengar
Facebook
subodh@fb.com

Benjamin Kaduk
Akamai
kaduk@mit.edu

Hubert Kario
Red Hat Inc.
hkario@redhat.com

Phil Karlton
(co-author of SSL 3.0)

Leon Klingele
Independent
mail@leonklingele.de

Paul Kocher
(co-author of SSL 3.0)
Cryptography Research
paul@cryptography.com

Hugo Krawczyk
IBM
hugokraw@us.ibm.com

Adam Langley
(co-author of [RFC7627])
Google
agl@google.com

Olivier Levillain
ANSSI
olivier.levillain@ssi.gouv.fr

Xiaoyin Liu
University of North Carolina
  at Chapel Hill
xiaoyin.l@outlook.com

Ilari Liusvaara
Independent
ilariliusvaara@welho.com

Atul Luykx
K.U. Leuven
atul.luykx@kuleuven.be

Colm MacCarthaigh
Amazon Web Services
colm@allcosts.net

Carl Mehner
USAA
carl.mehner@usaa.com

Jan Mikkelsen
Transactionware
janm@transactionware.com

Bodo Moeller
(co-author of [RFC4492])
Google
bodo@acm.org

Kyle Nekritz
Facebook
knekritz@fb.com

Erik Nygren
Akamai Technologies
erik+ietf@nygren.org

Magnus Nystrom
Microsoft
mnystrom@microsoft.com

Kazuho Oku
DeNA Co., Ltd.
kazuhooku@gmail.com

Kenny Paterson
Royal Holloway, University of London
kenny.paterson@rhul.ac.uk

Christopher Patton
University of Florida
cjpatton@ufl.edu

Alfredo Pironti
(co-author of [RFC7627])
INRIA
alfredo.pironti@inria.fr

Andrei Popov
Microsoft
andrei.popov@microsoft.com

Marsh Ray
(co-author of [RFC7627])
Microsoft
maray@microsoft.com

Robert Relyea
Netscape Communications
relyea@netscape.com

Kyle Rose
Akamai Technologies
krose@krose.org

Jim Roskind
Amazon
jroskind@amazon.com

Michael Sabin

Joe Salowey
Tableau Software
joe@salowey.net

Rich Salz
Akamai
rsalz@akamai.com

David Schinazi
Apple Inc.
dschinazi@apple.com

Sam Scott
Royal Holloway, University of London
me@samjs.co.uk

Thomas Shrimpton
University of Florida
teshrim@ufl.edu

Dan Simon
Microsoft, Inc.
dansimon@microsoft.com

Brian Smith
Independent
brian@briansmith.org

Brian Sniffen
Akamai Technologies
ietf@bts.evenmere.org

Nick Sullivan
Cloudflare Inc.
nick@cloudflare.com

Bjoern Tackmann
University of California, San Diego
btackmann@eng.ucsd.edu

Tim Taubert
Mozilla
ttaubert@mozilla.com

Martin Thomson
Mozilla
mt@mozilla.com

Sean Turner
sn3rd
sean@sn3rd.com

Steven Valdez
Google
svaldez@google.com

Filippo Valsorda
Cloudflare Inc.
filippo@cloudflare.com

Thyla van der Merwe
Royal Holloway, University of London
tjvdmerwe@gmail.com

Victor Vasiliev
Google
vasilvv@google.com

Hoeteck Wee
Ecole Normale Superieure, Paris
hoeteck@alum.mit.edu

Tom Weinstein

David Wong
NCC Group
david.wong@nccgroup.trust

Christopher A. Wood
Apple Inc.
cawood@apple.com

Tim Wright
Vodafone
timothy.wright@vodafone.com

Peter Wu
Independent
peter@lekensteyn.nl

Kazu Yamamoto
Internet Initiative Japan Inc.
kazu@iij.ad.jp
]]></artwork></figure>

</section>

  </back>

</rfc>
